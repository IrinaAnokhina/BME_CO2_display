
BME_CO2_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08008b48  08008b48  00018b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  080096a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005f8  20000080  08009728  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000678  08009728  00020678  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001935b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003087  00000000  00000000  00039404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000eb8  00000000  00000000  0003c490  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d60  00000000  00000000  0003d348  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007c81  00000000  00000000  0003e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000043e9  00000000  00000000  00045d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004a112  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000462c  00000000  00000000  0004a190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b2c 	.word	0x08008b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08008b2c 	.word	0x08008b2c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	d1ed      	bne.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_f2iz>:
 800100c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001014:	d30f      	bcc.n	8001036 <__aeabi_f2iz+0x2a>
 8001016:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d90d      	bls.n	800103c <__aeabi_f2iz+0x30>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001028:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800102c:	fa23 f002 	lsr.w	r0, r3, r2
 8001030:	bf18      	it	ne
 8001032:	4240      	negne	r0, r0
 8001034:	4770      	bx	lr
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4770      	bx	lr
 800103c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001040:	d101      	bne.n	8001046 <__aeabi_f2iz+0x3a>
 8001042:	0242      	lsls	r2, r0, #9
 8001044:	d105      	bne.n	8001052 <__aeabi_f2iz+0x46>
 8001046:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800104a:	bf08      	it	eq
 800104c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr

08001058 <__aeabi_ldivmod>:
 8001058:	b97b      	cbnz	r3, 800107a <__aeabi_ldivmod+0x22>
 800105a:	b972      	cbnz	r2, 800107a <__aeabi_ldivmod+0x22>
 800105c:	2900      	cmp	r1, #0
 800105e:	bfbe      	ittt	lt
 8001060:	2000      	movlt	r0, #0
 8001062:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001066:	e006      	blt.n	8001076 <__aeabi_ldivmod+0x1e>
 8001068:	bf08      	it	eq
 800106a:	2800      	cmpeq	r0, #0
 800106c:	bf1c      	itt	ne
 800106e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001072:	f04f 30ff 	movne.w	r0, #4294967295
 8001076:	f000 b9ad 	b.w	80013d4 <__aeabi_idiv0>
 800107a:	f1ad 0c08 	sub.w	ip, sp, #8
 800107e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001082:	2900      	cmp	r1, #0
 8001084:	db09      	blt.n	800109a <__aeabi_ldivmod+0x42>
 8001086:	2b00      	cmp	r3, #0
 8001088:	db1a      	blt.n	80010c0 <__aeabi_ldivmod+0x68>
 800108a:	f000 f835 	bl	80010f8 <__udivmoddi4>
 800108e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001096:	b004      	add	sp, #16
 8001098:	4770      	bx	lr
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db1b      	blt.n	80010dc <__aeabi_ldivmod+0x84>
 80010a4:	f000 f828 	bl	80010f8 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4240      	negs	r0, r0
 80010b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b8:	4252      	negs	r2, r2
 80010ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010be:	4770      	bx	lr
 80010c0:	4252      	negs	r2, r2
 80010c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c6:	f000 f817 	bl	80010f8 <__udivmoddi4>
 80010ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d2:	b004      	add	sp, #16
 80010d4:	4240      	negs	r0, r0
 80010d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010da:	4770      	bx	lr
 80010dc:	4252      	negs	r2, r2
 80010de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010e2:	f000 f809 	bl	80010f8 <__udivmoddi4>
 80010e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ee:	b004      	add	sp, #16
 80010f0:	4252      	negs	r2, r2
 80010f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010f6:	4770      	bx	lr

080010f8 <__udivmoddi4>:
 80010f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010fc:	468c      	mov	ip, r1
 80010fe:	460e      	mov	r6, r1
 8001100:	4604      	mov	r4, r0
 8001102:	9d08      	ldr	r5, [sp, #32]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d150      	bne.n	80011aa <__udivmoddi4+0xb2>
 8001108:	428a      	cmp	r2, r1
 800110a:	4617      	mov	r7, r2
 800110c:	d96c      	bls.n	80011e8 <__udivmoddi4+0xf0>
 800110e:	fab2 fe82 	clz	lr, r2
 8001112:	f1be 0f00 	cmp.w	lr, #0
 8001116:	d00b      	beq.n	8001130 <__udivmoddi4+0x38>
 8001118:	f1ce 0c20 	rsb	ip, lr, #32
 800111c:	fa01 f60e 	lsl.w	r6, r1, lr
 8001120:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001124:	fa02 f70e 	lsl.w	r7, r2, lr
 8001128:	ea4c 0c06 	orr.w	ip, ip, r6
 800112c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001130:	0c3a      	lsrs	r2, r7, #16
 8001132:	fbbc f9f2 	udiv	r9, ip, r2
 8001136:	b2bb      	uxth	r3, r7
 8001138:	fb02 cc19 	mls	ip, r2, r9, ip
 800113c:	fb09 fa03 	mul.w	sl, r9, r3
 8001140:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8001144:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001148:	45b2      	cmp	sl, r6
 800114a:	d90a      	bls.n	8001162 <__udivmoddi4+0x6a>
 800114c:	19f6      	adds	r6, r6, r7
 800114e:	f109 31ff 	add.w	r1, r9, #4294967295
 8001152:	f080 8125 	bcs.w	80013a0 <__udivmoddi4+0x2a8>
 8001156:	45b2      	cmp	sl, r6
 8001158:	f240 8122 	bls.w	80013a0 <__udivmoddi4+0x2a8>
 800115c:	f1a9 0902 	sub.w	r9, r9, #2
 8001160:	443e      	add	r6, r7
 8001162:	eba6 060a 	sub.w	r6, r6, sl
 8001166:	fbb6 f0f2 	udiv	r0, r6, r2
 800116a:	fb02 6610 	mls	r6, r2, r0, r6
 800116e:	fb00 f303 	mul.w	r3, r0, r3
 8001172:	b2a4      	uxth	r4, r4
 8001174:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001178:	42a3      	cmp	r3, r4
 800117a:	d909      	bls.n	8001190 <__udivmoddi4+0x98>
 800117c:	19e4      	adds	r4, r4, r7
 800117e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001182:	f080 810b 	bcs.w	800139c <__udivmoddi4+0x2a4>
 8001186:	42a3      	cmp	r3, r4
 8001188:	f240 8108 	bls.w	800139c <__udivmoddi4+0x2a4>
 800118c:	3802      	subs	r0, #2
 800118e:	443c      	add	r4, r7
 8001190:	2100      	movs	r1, #0
 8001192:	1ae4      	subs	r4, r4, r3
 8001194:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001198:	2d00      	cmp	r5, #0
 800119a:	d062      	beq.n	8001262 <__udivmoddi4+0x16a>
 800119c:	2300      	movs	r3, #0
 800119e:	fa24 f40e 	lsr.w	r4, r4, lr
 80011a2:	602c      	str	r4, [r5, #0]
 80011a4:	606b      	str	r3, [r5, #4]
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d907      	bls.n	80011be <__udivmoddi4+0xc6>
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	d055      	beq.n	800125e <__udivmoddi4+0x166>
 80011b2:	2100      	movs	r1, #0
 80011b4:	e885 0041 	stmia.w	r5, {r0, r6}
 80011b8:	4608      	mov	r0, r1
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	fab3 f183 	clz	r1, r3
 80011c2:	2900      	cmp	r1, #0
 80011c4:	f040 808f 	bne.w	80012e6 <__udivmoddi4+0x1ee>
 80011c8:	42b3      	cmp	r3, r6
 80011ca:	d302      	bcc.n	80011d2 <__udivmoddi4+0xda>
 80011cc:	4282      	cmp	r2, r0
 80011ce:	f200 80fc 	bhi.w	80013ca <__udivmoddi4+0x2d2>
 80011d2:	1a84      	subs	r4, r0, r2
 80011d4:	eb66 0603 	sbc.w	r6, r6, r3
 80011d8:	2001      	movs	r0, #1
 80011da:	46b4      	mov	ip, r6
 80011dc:	2d00      	cmp	r5, #0
 80011de:	d040      	beq.n	8001262 <__udivmoddi4+0x16a>
 80011e0:	e885 1010 	stmia.w	r5, {r4, ip}
 80011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e8:	b912      	cbnz	r2, 80011f0 <__udivmoddi4+0xf8>
 80011ea:	2701      	movs	r7, #1
 80011ec:	fbb7 f7f2 	udiv	r7, r7, r2
 80011f0:	fab7 fe87 	clz	lr, r7
 80011f4:	f1be 0f00 	cmp.w	lr, #0
 80011f8:	d135      	bne.n	8001266 <__udivmoddi4+0x16e>
 80011fa:	2101      	movs	r1, #1
 80011fc:	1bf6      	subs	r6, r6, r7
 80011fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001202:	fa1f f887 	uxth.w	r8, r7
 8001206:	fbb6 f2fc 	udiv	r2, r6, ip
 800120a:	fb0c 6612 	mls	r6, ip, r2, r6
 800120e:	fb08 f002 	mul.w	r0, r8, r2
 8001212:	0c23      	lsrs	r3, r4, #16
 8001214:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001218:	42b0      	cmp	r0, r6
 800121a:	d907      	bls.n	800122c <__udivmoddi4+0x134>
 800121c:	19f6      	adds	r6, r6, r7
 800121e:	f102 33ff 	add.w	r3, r2, #4294967295
 8001222:	d202      	bcs.n	800122a <__udivmoddi4+0x132>
 8001224:	42b0      	cmp	r0, r6
 8001226:	f200 80d2 	bhi.w	80013ce <__udivmoddi4+0x2d6>
 800122a:	461a      	mov	r2, r3
 800122c:	1a36      	subs	r6, r6, r0
 800122e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001232:	fb0c 6610 	mls	r6, ip, r0, r6
 8001236:	fb08 f800 	mul.w	r8, r8, r0
 800123a:	b2a3      	uxth	r3, r4
 800123c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8001240:	45a0      	cmp	r8, r4
 8001242:	d907      	bls.n	8001254 <__udivmoddi4+0x15c>
 8001244:	19e4      	adds	r4, r4, r7
 8001246:	f100 33ff 	add.w	r3, r0, #4294967295
 800124a:	d202      	bcs.n	8001252 <__udivmoddi4+0x15a>
 800124c:	45a0      	cmp	r8, r4
 800124e:	f200 80b9 	bhi.w	80013c4 <__udivmoddi4+0x2cc>
 8001252:	4618      	mov	r0, r3
 8001254:	eba4 0408 	sub.w	r4, r4, r8
 8001258:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800125c:	e79c      	b.n	8001198 <__udivmoddi4+0xa0>
 800125e:	4629      	mov	r1, r5
 8001260:	4628      	mov	r0, r5
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	fa07 f70e 	lsl.w	r7, r7, lr
 800126a:	f1ce 0320 	rsb	r3, lr, #32
 800126e:	fa26 f203 	lsr.w	r2, r6, r3
 8001272:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001276:	fbb2 f1fc 	udiv	r1, r2, ip
 800127a:	fa1f f887 	uxth.w	r8, r7
 800127e:	fb0c 2211 	mls	r2, ip, r1, r2
 8001282:	fa06 f60e 	lsl.w	r6, r6, lr
 8001286:	fa20 f303 	lsr.w	r3, r0, r3
 800128a:	fb01 f908 	mul.w	r9, r1, r8
 800128e:	4333      	orrs	r3, r6
 8001290:	0c1e      	lsrs	r6, r3, #16
 8001292:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001296:	45b1      	cmp	r9, r6
 8001298:	fa00 f40e 	lsl.w	r4, r0, lr
 800129c:	d909      	bls.n	80012b2 <__udivmoddi4+0x1ba>
 800129e:	19f6      	adds	r6, r6, r7
 80012a0:	f101 32ff 	add.w	r2, r1, #4294967295
 80012a4:	f080 808c 	bcs.w	80013c0 <__udivmoddi4+0x2c8>
 80012a8:	45b1      	cmp	r9, r6
 80012aa:	f240 8089 	bls.w	80013c0 <__udivmoddi4+0x2c8>
 80012ae:	3902      	subs	r1, #2
 80012b0:	443e      	add	r6, r7
 80012b2:	eba6 0609 	sub.w	r6, r6, r9
 80012b6:	fbb6 f0fc 	udiv	r0, r6, ip
 80012ba:	fb0c 6210 	mls	r2, ip, r0, r6
 80012be:	fb00 f908 	mul.w	r9, r0, r8
 80012c2:	b29e      	uxth	r6, r3
 80012c4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80012c8:	45b1      	cmp	r9, r6
 80012ca:	d907      	bls.n	80012dc <__udivmoddi4+0x1e4>
 80012cc:	19f6      	adds	r6, r6, r7
 80012ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80012d2:	d271      	bcs.n	80013b8 <__udivmoddi4+0x2c0>
 80012d4:	45b1      	cmp	r9, r6
 80012d6:	d96f      	bls.n	80013b8 <__udivmoddi4+0x2c0>
 80012d8:	3802      	subs	r0, #2
 80012da:	443e      	add	r6, r7
 80012dc:	eba6 0609 	sub.w	r6, r6, r9
 80012e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80012e4:	e78f      	b.n	8001206 <__udivmoddi4+0x10e>
 80012e6:	f1c1 0720 	rsb	r7, r1, #32
 80012ea:	fa22 f807 	lsr.w	r8, r2, r7
 80012ee:	408b      	lsls	r3, r1
 80012f0:	ea48 0303 	orr.w	r3, r8, r3
 80012f4:	fa26 f407 	lsr.w	r4, r6, r7
 80012f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80012fc:	fbb4 f9fe 	udiv	r9, r4, lr
 8001300:	fa1f fc83 	uxth.w	ip, r3
 8001304:	fb0e 4419 	mls	r4, lr, r9, r4
 8001308:	408e      	lsls	r6, r1
 800130a:	fa20 f807 	lsr.w	r8, r0, r7
 800130e:	fb09 fa0c 	mul.w	sl, r9, ip
 8001312:	ea48 0806 	orr.w	r8, r8, r6
 8001316:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800131a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800131e:	45a2      	cmp	sl, r4
 8001320:	fa02 f201 	lsl.w	r2, r2, r1
 8001324:	fa00 f601 	lsl.w	r6, r0, r1
 8001328:	d908      	bls.n	800133c <__udivmoddi4+0x244>
 800132a:	18e4      	adds	r4, r4, r3
 800132c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001330:	d244      	bcs.n	80013bc <__udivmoddi4+0x2c4>
 8001332:	45a2      	cmp	sl, r4
 8001334:	d942      	bls.n	80013bc <__udivmoddi4+0x2c4>
 8001336:	f1a9 0902 	sub.w	r9, r9, #2
 800133a:	441c      	add	r4, r3
 800133c:	eba4 040a 	sub.w	r4, r4, sl
 8001340:	fbb4 f0fe 	udiv	r0, r4, lr
 8001344:	fb0e 4410 	mls	r4, lr, r0, r4
 8001348:	fb00 fc0c 	mul.w	ip, r0, ip
 800134c:	fa1f f888 	uxth.w	r8, r8
 8001350:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001354:	45a4      	cmp	ip, r4
 8001356:	d907      	bls.n	8001368 <__udivmoddi4+0x270>
 8001358:	18e4      	adds	r4, r4, r3
 800135a:	f100 3eff 	add.w	lr, r0, #4294967295
 800135e:	d229      	bcs.n	80013b4 <__udivmoddi4+0x2bc>
 8001360:	45a4      	cmp	ip, r4
 8001362:	d927      	bls.n	80013b4 <__udivmoddi4+0x2bc>
 8001364:	3802      	subs	r0, #2
 8001366:	441c      	add	r4, r3
 8001368:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800136c:	fba0 8902 	umull	r8, r9, r0, r2
 8001370:	eba4 0c0c 	sub.w	ip, r4, ip
 8001374:	45cc      	cmp	ip, r9
 8001376:	46c2      	mov	sl, r8
 8001378:	46ce      	mov	lr, r9
 800137a:	d315      	bcc.n	80013a8 <__udivmoddi4+0x2b0>
 800137c:	d012      	beq.n	80013a4 <__udivmoddi4+0x2ac>
 800137e:	b155      	cbz	r5, 8001396 <__udivmoddi4+0x29e>
 8001380:	ebb6 030a 	subs.w	r3, r6, sl
 8001384:	eb6c 060e 	sbc.w	r6, ip, lr
 8001388:	fa06 f707 	lsl.w	r7, r6, r7
 800138c:	40cb      	lsrs	r3, r1
 800138e:	431f      	orrs	r7, r3
 8001390:	40ce      	lsrs	r6, r1
 8001392:	602f      	str	r7, [r5, #0]
 8001394:	606e      	str	r6, [r5, #4]
 8001396:	2100      	movs	r1, #0
 8001398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139c:	4610      	mov	r0, r2
 800139e:	e6f7      	b.n	8001190 <__udivmoddi4+0x98>
 80013a0:	4689      	mov	r9, r1
 80013a2:	e6de      	b.n	8001162 <__udivmoddi4+0x6a>
 80013a4:	4546      	cmp	r6, r8
 80013a6:	d2ea      	bcs.n	800137e <__udivmoddi4+0x286>
 80013a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80013ac:	eb69 0e03 	sbc.w	lr, r9, r3
 80013b0:	3801      	subs	r0, #1
 80013b2:	e7e4      	b.n	800137e <__udivmoddi4+0x286>
 80013b4:	4670      	mov	r0, lr
 80013b6:	e7d7      	b.n	8001368 <__udivmoddi4+0x270>
 80013b8:	4618      	mov	r0, r3
 80013ba:	e78f      	b.n	80012dc <__udivmoddi4+0x1e4>
 80013bc:	4681      	mov	r9, r0
 80013be:	e7bd      	b.n	800133c <__udivmoddi4+0x244>
 80013c0:	4611      	mov	r1, r2
 80013c2:	e776      	b.n	80012b2 <__udivmoddi4+0x1ba>
 80013c4:	3802      	subs	r0, #2
 80013c6:	443c      	add	r4, r7
 80013c8:	e744      	b.n	8001254 <__udivmoddi4+0x15c>
 80013ca:	4608      	mov	r0, r1
 80013cc:	e706      	b.n	80011dc <__udivmoddi4+0xe4>
 80013ce:	3a02      	subs	r2, #2
 80013d0:	443e      	add	r6, r7
 80013d2:	e72b      	b.n	800122c <__udivmoddi4+0x134>

080013d4 <__aeabi_idiv0>:
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 ffef 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f005 f890 	bl	8006518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f807 	bl	8002436 <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 ffcf 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000014 	.word	0x20000014
 800145c:	20000004 	.word	0x20000004
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000004 	.word	0x20000004
 8001484:	200004b4 	.word	0x200004b4

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	200004b4 	.word	0x200004b4

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff fff0 	bl	8001488 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_Delay+0x40>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffe0 	bl	8001488 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad2      	subs	r2, r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3f7      	bcc.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0be      	b.n	8001680 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f004 fa3a 	bl	8005998 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fad3 	bl	8001ad0 <ADC_ConversionStop_Disable>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 8099 	bne.w	800166e <HAL_ADC_Init+0x18e>
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 8095 	bne.w	800166e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800154c:	f023 0302 	bic.w	r3, r3, #2
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001560:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001568:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4313      	orrs	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001578:	d003      	beq.n	8001582 <HAL_ADC_Init+0xa2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d102      	bne.n	8001588 <HAL_ADC_Init+0xa8>
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	e000      	b.n	800158a <HAL_ADC_Init+0xaa>
 8001588:	2300      	movs	r3, #0
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d119      	bne.n	80015cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	035a      	lsls	r2, r3, #13
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e00b      	b.n	80015cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f043 0220 	orr.w	r2, r3, #32
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	6852      	ldr	r2, [r2, #4]
 80015d6:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_ADC_Init+0x1a8>)
 80015ec:	400b      	ands	r3, r1
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_Init+0x126>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d104      	bne.n	8001610 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	3b01      	subs	r3, #1
 800160c:	051b      	lsls	r3, r3, #20
 800160e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800161a:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	430a      	orrs	r2, r1
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_ADC_Init+0x1ac>)
 800162c:	4013      	ands	r3, r2
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4293      	cmp	r3, r2
 8001632:	d10b      	bne.n	800164c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f023 0303 	bic.w	r3, r3, #3
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800164a:	e018      	b.n	800167e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	f023 0312 	bic.w	r3, r3, #18
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800166c:	e007      	b.n	800167e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	ffe1f7fd 	.word	0xffe1f7fd
 800168c:	ff1f0efe 	.word	0xff1f0efe

08001690 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d140      	bne.n	8001728 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d139      	bne.n	8001728 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016da:	d11d      	bne.n	8001718 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d119      	bne.n	8001718 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	6852      	ldr	r2, [r2, #4]
 80016ee:	f022 0220 	bic.w	r2, r2, #32
 80016f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f87c 	bl	8001816 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f06f 0212 	mvn.w	r2, #18
 8001726:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d14f      	bne.n	80017d6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d148      	bne.n	80017d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d105      	bne.n	800175c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001766:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800176a:	d012      	beq.n	8001792 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001776:	2b00      	cmp	r3, #0
 8001778:	d125      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001784:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001788:	d11d      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800178e:	2b00      	cmp	r3, #0
 8001790:	d119      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	6852      	ldr	r2, [r2, #4]
 800179c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fb9b 	bl	8001f02 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 020c 	mvn.w	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e0:	2b40      	cmp	r3, #64	; 0x40
 80017e2:	d114      	bne.n	800180e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10d      	bne.n	800180e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f812 	bl	8001828 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0201 	mvn.w	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
	...

0800183c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800183c:	b490      	push	{r4, r7}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_ADC_ConfigChannel+0x20>
 8001858:	2302      	movs	r3, #2
 800185a:	e0dc      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x1da>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b06      	cmp	r3, #6
 800186a:	d81c      	bhi.n	80018a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3b05      	subs	r3, #5
 8001882:	221f      	movs	r2, #31
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4018      	ands	r0, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681c      	ldr	r4, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b05      	subs	r3, #5
 800189c:	fa04 f303 	lsl.w	r3, r4, r3
 80018a0:	4303      	orrs	r3, r0
 80018a2:	634b      	str	r3, [r1, #52]	; 0x34
 80018a4:	e03c      	b.n	8001920 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d81c      	bhi.n	80018e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b23      	subs	r3, #35	; 0x23
 80018c4:	221f      	movs	r2, #31
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4018      	ands	r0, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681c      	ldr	r4, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3b23      	subs	r3, #35	; 0x23
 80018de:	fa04 f303 	lsl.w	r3, r4, r3
 80018e2:	4303      	orrs	r3, r0
 80018e4:	630b      	str	r3, [r1, #48]	; 0x30
 80018e6:	e01b      	b.n	8001920 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3b41      	subs	r3, #65	; 0x41
 80018fe:	221f      	movs	r2, #31
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	4018      	ands	r0, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681c      	ldr	r4, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	3b41      	subs	r3, #65	; 0x41
 8001918:	fa04 f303 	lsl.w	r3, r4, r3
 800191c:	4303      	orrs	r3, r0
 800191e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d91c      	bls.n	8001962 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68d8      	ldr	r0, [r3, #12]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	3b1e      	subs	r3, #30
 800193e:	2207      	movs	r2, #7
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	4018      	ands	r0, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689c      	ldr	r4, [r3, #8]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	3b1e      	subs	r3, #30
 8001958:	fa04 f303 	lsl.w	r3, r4, r3
 800195c:	4303      	orrs	r3, r0
 800195e:	60cb      	str	r3, [r1, #12]
 8001960:	e019      	b.n	8001996 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6918      	ldr	r0, [r3, #16]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	2207      	movs	r2, #7
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	4018      	ands	r0, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689c      	ldr	r4, [r3, #8]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	fa04 f303 	lsl.w	r3, r4, r3
 8001992:	4303      	orrs	r3, r0
 8001994:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d003      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019a2:	2b11      	cmp	r3, #17
 80019a4:	d132      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_ADC_ConfigChannel+0x1e4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d125      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d126      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	6892      	ldr	r2, [r2, #8]
 80019c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d11a      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_ADC_ConfigChannel+0x1e8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_ADC_ConfigChannel+0x1ec>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9a      	lsrs	r2, r3, #18
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x1b2>
 80019fa:	e007      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	f043 0220 	orr.w	r2, r3, #32
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc90      	pop	{r4, r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40012400 	.word	0x40012400
 8001a24:	20000014 	.word	0x20000014
 8001a28:	431bde83 	.word	0x431bde83

08001a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d039      	beq.n	8001abe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	6892      	ldr	r2, [r2, #8]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <ADC_Enable+0x9c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <ADC_Enable+0xa0>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a68:	e002      	b.n	8001a70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a76:	f7ff fd07 	bl	8001488 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a7c:	e018      	b.n	8001ab0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a7e:	f7ff fd03 	bl	8001488 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d911      	bls.n	8001ab0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d1df      	bne.n	8001a7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000014 	.word	0x20000014
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d127      	bne.n	8001b3a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	6892      	ldr	r2, [r2, #8]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001afa:	f7ff fcc5 	bl	8001488 <HAL_GetTick>
 8001afe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b00:	e014      	b.n	8001b2c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b02:	f7ff fcc1 	bl	8001488 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d90d      	bls.n	8001b2c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f043 0210 	orr.w	r2, r3, #16
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e007      	b.n	8001b3c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d0e3      	beq.n	8001b02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADCEx_InjectedStart+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e070      	b.n	8001c40 <HAL_ADCEx_InjectedStart+0xfc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff60 	bl	8001a2c <ADC_Enable>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d15f      	bne.n	8001c36 <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2e      	ldr	r2, [pc, #184]	; (8001c48 <HAL_ADCEx_InjectedStart+0x104>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADCEx_InjectedStart+0x5c>
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_ADCEx_InjectedStart+0x108>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d106      	bne.n	8001bae <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
 8001bac:	e005      	b.n	8001bba <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0204 	mvn.w	r2, #4
 8001bdc:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d128      	bne.n	8001c3e <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001bf6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001bfa:	d113      	bne.n	8001c24 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_ADCEx_InjectedStart+0x104>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d105      	bne.n	8001c12 <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_ADCEx_InjectedStart+0x108>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d108      	bne.n	8001c24 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	6892      	ldr	r2, [r2, #8]
 8001c1c:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	e00c      	b.n	8001c3e <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6892      	ldr	r2, [r2, #8]
 8001c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e003      	b.n	8001c3e <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40012800 	.word	0x40012800
 8001c4c:	40012400 	.word	0x40012400

08001c50 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADCEx_InjectedStop+0x1a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e030      	b.n	8001ccc <HAL_ADCEx_InjectedStop+0x7c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d119      	bne.n	8001cb2 <HAL_ADCEx_InjectedStop+0x62>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d112      	bne.n	8001cb2 <HAL_ADCEx_InjectedStop+0x62>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff1f 	bl	8001ad0 <ADC_ConversionStop_Disable>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d112      	bne.n	8001cc2 <HAL_ADCEx_InjectedStop+0x72>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8001cb0:	e007      	b.n	8001cc2 <HAL_ADCEx_InjectedStop+0x72>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	f043 0220 	orr.w	r2, r3, #32
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 8001ce6:	f7ff fbcf 	bl	8001488 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d123      	bne.n	8001d42 <HAL_ADCEx_InjectedPollForConversion+0x6e>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001cfa:	e01a      	b.n	8001d32 <HAL_ADCEx_InjectedPollForConversion+0x5e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d02:	d016      	beq.n	8001d32 <HAL_ADCEx_InjectedPollForConversion+0x5e>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_ADCEx_InjectedPollForConversion+0x46>
 8001d0a:	f7ff fbbd 	bl	8001488 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad2      	subs	r2, r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d90b      	bls.n	8001d32 <HAL_ADCEx_InjectedPollForConversion+0x5e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	f043 0204 	orr.w	r2, r3, #4
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0ad      	b.n	8001e8e <HAL_ADCEx_InjectedPollForConversion+0x1ba>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0dd      	beq.n	8001cfc <HAL_ADCEx_InjectedPollForConversion+0x28>
 8001d40:	e06c      	b.n	8001e1c <HAL_ADCEx_InjectedPollForConversion+0x148>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d42:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <HAL_ADCEx_InjectedPollForConversion+0x1c4>)
 8001d44:	681c      	ldr	r4, [r3, #0]
 8001d46:	2002      	movs	r0, #2
 8001d48:	f002 fbfe 	bl	8004548 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_ADCEx_InjectedPollForConversion+0x1c8>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d118      	bne.n	8001d92 <HAL_ADCEx_InjectedPollForConversion+0xbe>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68d9      	ldr	r1, [r3, #12]
 8001d66:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <HAL_ADCEx_InjectedPollForConversion+0x1cc>)
 8001d68:	400b      	ands	r3, r1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d111      	bne.n	8001d92 <HAL_ADCEx_InjectedPollForConversion+0xbe>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6919      	ldr	r1, [r3, #16]
 8001d74:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_ADCEx_InjectedPollForConversion+0x1d0>)
 8001d76:	400b      	ands	r3, r1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d108      	bne.n	8001d8e <HAL_ADCEx_InjectedPollForConversion+0xba>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68d9      	ldr	r1, [r3, #12]
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_ADCEx_InjectedPollForConversion+0x1d4>)
 8001d84:	400b      	ands	r3, r1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADCEx_InjectedPollForConversion+0xba>
 8001d8a:	2314      	movs	r3, #20
 8001d8c:	e020      	b.n	8001dd0 <HAL_ADCEx_InjectedPollForConversion+0xfc>
 8001d8e:	2329      	movs	r3, #41	; 0x29
 8001d90:	e01e      	b.n	8001dd0 <HAL_ADCEx_InjectedPollForConversion+0xfc>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6919      	ldr	r1, [r3, #16]
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_ADCEx_InjectedPollForConversion+0x1d0>)
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <HAL_ADCEx_InjectedPollForConversion+0xda>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68d9      	ldr	r1, [r3, #12]
 8001da6:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <HAL_ADCEx_InjectedPollForConversion+0x1d4>)
 8001da8:	400b      	ands	r3, r1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <HAL_ADCEx_InjectedPollForConversion+0xf6>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6919      	ldr	r1, [r3, #16]
 8001db4:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 8001db6:	400b      	ands	r3, r1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d108      	bne.n	8001dce <HAL_ADCEx_InjectedPollForConversion+0xfa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADCEx_InjectedPollForConversion+0xfa>
 8001dca:	2354      	movs	r3, #84	; 0x54
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADCEx_InjectedPollForConversion+0xfc>
 8001dce:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001dd0:	fb03 f302 	mul.w	r3, r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dd6:	e01d      	b.n	8001e14 <HAL_ADCEx_InjectedPollForConversion+0x140>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dde:	d016      	beq.n	8001e0e <HAL_ADCEx_InjectedPollForConversion+0x13a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_ADCEx_InjectedPollForConversion+0x122>
 8001de6:	f7ff fb4f 	bl	8001488 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad2      	subs	r2, r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d90b      	bls.n	8001e0e <HAL_ADCEx_InjectedPollForConversion+0x13a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f043 0204 	orr.w	r2, r3, #4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e03f      	b.n	8001e8e <HAL_ADCEx_InjectedPollForConversion+0x1ba>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3301      	adds	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3dd      	bcc.n	8001dd8 <HAL_ADCEx_InjectedPollForConversion+0x104>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 020e 	mvn.w	r2, #14
 8001e24:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001e3c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001e40:	d012      	beq.n	8001e68 <HAL_ADCEx_InjectedPollForConversion+0x194>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11d      	bne.n	8001e8c <HAL_ADCEx_InjectedPollForConversion+0x1b8>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e5e:	d115      	bne.n	8001e8c <HAL_ADCEx_InjectedPollForConversion+0x1b8>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <HAL_ADCEx_InjectedPollForConversion+0x1b8>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADCEx_InjectedPollForConversion+0x1b8>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000014 	.word	0x20000014
 8001e9c:	24924924 	.word	0x24924924
 8001ea0:	00924924 	.word	0x00924924
 8001ea4:	12492492 	.word	0x12492492
 8001ea8:	00492492 	.word	0x00492492
 8001eac:	00249249 	.word	0x00249249

08001eb0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d009      	beq.n	8001ed8 <HAL_ADCEx_InjectedGetValue+0x28>
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d002      	beq.n	8001ece <HAL_ADCEx_InjectedGetValue+0x1e>
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d00a      	beq.n	8001ee2 <HAL_ADCEx_InjectedGetValue+0x32>
 8001ecc:	e00e      	b.n	8001eec <HAL_ADCEx_InjectedGetValue+0x3c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	60fb      	str	r3, [r7, #12]
      break;
 8001ed6:	e00e      	b.n	8001ef6 <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	60fb      	str	r3, [r7, #12]
      break;
 8001ee0:	e009      	b.n	8001ef6 <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	60fb      	str	r3, [r7, #12]
      break;
 8001eea:	e004      	b.n	8001ef6 <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	60fb      	str	r3, [r7, #12]
      break;
 8001ef4:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001f14:	b4b0      	push	{r4, r5, r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e179      	b.n	8002228 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d119      	bne.n	8001f78 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10c      	bne.n	8001f66 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	0d9b      	lsrs	r3, r3, #22
 8001f58:	059b      	lsls	r3, r3, #22
 8001f5a:	6839      	ldr	r1, [r7, #0]
 8001f5c:	6809      	ldr	r1, [r1, #0]
 8001f5e:	03c9      	lsls	r1, r1, #15
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6393      	str	r3, [r2, #56]	; 0x38
 8001f64:	e04e      	b.n	8002004 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e045      	b.n	8002004 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d829      	bhi.n	8001fd8 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	1ad2      	subs	r2, r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	330f      	adds	r3, #15
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001faa:	43db      	mvns	r3, r3
 8001fac:	4018      	ands	r0, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	051c      	lsls	r4, r3, #20
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681d      	ldr	r5, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	330f      	adds	r3, #15
 8001fcc:	fa05 f303 	lsl.w	r3, r5, r3
 8001fd0:	4323      	orrs	r3, r4
 8001fd2:	4303      	orrs	r3, r0
 8001fd4:	638b      	str	r3, [r1, #56]	; 0x38
 8001fd6:	e015      	b.n	8002004 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	330f      	adds	r3, #15
 8001ff4:	221f      	movs	r2, #31
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4003      	ands	r3, r0
 8002002:	638b      	str	r3, [r1, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d00c      	beq.n	800202c <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	69c9      	ldr	r1, [r1, #28]
 8002028:	430b      	orrs	r3, r1
 800202a:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d115      	bne.n	8002060 <HAL_ADCEx_InjectedConfigChannel+0x14c>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800203c:	d108      	bne.n	8002050 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6852      	ldr	r2, [r2, #4]
 8002048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	e007      	b.n	8002060 <HAL_ADCEx_InjectedConfigChannel+0x14c>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d114      	bne.n	8002092 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d108      	bne.n	8002082 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	6852      	ldr	r2, [r2, #4]
 800207a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	e007      	b.n	8002092 <HAL_ADCEx_InjectedConfigChannel+0x17e>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	f043 0220 	orr.w	r2, r3, #32
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b09      	cmp	r3, #9
 8002098:	d91c      	bls.n	80020d4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68d8      	ldr	r0, [r3, #12]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	3b1e      	subs	r3, #30
 80020b0:	2207      	movs	r2, #7
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4018      	ands	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689c      	ldr	r4, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	3b1e      	subs	r3, #30
 80020ca:	fa04 f303 	lsl.w	r3, r4, r3
 80020ce:	4303      	orrs	r3, r0
 80020d0:	60cb      	str	r3, [r1, #12]
 80020d2:	e019      	b.n	8002108 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6918      	ldr	r0, [r3, #16]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4018      	ands	r0, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689c      	ldr	r4, [r3, #8]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	fa04 f303 	lsl.w	r3, r4, r3
 8002104:	4303      	orrs	r3, r0
 8002106:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d003      	beq.n	8002118 <HAL_ADCEx_InjectedConfigChannel+0x204>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002114:	2b11      	cmp	r3, #17
 8002116:	d107      	bne.n	8002128 <HAL_ADCEx_InjectedConfigChannel+0x214>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	6892      	ldr	r2, [r2, #8]
 8002122:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002126:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d011      	beq.n	8002154 <HAL_ADCEx_InjectedConfigChannel+0x240>
 8002130:	2b03      	cmp	r3, #3
 8002132:	d01d      	beq.n	8002170 <HAL_ADCEx_InjectedConfigChannel+0x25c>
 8002134:	2b01      	cmp	r3, #1
 8002136:	d129      	bne.n	800218c <HAL_ADCEx_InjectedConfigChannel+0x278>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002146:	f023 030f 	bic.w	r3, r3, #15
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	68c9      	ldr	r1, [r1, #12]
 800214e:	430b      	orrs	r3, r1
 8002150:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8002152:	e029      	b.n	80021a8 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002162:	f023 030f 	bic.w	r3, r3, #15
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	68c9      	ldr	r1, [r1, #12]
 800216a:	430b      	orrs	r3, r1
 800216c:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800216e:	e01b      	b.n	80021a8 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800217e:	f023 030f 	bic.w	r3, r3, #15
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	68c9      	ldr	r1, [r1, #12]
 8002186:	430b      	orrs	r3, r1
 8002188:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800218a:	e00d      	b.n	80021a8 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800219a:	f023 030f 	bic.w	r3, r3, #15
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	68c9      	ldr	r1, [r1, #12]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80021a6:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d003      	beq.n	80021b8 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d132      	bne.n	800221e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d125      	bne.n	800220e <HAL_ADCEx_InjectedConfigChannel+0x2fa>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d126      	bne.n	800221e <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021de:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d11a      	bne.n	800221e <HAL_ADCEx_InjectedConfigChannel+0x30a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9a      	lsrs	r2, r3, #18
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021fe:	e002      	b.n	8002206 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          {
            wait_loop_index--;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 800220c:	e007      	b.n	800221e <HAL_ADCEx_InjectedConfigChannel+0x30a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bcb0      	pop	{r4, r5, r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40012400 	.word	0x40012400
 8002238:	20000014 	.word	0x20000014
 800223c:	431bde83 	.word	0x431bde83

08002240 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <NVIC_EnableIRQ+0x2c>)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da0b      	bge.n	8002300 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	490d      	ldr	r1, [pc, #52]	; (8002320 <NVIC_SetPriority+0x4c>)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	3b04      	subs	r3, #4
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fe:	e009      	b.n	8002314 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	4908      	ldr	r1, [pc, #32]	; (8002324 <NVIC_SetPriority+0x50>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	e000e100 	.word	0xe000e100

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	2201      	movs	r2, #1
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	401a      	ands	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236e:	2101      	movs	r1, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff92 	bl	80022d4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff33 	bl	8002240 <NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff48 	bl	8002288 <NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff92 	bl	8002328 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff61 	bl	80022d4 <NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff3b 	bl	80022a4 <NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b08b      	sub	sp, #44	; 0x2c
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e127      	b.n	80026c4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002474:	2201      	movs	r2, #1
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8116 	bne.w	80026be <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b12      	cmp	r3, #18
 8002498:	d034      	beq.n	8002504 <HAL_GPIO_Init+0xb4>
 800249a:	2b12      	cmp	r3, #18
 800249c:	d80d      	bhi.n	80024ba <HAL_GPIO_Init+0x6a>
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d02b      	beq.n	80024fa <HAL_GPIO_Init+0xaa>
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d804      	bhi.n	80024b0 <HAL_GPIO_Init+0x60>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d031      	beq.n	800250e <HAL_GPIO_Init+0xbe>
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d01c      	beq.n	80024e8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ae:	e048      	b.n	8002542 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d043      	beq.n	800253c <HAL_GPIO_Init+0xec>
 80024b4:	2b11      	cmp	r3, #17
 80024b6:	d01b      	beq.n	80024f0 <HAL_GPIO_Init+0xa0>
          break;
 80024b8:	e043      	b.n	8002542 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_GPIO_Init+0x288>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d026      	beq.n	800250e <HAL_GPIO_Init+0xbe>
 80024c0:	4a85      	ldr	r2, [pc, #532]	; (80026d8 <HAL_GPIO_Init+0x288>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d806      	bhi.n	80024d4 <HAL_GPIO_Init+0x84>
 80024c6:	4a85      	ldr	r2, [pc, #532]	; (80026dc <HAL_GPIO_Init+0x28c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d020      	beq.n	800250e <HAL_GPIO_Init+0xbe>
 80024cc:	4a84      	ldr	r2, [pc, #528]	; (80026e0 <HAL_GPIO_Init+0x290>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01d      	beq.n	800250e <HAL_GPIO_Init+0xbe>
          break;
 80024d2:	e036      	b.n	8002542 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80024d4:	4a83      	ldr	r2, [pc, #524]	; (80026e4 <HAL_GPIO_Init+0x294>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_GPIO_Init+0xbe>
 80024da:	4a83      	ldr	r2, [pc, #524]	; (80026e8 <HAL_GPIO_Init+0x298>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d016      	beq.n	800250e <HAL_GPIO_Init+0xbe>
 80024e0:	4a82      	ldr	r2, [pc, #520]	; (80026ec <HAL_GPIO_Init+0x29c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0xbe>
          break;
 80024e6:	e02c      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	623b      	str	r3, [r7, #32]
          break;
 80024ee:	e028      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	3304      	adds	r3, #4
 80024f6:	623b      	str	r3, [r7, #32]
          break;
 80024f8:	e023      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	3308      	adds	r3, #8
 8002500:	623b      	str	r3, [r7, #32]
          break;
 8002502:	e01e      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	330c      	adds	r3, #12
 800250a:	623b      	str	r3, [r7, #32]
          break;
 800250c:	e019      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002516:	2304      	movs	r3, #4
 8002518:	623b      	str	r3, [r7, #32]
          break;
 800251a:	e012      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002524:	2308      	movs	r3, #8
 8002526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	611a      	str	r2, [r3, #16]
          break;
 800252e:	e008      	b.n	8002542 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002530:	2308      	movs	r3, #8
 8002532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	615a      	str	r2, [r3, #20]
          break;
 800253a:	e002      	b.n	8002542 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2bff      	cmp	r3, #255	; 0xff
 8002546:	d801      	bhi.n	800254c <HAL_GPIO_Init+0xfc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	e001      	b.n	8002550 <HAL_GPIO_Init+0x100>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2bff      	cmp	r3, #255	; 0xff
 8002556:	d802      	bhi.n	800255e <HAL_GPIO_Init+0x10e>
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	e002      	b.n	8002564 <HAL_GPIO_Init+0x114>
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3b08      	subs	r3, #8
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	210f      	movs	r1, #15
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	401a      	ands	r2, r3
 8002576:	6a39      	ldr	r1, [r7, #32]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	431a      	orrs	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8096 	beq.w	80026be <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002592:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_GPIO_Init+0x2a0>)
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x2a0>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6193      	str	r3, [r2, #24]
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_GPIO_Init+0x2a0>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x2a4>)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4013      	ands	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <HAL_GPIO_Init+0x2a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0x1ae>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_GPIO_Init+0x2ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00d      	beq.n	80025fa <HAL_GPIO_Init+0x1aa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_GPIO_Init+0x2b0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <HAL_GPIO_Init+0x1a6>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_GPIO_Init+0x2b4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_GPIO_Init+0x1a2>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x1b0>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x1b0>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x1b0>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x1b0>
 80025fe:	2300      	movs	r3, #0
 8002600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002610:	4938      	ldr	r1, [pc, #224]	; (80026f4 <HAL_GPIO_Init+0x2a4>)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800262a:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
 8002636:	e006      	b.n	8002646 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002638:	4933      	ldr	r1, [pc, #204]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	43db      	mvns	r3, r3
 8002642:	4013      	ands	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002652:	492d      	ldr	r1, [pc, #180]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
 800265e:	e006      	b.n	800266e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002660:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4013      	ands	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800267a:	4923      	ldr	r1, [pc, #140]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
 8002686:	e006      	b.n	8002696 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002688:	491f      	ldr	r1, [pc, #124]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	43db      	mvns	r3, r3
 8002692:	4013      	ands	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026a2:	4919      	ldr	r1, [pc, #100]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026b0:	4915      	ldr	r1, [pc, #84]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_GPIO_Init+0x2b8>)
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4013      	ands	r3, r2
 80026bc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3301      	adds	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	f67f aed4 	bls.w	8002474 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	372c      	adds	r7, #44	; 0x2c
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	10210000 	.word	0x10210000
 80026dc:	10110000 	.word	0x10110000
 80026e0:	10120000 	.word	0x10120000
 80026e4:	10310000 	.word	0x10310000
 80026e8:	10320000 	.word	0x10320000
 80026ec:	10220000 	.word	0x10220000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000
 80026f8:	40010800 	.word	0x40010800
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	40011000 	.word	0x40011000
 8002704:	40011400 	.word	0x40011400
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0e7      	b.n	8002926 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f003 f9e2 	bl	8005b34 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f001 fde2 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 800278c:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a67      	ldr	r2, [pc, #412]	; (8002930 <HAL_I2C_Init+0x1f4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x6c>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4a66      	ldr	r2, [pc, #408]	; (8002934 <HAL_I2C_Init+0x1f8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x7a>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4a63      	ldr	r2, [pc, #396]	; (8002938 <HAL_I2C_Init+0x1fc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0b3      	b.n	8002926 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_I2C_Init+0x200>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4955      	ldr	r1, [pc, #340]	; (8002930 <HAL_I2C_Init+0x1f4>)
 80027dc:	428b      	cmp	r3, r1
 80027de:	d802      	bhi.n	80027e6 <HAL_I2C_Init+0xaa>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	e009      	b.n	80027fa <HAL_I2C_Init+0xbe>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4953      	ldr	r1, [pc, #332]	; (8002940 <HAL_I2C_Init+0x204>)
 80027f2:	fba1 1303 	umull	r1, r3, r1, r3
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	3301      	adds	r3, #1
 80027fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_I2C_Init+0x1f4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d80d      	bhi.n	8002826 <HAL_I2C_Init+0xea>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf38      	it	cc
 8002822:	2304      	movcc	r3, #4
 8002824:	e04f      	b.n	80028c6 <HAL_I2C_Init+0x18a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d111      	bne.n	8002852 <HAL_I2C_Init+0x116>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1e58      	subs	r0, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e012      	b.n	8002878 <HAL_I2C_Init+0x13c>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1e58      	subs	r0, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	fbb0 f3f3 	udiv	r3, r0, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Init+0x144>
 800287c:	2301      	movs	r3, #1
 800287e:	e022      	b.n	80028c6 <HAL_I2C_Init+0x18a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10e      	bne.n	80028a6 <HAL_I2C_Init+0x16a>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	e00f      	b.n	80028c6 <HAL_I2C_Init+0x18a>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1e58      	subs	r0, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	69d1      	ldr	r1, [r2, #28]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6a12      	ldr	r2, [r2, #32]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6911      	ldr	r1, [r2, #16]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68d2      	ldr	r2, [r2, #12]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6951      	ldr	r1, [r2, #20]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6992      	ldr	r2, [r2, #24]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	000186a0 	.word	0x000186a0
 8002934:	001e847f 	.word	0x001e847f
 8002938:	003d08ff 	.word	0x003d08ff
 800293c:	431bde83 	.word	0x431bde83
 8002940:	10624dd3 	.word	0x10624dd3

08002944 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	4613      	mov	r3, r2
 8002956:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800295c:	f7fe fd94 	bl	8001488 <HAL_GetTick>
 8002960:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	f040 80ee 	bne.w	8002b4c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2319      	movs	r3, #25
 8002976:	2201      	movs	r2, #1
 8002978:	4977      	ldr	r1, [pc, #476]	; (8002b58 <HAL_I2C_Master_Transmit+0x214>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 ff62 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	e0e1      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2C_Master_Transmit+0x54>
 8002994:	2302      	movs	r3, #2
 8002996:	e0da      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d007      	beq.n	80029be <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2221      	movs	r2, #33	; 0x21
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2210      	movs	r2, #16
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	893a      	ldrh	r2, [r7, #8]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a5a      	ldr	r2, [pc, #360]	; (8002b5c <HAL_I2C_Master_Transmit+0x218>)
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fd26 	bl	8003458 <I2C_MasterRequestWrite>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00f      	beq.n	8002a32 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d105      	bne.n	8002a26 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e093      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e08d      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8002a48:	e066      	b.n	8002b18 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 ffb7 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00f      	beq.n	8002a7a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d109      	bne.n	8002a76 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06b      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e069      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	6248      	str	r0, [r1, #36]	; 0x24
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d119      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x1a4>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d015      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c58      	adds	r0, r3, #1
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	6248      	str	r0, [r1, #36]	; 0x24
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	6a39      	ldr	r1, [r7, #32]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 ffa5 	bl	8003a3c <I2C_WaitOnBTFFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00f      	beq.n	8002b18 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d109      	bne.n	8002b14 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e01c      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e01a      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d194      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	00100002 	.word	0x00100002
 8002b5c:	ffff0000 	.word	0xffff0000

08002b60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7e:	f7fe fc83 	bl	8001488 <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	f040 80e7 	bne.w	8002d60 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2319      	movs	r3, #25
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4974      	ldr	r1, [pc, #464]	; (8002d6c <HAL_I2C_Mem_Write+0x20c>)
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fe51 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0da      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Mem_Write+0x5a>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0d3      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d007      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2221      	movs	r2, #33	; 0x21
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_I2C_Mem_Write+0x210>)
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c22:	88f8      	ldrh	r0, [r7, #6]
 8002c24:	893a      	ldrh	r2, [r7, #8]
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4603      	mov	r3, r0
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fc92 	bl	800355c <I2C_RequestMemoryWrite>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d05e      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d105      	bne.n	8002c52 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e087      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e081      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fead 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00f      	beq.n	8002c8e <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d109      	bne.n	8002c8a <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06b      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e069      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c58      	adds	r0, r3, #1
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	6248      	str	r0, [r1, #36]	; 0x24
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d119      	bne.n	8002cfc <HAL_I2C_Mem_Write+0x19c>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c58      	adds	r0, r3, #1
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	6248      	str	r0, [r1, #36]	; 0x24
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	6113      	str	r3, [r2, #16]
        hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ac      	bne.n	8002c5e <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fe97 	bl	8003a3c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00f      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d109      	bne.n	8002d30 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e018      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e016      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00100002 	.word	0x00100002
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d92:	f7fe fb79 	bl	8001488 <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	f040 8222 	bne.w	80031ea <HAL_I2C_Mem_Read+0x476>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2319      	movs	r3, #25
 8002dac:	2201      	movs	r2, #1
 8002dae:	498a      	ldr	r1, [pc, #552]	; (8002fd8 <HAL_I2C_Mem_Read+0x264>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fd47 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e215      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_Mem_Read+0x5a>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e20e      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d007      	beq.n	8002df4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2222      	movs	r2, #34	; 0x22
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a6c      	ldr	r2, [pc, #432]	; (8002fdc <HAL_I2C_Mem_Read+0x268>)
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e36:	88f8      	ldrh	r0, [r7, #6]
 8002e38:	893a      	ldrh	r2, [r7, #8]
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4603      	mov	r3, r0
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fc1a 	bl	8003680 <I2C_RequestMemoryRead>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00f      	beq.n	8002e72 <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d105      	bne.n	8002e66 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1c2      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1bc      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
      }
    }

    if(hi2c->XferSize == 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e190      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>
    }
    else if(hi2c->XferSize == 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d11d      	bne.n	8002ee6 <HAL_I2C_Mem_Read+0x172>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee2:	b662      	cpsie	i
 8002ee4:	e16e      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if(hi2c->XferSize == 2U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d11d      	bne.n	8002f2a <HAL_I2C_Mem_Read+0x1b6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002efe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]
      
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f26:	b662      	cpsie	i
 8002f28:	e14c      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002f50:	e138      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>
    {
      if(hi2c->XferSize <= 3U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	f200 80ef 	bhi.w	800313a <HAL_I2C_Mem_Read+0x3c6>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d127      	bne.n	8002fb4 <HAL_I2C_Mem_Read+0x240>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fda4 	bl	8003ab6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x210>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2C_Mem_Read+0x20c>
            {
              return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e135      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
            }
            else
            {
              return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e133      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	6251      	str	r1, [r2, #36]	; 0x24
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6912      	ldr	r2, [r2, #16]
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb2:	e107      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d14c      	bne.n	8003056 <HAL_I2C_Mem_Read+0x2e2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_I2C_Mem_Read+0x26c>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fc3c 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0x270>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e10a      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
 8002fd6:	bf00      	nop
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000
 8002fe0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	6251      	str	r1, [r2, #36]	; 0x24
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	6912      	ldr	r2, [r2, #16]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003024:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	6251      	str	r1, [r2, #36]	; 0x24
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	6912      	ldr	r2, [r2, #16]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003054:	e0b6      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	2200      	movs	r2, #0
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_I2C_Mem_Read+0x480>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fbef 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Read+0x2fc>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0bd      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003080:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c59      	adds	r1, r3, #1
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	6251      	str	r1, [r2, #36]	; 0x24
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	6912      	ldr	r2, [r2, #16]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	2200      	movs	r2, #0
 80030b8:	494e      	ldr	r1, [pc, #312]	; (80031f4 <HAL_I2C_Mem_Read+0x480>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fbc2 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Mem_Read+0x356>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e090      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	6251      	str	r1, [r2, #36]	; 0x24
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	6912      	ldr	r2, [r2, #16]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003108:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	6251      	str	r1, [r2, #36]	; 0x24
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	6912      	ldr	r2, [r2, #16]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003138:	e044      	b.n	80031c4 <HAL_I2C_Mem_Read+0x450>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fcb9 	bl	8003ab6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_I2C_Mem_Read+0x3e6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b20      	cmp	r3, #32
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Mem_Read+0x3e2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04a      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
          }
          else
          {
            return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e048      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	6251      	str	r1, [r2, #36]	; 0x24
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	6912      	ldr	r2, [r2, #16]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d116      	bne.n	80031c4 <HAL_I2C_Mem_Read+0x450>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	6251      	str	r1, [r2, #36]	; 0x24
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	6912      	ldr	r2, [r2, #16]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f47f aec2 	bne.w	8002f52 <HAL_I2C_Mem_Read+0x1de>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_I2C_Mem_Read+0x478>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	00010004 	.word	0x00010004

080031f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	460b      	mov	r3, r1
 8003206:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	2301      	movs	r3, #1
 800321a:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 800321c:	f7fe f934 	bl	8001488 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	f040 810a 	bne.w	8003444 <HAL_I2C_IsDeviceReady+0x24c>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	4985      	ldr	r1, [pc, #532]	; (8003450 <HAL_I2C_IsDeviceReady+0x258>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb02 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e0fd      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2C_IsDeviceReady+0x60>
 8003254:	2302      	movs	r3, #2
 8003256:	e0f6      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d007      	beq.n	800327e <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2224      	movs	r2, #36	; 0x24
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <HAL_I2C_IsDeviceReady+0x25c>)
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fac0 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0bb      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	897a      	ldrh	r2, [r7, #10]
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032da:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe f8d4 	bl	8001488 <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 800331a:	e02a      	b.n	8003372 <HAL_I2C_IsDeviceReady+0x17a>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_I2C_IsDeviceReady+0x13a>
 8003322:	f7fe f8b1 	bl	8001488 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d903      	bls.n	800333a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	22a0      	movs	r2, #160	; 0xa0
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_I2C_IsDeviceReady+0x18c>
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_I2C_IsDeviceReady+0x18c>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2ba0      	cmp	r3, #160	; 0xa0
 8003382:	d1cb      	bne.n	800331c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d129      	bne.n	80033ee <HAL_I2C_IsDeviceReady+0x1f6>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	4921      	ldr	r1, [pc, #132]	; (8003450 <HAL_I2C_IsDeviceReady+0x258>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fa3a 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_IsDeviceReady+0x1e2>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e035      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e02b      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003406:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2319      	movs	r3, #25
 800340e:	2201      	movs	r2, #1
 8003410:	490f      	ldr	r1, [pc, #60]	; (8003450 <HAL_I2C_IsDeviceReady+0x258>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa16 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_IsDeviceReady+0x22a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e011      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
        }
      }
    }while(I2C_Trials++ < Trials);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	617a      	str	r2, [r7, #20]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4293      	cmp	r3, r2
 800342c:	f4ff af39 	bcc.w	80032a2 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_I2C_IsDeviceReady+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	00100002 	.word	0x00100002
 8003454:	ffff0000 	.word	0xffff0000

08003458 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	460b      	mov	r3, r1
 8003466:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d006      	beq.n	8003482 <I2C_MasterRequestWrite+0x2a>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d003      	beq.n	8003482 <I2C_MasterRequestWrite+0x2a>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003480:	d108      	bne.n	8003494 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e00b      	b.n	80034ac <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	2b12      	cmp	r3, #18
 800349a:	d107      	bne.n	80034ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034aa:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f9c3 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e040      	b.n	800354a <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d0:	d107      	bne.n	80034e2 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	897a      	ldrh	r2, [r7, #10]
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034de:	611a      	str	r2, [r3, #16]
 80034e0:	e021      	b.n	8003526 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	897a      	ldrh	r2, [r7, #10]
 80034e8:	11d2      	asrs	r2, r2, #7
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f002 0206 	and.w	r2, r2, #6
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f062 020f 	orn	r2, r2, #15
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4915      	ldr	r1, [pc, #84]	; (8003554 <I2C_MasterRequestWrite+0xfc>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f9f0 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b04      	cmp	r3, #4
 8003512:	d101      	bne.n	8003518 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e018      	b.n	800354a <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e016      	b.n	800354a <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	897a      	ldrh	r2, [r7, #10]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	490b      	ldr	r1, [pc, #44]	; (8003558 <I2C_MasterRequestWrite+0x100>)
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f9da 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b04      	cmp	r3, #4
 800353e:	d101      	bne.n	8003544 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e002      	b.n	800354a <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e000      	b.n	800354a <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	00010008 	.word	0x00010008
 8003558:	00010002 	.word	0x00010002

0800355c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	460b      	mov	r3, r1
 8003570:	813b      	strh	r3, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	2200      	movs	r2, #0
 800358e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f956 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e068      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	897a      	ldrh	r2, [r7, #10]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	4931      	ldr	r1, [pc, #196]	; (800367c <I2C_RequestMemoryWrite+0x120>)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f995 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <I2C_RequestMemoryWrite+0x76>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d101      	bne.n	80035ce <I2C_RequestMemoryWrite+0x72>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e052      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e050      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	6a39      	ldr	r1, [r7, #32]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9e8 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <I2C_RequestMemoryWrite+0xbc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d109      	bne.n	8003614 <I2C_RequestMemoryWrite+0xb8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e02f      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
    }
    else
    {
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e02d      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <I2C_RequestMemoryWrite+0xce>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	893a      	ldrh	r2, [r7, #8]
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	611a      	str	r2, [r3, #16]
 8003628:	e023      	b.n	8003672 <I2C_RequestMemoryWrite+0x116>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	893a      	ldrh	r2, [r7, #8]
 8003630:	0a12      	lsrs	r2, r2, #8
 8003632:	b292      	uxth	r2, r2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	6a39      	ldr	r1, [r7, #32]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f9c0 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00f      	beq.n	8003668 <I2C_RequestMemoryWrite+0x10c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2b04      	cmp	r3, #4
 800364e:	d109      	bne.n	8003664 <I2C_RequestMemoryWrite+0x108>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e007      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
      }
      else
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e005      	b.n	8003674 <I2C_RequestMemoryWrite+0x118>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	893a      	ldrh	r2, [r7, #8]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	00010002 	.word	0x00010002

08003680 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	817b      	strh	r3, [r7, #10]
 8003692:	460b      	mov	r3, r1
 8003694:	813b      	strh	r3, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8bc 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0af      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	897a      	ldrh	r2, [r7, #10]
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	4955      	ldr	r1, [pc, #340]	; (8003840 <I2C_RequestMemoryRead+0x1c0>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8fb 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <I2C_RequestMemoryRead+0x86>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d101      	bne.n	8003702 <I2C_RequestMemoryRead+0x82>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e099      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e097      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f94e 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00f      	beq.n	800374c <I2C_RequestMemoryRead+0xcc>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d109      	bne.n	8003748 <I2C_RequestMemoryRead+0xc8>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e076      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e074      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d105      	bne.n	800375e <I2C_RequestMemoryRead+0xde>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	893a      	ldrh	r2, [r7, #8]
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	611a      	str	r2, [r3, #16]
 800375c:	e023      	b.n	80037a6 <I2C_RequestMemoryRead+0x126>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	893a      	ldrh	r2, [r7, #8]
 8003764:	0a12      	lsrs	r2, r2, #8
 8003766:	b292      	uxth	r2, r2
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	6a39      	ldr	r1, [r7, #32]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f926 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00f      	beq.n	800379c <I2C_RequestMemoryRead+0x11c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2b04      	cmp	r3, #4
 8003782:	d109      	bne.n	8003798 <I2C_RequestMemoryRead+0x118>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003792:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04e      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
      }
      else
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e04c      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f909 	bl	80039c2 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00f      	beq.n	80037d6 <I2C_RequestMemoryRead+0x156>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d109      	bne.n	80037d2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e031      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e02f      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f826 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_RequestMemoryRead+0x182>
  {
    return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e019      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	897a      	ldrh	r2, [r7, #10]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	490a      	ldr	r1, [pc, #40]	; (8003840 <I2C_RequestMemoryRead+0x1c0>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f864 	bl	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <I2C_RequestMemoryRead+0x1b4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b04      	cmp	r3, #4
 800382a:	d101      	bne.n	8003830 <I2C_RequestMemoryRead+0x1b0>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e002      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
    else
    {
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e000      	b.n	8003836 <I2C_RequestMemoryRead+0x1b6>
    }
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	00010002 	.word	0x00010002

08003844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003854:	e01f      	b.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d01b      	beq.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003864:	f7fd fe10 	bl	8001488 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d910      	bls.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e023      	b.n	80038de <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10d      	bne.n	80038bc <I2C_WaitOnFlagUntilTimeout+0x78>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	e00c      	b.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x92>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d0bc      	beq.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038f4:	e040      	b.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d11c      	bne.n	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003914:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800391e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2204      	movs	r2, #4
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e03c      	b.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d017      	beq.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800394e:	f7fd fd9b 	bl	8001488 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d90c      	bls.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e020      	b.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	0c1b      	lsrs	r3, r3, #16
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10c      	bne.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	43da      	mvns	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e00b      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bf14      	ite	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	2300      	moveq	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d19e      	bne.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ce:	e029      	b.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f8ba 	bl	8003b4a <I2C_IsAcknowledgeFailed>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e029      	b.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d01d      	beq.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ee:	f7fd fd4b 	bl	8001488 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d912      	bls.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e007      	b.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d1ce      	bne.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a48:	e029      	b.n	8003a9e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f87d 	bl	8003b4a <I2C_IsAcknowledgeFailed>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e029      	b.n	8003aae <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d01d      	beq.n	8003a9e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a68:	f7fd fd0e 	bl	8001488 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	1ad2      	subs	r2, r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d912      	bls.n	8003a9e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e007      	b.n	8003aae <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d1ce      	bne.n	8003a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac2:	e036      	b.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d114      	bne.n	8003afc <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0210 	mvn.w	r2, #16
 8003ada:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e022      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8003b02:	f7fd fcc1 	bl	8001488 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d90f      	bls.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e007      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d1c1      	bne.n	8003ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	d114      	bne.n	8003b8c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8087 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bb2:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bbe:	4b8f      	ldr	r3, [pc, #572]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x58>
 8003bca:	4b8c      	ldr	r3, [pc, #560]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b88      	ldr	r3, [pc, #544]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d06c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x126>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d168      	bne.n	8003cbe <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e22d      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x70>
 8003bfa:	4a80      	ldr	r2, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003bfc:	4b7f      	ldr	r3, [pc, #508]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e02e      	b.n	8003c66 <HAL_RCC_OscConfig+0xce>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x92>
 8003c10:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c12:	4b7a      	ldr	r3, [pc, #488]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c1e:	4b77      	ldr	r3, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e01d      	b.n	8003c66 <HAL_RCC_OscConfig+0xce>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c32:	d10c      	bne.n	8003c4e <HAL_RCC_OscConfig+0xb6>
 8003c34:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c36:	4b71      	ldr	r3, [pc, #452]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4a6e      	ldr	r2, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c42:	4b6e      	ldr	r3, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e00b      	b.n	8003c66 <HAL_RCC_OscConfig+0xce>
 8003c4e:	4a6b      	ldr	r2, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c50:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4a68      	ldr	r2, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c5c:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fc0b 	bl	8001488 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c76:	f7fd fc07 	bl	8001488 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1e1      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c88:	4b5c      	ldr	r3, [pc, #368]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0xde>
 8003c94:	e014      	b.n	8003cc0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fd fbf7 	bl	8001488 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9e:	f7fd fbf3 	bl	8001488 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	; 0x64
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1cd      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb0:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x106>
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d063      	beq.n	8003d94 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cd8:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d11c      	bne.n	8003d1e <HAL_RCC_OscConfig+0x186>
 8003ce4:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_OscConfig+0x170>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e1a1      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	493c      	ldr	r1, [pc, #240]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1c:	e03a      	b.n	8003d94 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d020      	beq.n	8003d68 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_RCC_OscConfig+0x268>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fbac 	bl	8001488 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fd fba8 	bl	8001488 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e182      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d52:	492a      	ldr	r1, [pc, #168]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003d54:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
 8003d66:	e015      	b.n	8003d94 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_RCC_OscConfig+0x268>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fb8b 	bl	8001488 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd fb87 	bl	8001488 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e161      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d039      	beq.n	8003e14 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da8:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fd fb6b 	bl	8001488 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fd fb67 	bl	8001488 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e141      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_RCC_OscConfig+0x264>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f000 fae3 	bl	80043a0 <RCC_Delay>
 8003dda:	e01b      	b.n	8003e14 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fd fb51 	bl	8001488 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	e00e      	b.n	8003e08 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dea:	f7fd fb4d 	bl	8001488 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d907      	bls.n	8003e08 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e127      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	42420000 	.word	0x42420000
 8003e04:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	4b92      	ldr	r3, [pc, #584]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ea      	bne.n	8003dea <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a6 	beq.w	8003f6e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e26:	4b8b      	ldr	r3, [pc, #556]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4a88      	ldr	r2, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e34:	4b87      	ldr	r3, [pc, #540]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]
 8003e3e:	4b85      	ldr	r3, [pc, #532]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b82      	ldr	r3, [pc, #520]	; (8004058 <HAL_RCC_OscConfig+0x4c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x4c0>)
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	; (8004058 <HAL_RCC_OscConfig+0x4c0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fd fb0f 	bl	8001488 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fd fb0b 	bl	8001488 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0e5      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b75      	ldr	r3, [pc, #468]	; (8004058 <HAL_RCC_OscConfig+0x4c0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x30a>
 8003e94:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e96:	4b6f      	ldr	r3, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6213      	str	r3, [r2, #32]
 8003ea0:	e02d      	b.n	8003efe <HAL_RCC_OscConfig+0x366>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x32c>
 8003eaa:	4a6a      	ldr	r2, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003eac:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6213      	str	r3, [r2, #32]
 8003eb6:	4a67      	ldr	r2, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003eb8:	4b66      	ldr	r3, [pc, #408]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	e01c      	b.n	8003efe <HAL_RCC_OscConfig+0x366>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x34e>
 8003ecc:	4a61      	ldr	r2, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003ece:	4b61      	ldr	r3, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	6213      	str	r3, [r2, #32]
 8003ed8:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003eda:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	e00b      	b.n	8003efe <HAL_RCC_OscConfig+0x366>
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003ee8:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6213      	str	r3, [r2, #32]
 8003ef2:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003ef4:	4b57      	ldr	r3, [pc, #348]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fd fabf 	bl	8001488 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fd fabb 	bl	8001488 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e093      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003f30:	e014      	b.n	8003f5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fd faa9 	bl	8001488 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fd faa5 	bl	8001488 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e07d      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003f64:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d069      	beq.n	800404a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f76:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d061      	beq.n	8004046 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d146      	bne.n	8004018 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fd fa7a 	bl	8001488 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd fa76 	bl	8001488 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e050      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003faa:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d108      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fc0:	4924      	ldr	r1, [pc, #144]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd2:	4820      	ldr	r0, [pc, #128]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a19      	ldr	r1, [r3, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fea:	4b1c      	ldr	r3, [pc, #112]	; (800405c <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fa4a 	bl	8001488 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd fa46 	bl	8001488 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e020      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x460>
 8004016:	e018      	b.n	800404a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCC_OscConfig+0x4c4>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fd fa33 	bl	8001488 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fd fa2f 	bl	8001488 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_RCC_OscConfig+0x4bc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x48e>
 8004044:	e001      	b.n	800404a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
 800405c:	42420060 	.word	0x42420060

08004060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800406e:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d210      	bcs.n	800409e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407c:	497a      	ldr	r1, [pc, #488]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 800407e:	4b7a      	ldr	r3, [pc, #488]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800408c:	4b76      	ldr	r3, [pc, #472]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0207 	and.w	r2, r3, #7
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d001      	beq.n	800409e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0e0      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d020      	beq.n	80040ec <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b6:	4a6d      	ldr	r2, [pc, #436]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80040b8:	4b6c      	ldr	r3, [pc, #432]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040c0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ce:	4a67      	ldr	r2, [pc, #412]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80040d0:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040d8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040da:	4964      	ldr	r1, [pc, #400]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80040dc:	4b63      	ldr	r3, [pc, #396]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d06a      	beq.n	80041ce <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004100:	4b5a      	ldr	r3, [pc, #360]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d115      	bne.n	8004138 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0a7      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d107      	bne.n	8004128 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004118:	4b54      	ldr	r3, [pc, #336]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e09b      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004128:	4b50      	ldr	r3, [pc, #320]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e093      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004138:	494c      	ldr	r1, [pc, #304]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800413a:	4b4c      	ldr	r3, [pc, #304]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414a:	f7fd f99d 	bl	8001488 <HAL_GetTick>
 800414e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d112      	bne.n	800417e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415a:	f7fd f995 	bl	8001488 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e077      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b04      	cmp	r3, #4
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_ClockConfig+0xfa>
 800417c:	e027      	b.n	80041ce <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d11d      	bne.n	80041c2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fd f97e 	bl	8001488 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e060      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419e:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d1ee      	bne.n	8004188 <HAL_RCC_ClockConfig+0x128>
 80041aa:	e010      	b.n	80041ce <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ac:	f7fd f96c 	bl	8001488 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04e      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c2:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1ee      	bne.n	80041ac <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0207 	and.w	r2, r3, #7
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d910      	bls.n	80041fe <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041dc:	4922      	ldr	r1, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 0207 	bic.w	r2, r3, #7
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <HAL_RCC_ClockConfig+0x208>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0207 	and.w	r2, r3, #7
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e030      	b.n	8004260 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420a:	4918      	ldr	r1, [pc, #96]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004228:	4910      	ldr	r1, [pc, #64]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800423c:	f000 f81c 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004240:	4601      	mov	r1, r0
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x20c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_RCC_ClockConfig+0x210>)
 800424e:	5cd3      	ldrb	r3, [r2, r3]
 8004250:	fa21 f303 	lsr.w	r3, r1, r3
 8004254:	4a07      	ldr	r2, [pc, #28]	; (8004274 <HAL_RCC_ClockConfig+0x214>)
 8004256:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004258:	2000      	movs	r0, #0
 800425a:	f7fd f8d3 	bl	8001404 <HAL_InitTick>
  
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40022000 	.word	0x40022000
 800426c:	40021000 	.word	0x40021000
 8004270:	080095c8 	.word	0x080095c8
 8004274:	20000014 	.word	0x20000014

08004278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b490      	push	{r4, r7}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004280:	1d3c      	adds	r4, r7, #4
 8004282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_GetSysClockFreq+0xb4>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x40>
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x46>
 80042b6:	e02d      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042ba:	623b      	str	r3, [r7, #32]
      break;
 80042bc:	e02d      	b.n	800431a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	0c9b      	lsrs	r3, r3, #18
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042ca:	4413      	add	r3, r2
 80042cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c5b      	lsrs	r3, r3, #17
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042ea:	4413      	add	r3, r2
 80042ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042f0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042f6:	fb02 f203 	mul.w	r2, r2, r3
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	e004      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4a0c      	ldr	r2, [pc, #48]	; (8004338 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	623b      	str	r3, [r7, #32]
      break;
 8004312:	e002      	b.n	800431a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004316:	623b      	str	r3, [r7, #32]
      break;
 8004318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431a:	6a3b      	ldr	r3, [r7, #32]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bc90      	pop	{r4, r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	08008b48 	.word	0x08008b48
 800432c:	08008b58 	.word	0x08008b58
 8004330:	40021000 	.word	0x40021000
 8004334:	007a1200 	.word	0x007a1200
 8004338:	003d0900 	.word	0x003d0900

0800433c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004340:	4b02      	ldr	r3, [pc, #8]	; (800434c <HAL_RCC_GetHCLKFreq+0x10>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	20000014 	.word	0x20000014

08004350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004354:	f7ff fff2 	bl	800433c <HAL_RCC_GetHCLKFreq>
 8004358:	4601      	mov	r1, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4a03      	ldr	r2, [pc, #12]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	080095d8 	.word	0x080095d8

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800437c:	f7ff ffde 	bl	800433c <HAL_RCC_GetHCLKFreq>
 8004380:	4601      	mov	r1, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0adb      	lsrs	r3, r3, #11
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4a03      	ldr	r2, [pc, #12]	; (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 800438e:	5cd3      	ldrb	r3, [r2, r3]
 8004390:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	080095d8 	.word	0x080095d8

080043a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <RCC_Delay+0x34>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <RCC_Delay+0x38>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a5b      	lsrs	r3, r3, #9
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80043bc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	60fa      	str	r2, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f9      	bne.n	80043bc <RCC_Delay+0x1c>
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000014 	.word	0x20000014
 80043d8:	10624dd3 	.word	0x10624dd3

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d07d      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fc:	4b4f      	ldr	r3, [pc, #316]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10d      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004408:	4a4c      	ldr	r2, [pc, #304]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	4b4c      	ldr	r3, [pc, #304]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004412:	61d3      	str	r3, [r2, #28]
 8004414:	4b49      	ldr	r3, [pc, #292]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004420:	2301      	movs	r3, #1
 8004422:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d118      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004430:	4a43      	ldr	r2, [pc, #268]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004432:	4b43      	ldr	r3, [pc, #268]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443c:	f7fd f824 	bl	8001488 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	e008      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004444:	f7fd f820 	bl	8001488 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e06d      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02e      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d027      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004480:	4b2e      	ldr	r3, [pc, #184]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004488:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d014      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fc ffef 	bl	8001488 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fc ffeb 	bl	8001488 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e036      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ee      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80044d0:	491a      	ldr	r1, [pc, #104]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4313      	orrs	r3, r2
 80044e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004500:	490e      	ldr	r1, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800451e:	4907      	ldr	r1, [pc, #28]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	40007000 	.word	0x40007000
 8004544:	42420440 	.word	0x42420440

08004548 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b08d      	sub	sp, #52	; 0x34
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004550:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004552:	f107 040c 	add.w	r4, r7, #12
 8004556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800455c:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	2300      	movs	r3, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f000 8084 	beq.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800457e:	2b10      	cmp	r3, #16
 8004580:	d002      	beq.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8004582:	2b01      	cmp	r3, #1
 8004584:	d049      	beq.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8004586:	e08d      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8004588:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800458e:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8083 	beq.w	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	0c9b      	lsrs	r3, r3, #18
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045a8:	4413      	add	r3, r2
 80045aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ba:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	0c5b      	lsrs	r3, r3, #17
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045c8:	4413      	add	r3, r2
 80045ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	4a34      	ldr	r2, [pc, #208]	; (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045f6:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004602:	d102      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004608:	e04b      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004618:	e043      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d108      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 8004636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
 800463c:	e022      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004648:	d109      	bne.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 8004656:	f649 4340 	movw	r3, #40000	; 0x9c40
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
 800465c:	e012      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8004676:	f24f 4324 	movw	r3, #62500	; 0xf424
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
 800467c:	e002      	b.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004682:	e00f      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004684:	e00e      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004686:	f7ff fe77 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 800468a:	4602      	mov	r2, r0
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0b9b      	lsrs	r3, r3, #14
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 80046a2:	bf00      	nop
    }
  }
  return(frequency);
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3734      	adds	r7, #52	; 0x34
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}
 80046ae:	bf00      	nop
 80046b0:	08008b5c 	.word	0x08008b5c
 80046b4:	08008b6c 	.word	0x08008b6c
 80046b8:	40021000 	.word	0x40021000
 80046bc:	007a1200 	.word	0x007a1200
 80046c0:	003d0900 	.word	0x003d0900
 80046c4:	aaaaaaab 	.word	0xaaaaaaab

080046c8 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e01d      	b.n	8004716 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f002 f810 	bl	8006714 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f000 fa34 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	68d2      	ldr	r2, [r2, #12]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr

08004752 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d122      	bne.n	80047ae <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d11b      	bne.n	80047ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f06f 0202 	mvn.w	r2, #2
 800477e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9d1 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 800479a:	e005      	b.n	80047a8 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f9c4 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f9d3 	bl	8004b4e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d122      	bne.n	8004802 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d11b      	bne.n	8004802 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f06f 0204 	mvn.w	r2, #4
 80047d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9a7 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 80047ee:	e005      	b.n	80047fc <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f99a 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9a9 	bl	8004b4e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d122      	bne.n	8004856 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11b      	bne.n	8004856 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f06f 0208 	mvn.w	r2, #8
 8004826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2204      	movs	r2, #4
 800482c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f97d 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 8004842:	e005      	b.n	8004850 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f970 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f97f 	bl	8004b4e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b10      	cmp	r3, #16
 8004862:	d122      	bne.n	80048aa <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b10      	cmp	r3, #16
 8004870:	d11b      	bne.n	80048aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0210 	mvn.w	r2, #16
 800487a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2208      	movs	r2, #8
 8004880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f953 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 8004896:	e005      	b.n	80048a4 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f946 	bl	8004b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f955 	bl	8004b4e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0201 	mvn.w	r2, #1
 80048ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f921 	bl	8004b18 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	2b80      	cmp	r3, #128	; 0x80
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa91 	bl	8004e24 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004926:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f919 	bl	8004b60 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b20      	cmp	r3, #32
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0220 	mvn.w	r2, #32
 8004952:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa5c 	bl	8004e12 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_TIM_ConfigClockSource+0x1c>
 800497a:	2302      	movs	r3, #2
 800497c:	e0c8      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x1ae>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800499c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d077      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x144>
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d80e      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x76>
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	f000 808a 	beq.w	8004ad4 <HAL_TIM_ConfigClockSource+0x172>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d802      	bhi.n	80049ca <HAL_TIM_ConfigClockSource+0x68>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d07e      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80049c8:	e099      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	f000 8089 	beq.w	8004ae2 <HAL_TIM_ConfigClockSource+0x180>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	f000 808d 	beq.w	8004af0 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80049d6:	e092      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80049d8:	2b70      	cmp	r3, #112	; 0x70
 80049da:	d016      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0xa8>
 80049dc:	2b70      	cmp	r3, #112	; 0x70
 80049de:	d804      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x88>
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d040      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x104>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d04e      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80049e8:	e089      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ee:	d003      	beq.n	80049f8 <HAL_TIM_ConfigClockSource+0x96>
 80049f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f4:	d024      	beq.n	8004a40 <HAL_TIM_ConfigClockSource+0xde>
    break;
 80049f6:	e082      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	f022 0207 	bic.w	r2, r2, #7
 8004a06:	609a      	str	r2, [r3, #8]
    break;
 8004a08:	e079      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f000 f995 	bl	8004d48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
    break;
 8004a3e:	e05e      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f000 f97a 	bl	8004d48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a62:	609a      	str	r2, [r3, #8]
    break;
 8004a64:	e04b      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 f8e4 	bl	8004c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2150      	movs	r1, #80	; 0x50
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f943 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004a84:	e03b      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f000 f906 	bl	8004ca4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2160      	movs	r1, #96	; 0x60
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f933 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004aa4:	e02b      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6859      	ldr	r1, [r3, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f000 f8c4 	bl	8004c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f923 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004ac4:	e01b      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f91c 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004ad2:	e014      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2110      	movs	r1, #16
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f915 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004ae0:	e00d      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2120      	movs	r1, #32
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f90e 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004aee:	e006      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2130      	movs	r1, #48	; 0x30
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f907 	bl	8004d0a <TIM_ITRx_SetConfig>
    break;
 8004afc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
	...

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2a      	ldr	r2, [pc, #168]	; (8004c34 <TIM_Base_SetConfig+0xc0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x34>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x34>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a27      	ldr	r2, [pc, #156]	; (8004c38 <TIM_Base_SetConfig+0xc4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x34>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a26      	ldr	r2, [pc, #152]	; (8004c3c <TIM_Base_SetConfig+0xc8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <TIM_Base_SetConfig+0xc0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_Base_SetConfig+0x66>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d007      	beq.n	8004bda <TIM_Base_SetConfig+0x66>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <TIM_Base_SetConfig+0xc4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0x66>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <TIM_Base_SetConfig+0xc8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <TIM_Base_SetConfig+0xc0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d103      	bne.n	8004c24 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	615a      	str	r2, [r3, #20]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800

08004c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 030a 	bic.w	r3, r3, #10
 8004c84:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0210 	bic.w	r2, r3, #16
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	031b      	lsls	r3, r3, #12
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	f043 0307 	orr.w	r3, r3, #7
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e032      	b.n	8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	6852      	ldr	r2, [r2, #4]
 8004dbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dc0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6851      	ldr	r1, [r2, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	6891      	ldr	r1, [r2, #8]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	6852      	ldr	r2, [r2, #4]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
	...

08004e38 <BME280_ReadReg>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;

uint8_t BME280_ReadReg(uint8_t Reg)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af04      	add	r7, sp, #16
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
  uint8_t res = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, adress, Reg, I2C_MEMADD_SIZE_8BIT, &res, 1, 0x10000);
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	2301      	movs	r3, #1
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	f107 030f 	add.w	r3, r7, #15
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	21ec      	movs	r1, #236	; 0xec
 8004e5e:	4806      	ldr	r0, [pc, #24]	; (8004e78 <BME280_ReadReg+0x40>)
 8004e60:	f7fd ff88 	bl	8002d74 <HAL_I2C_Mem_Read>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <BME280_ReadReg+0x44>)
 8004e6a:	701a      	strb	r2, [r3, #0]
  return res;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	2000051c 	.word	0x2000051c
 8004e7c:	20000630 	.word	0x20000630

08004e80 <I2Cx_ReadData16>:

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af04      	add	r7, sp, #16
 8004e86:	4603      	mov	r3, r0
 8004e88:	603a      	str	r2, [r7, #0]
 8004e8a:	80fb      	strh	r3, [r7, #6]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8004e90:	797b      	ldrb	r3, [r7, #5]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	88f9      	ldrh	r1, [r7, #6]
 8004e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	4805      	ldr	r0, [pc, #20]	; (8004ebc <I2Cx_ReadData16+0x3c>)
 8004ea8:	f7fd ff64 	bl	8002d74 <HAL_I2C_Mem_Read>
 8004eac:	4603      	mov	r3, r0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <I2Cx_ReadData16+0x40>)
 8004eb2:	701a      	strb	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	2000051c 	.word	0x2000051c
 8004ec0:	20000630 	.word	0x20000630

08004ec4 <I2Cx_ReadData24>:

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af04      	add	r7, sp, #16
 8004eca:	4603      	mov	r3, r0
 8004ecc:	603a      	str	r2, [r7, #0]
 8004ece:	80fb      	strh	r3, [r7, #6]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8004ed4:	797b      	ldrb	r3, [r7, #5]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	88f9      	ldrh	r1, [r7, #6]
 8004eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ede:	9302      	str	r3, [sp, #8]
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4805      	ldr	r0, [pc, #20]	; (8004f00 <I2Cx_ReadData24+0x3c>)
 8004eec:	f7fd ff42 	bl	8002d74 <HAL_I2C_Mem_Read>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <I2Cx_ReadData24+0x40>)
 8004ef6:	701a      	strb	r2, [r3, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	2000051c 	.word	0x2000051c
 8004f04:	20000630 	.word	0x20000630

08004f08 <BME280_ReadStatus>:

uint8_t BME280_ReadStatus(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af04      	add	r7, sp, #16
 uint8_t res;
 status = HAL_I2C_Mem_Read(&hi2c1, adress, BME280_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, &res, 0x01, 0x10000);
 8004f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	2301      	movs	r3, #1
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	22f3      	movs	r2, #243	; 0xf3
 8004f20:	21ec      	movs	r1, #236	; 0xec
 8004f22:	4809      	ldr	r0, [pc, #36]	; (8004f48 <BME280_ReadStatus+0x40>)
 8004f24:	f7fd ff26 	bl	8002d74 <HAL_I2C_Mem_Read>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <BME280_ReadStatus+0x44>)
 8004f2e:	701a      	strb	r2, [r3, #0]

 if(res & 0x09)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	f003 0309 	and.w	r3, r3, #9
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <BME280_ReadStatus+0x36>
  return 1;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <BME280_ReadStatus+0x38>

return 0;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	2000051c 	.word	0x2000051c
 8004f4c:	20000630 	.word	0x20000630

08004f50 <BME280_ReadReg_U16>:

void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	6039      	str	r1, [r7, #0]
 8004f5a:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(adress,Reg,Value);
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	20ec      	movs	r0, #236	; 0xec
 8004f64:	f7ff ff8c 	bl	8004e80 <I2Cx_ReadData16>
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <BME280_ReadReg_S16>:

void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(adress,Reg, (uint16_t*) Value);
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	4619      	mov	r1, r3
 8004f82:	20ec      	movs	r0, #236	; 0xec
 8004f84:	f7ff ff7c 	bl	8004e80 <I2Cx_ReadData16>
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <BME280_ReadReg_BE_S16>:

void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	6039      	str	r1, [r7, #0]
 8004f9a:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(adress,Reg,(uint16_t*)Value);
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	20ec      	movs	r0, #236	; 0xec
 8004fa4:	f7ff ff6c 	bl	8004e80 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	b21a      	sxth	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	801a      	strh	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(adress, Reg, Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}

void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(adress,Reg,Value);
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	20ec      	movs	r0, #236	; 0xec
 8004fe0:	f7ff ff70 	bl	8004ec4 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005000:	4313      	orrs	r3, r2
 8005002:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <BME280_ReadCoefficients>:

void BME280_ReadCoefficients(void)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b087      	sub	sp, #28
 8005018:	af04      	add	r7, sp, #16
	 uint8_t val;
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 800501a:	4945      	ldr	r1, [pc, #276]	; (8005130 <BME280_ReadCoefficients+0x11c>)
 800501c:	2088      	movs	r0, #136	; 0x88
 800501e:	f7ff ff97 	bl	8004f50 <BME280_ReadReg_U16>
  //sprintf(str1, "DIG_T1: %urn", CalibData.dig_T1);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8005022:	4944      	ldr	r1, [pc, #272]	; (8005134 <BME280_ReadCoefficients+0x120>)
 8005024:	208a      	movs	r0, #138	; 0x8a
 8005026:	f7ff ffa3 	bl	8004f70 <BME280_ReadReg_S16>
 // sprintf(str1, "DIG_T2: %d", CalibData.dig_T2);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 800502a:	4943      	ldr	r1, [pc, #268]	; (8005138 <BME280_ReadCoefficients+0x124>)
 800502c:	208c      	movs	r0, #140	; 0x8c
 800502e:	f7ff ff9f 	bl	8004f70 <BME280_ReadReg_S16>
 // sprintf(str1, "DIG_T3: %d", CalibData.dig_T3);
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8005032:	4942      	ldr	r1, [pc, #264]	; (800513c <BME280_ReadCoefficients+0x128>)
 8005034:	208e      	movs	r0, #142	; 0x8e
 8005036:	f7ff ff8b 	bl	8004f50 <BME280_ReadReg_U16>
  //sprintf(str1, "DIG_P1: %urn", CalibData.dig_P1);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 800503a:	4941      	ldr	r1, [pc, #260]	; (8005140 <BME280_ReadCoefficients+0x12c>)
 800503c:	2090      	movs	r0, #144	; 0x90
 800503e:	f7ff ff97 	bl	8004f70 <BME280_ReadReg_S16>
  //sprintf(str1, "DIG_P2: %d", CalibData.dig_P2);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8005042:	4940      	ldr	r1, [pc, #256]	; (8005144 <BME280_ReadCoefficients+0x130>)
 8005044:	2092      	movs	r0, #146	; 0x92
 8005046:	f7ff ff93 	bl	8004f70 <BME280_ReadReg_S16>
 // sprintf(str1, "DIG_P3: %d", CalibData.dig_P3);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 800504a:	493f      	ldr	r1, [pc, #252]	; (8005148 <BME280_ReadCoefficients+0x134>)
 800504c:	2094      	movs	r0, #148	; 0x94
 800504e:	f7ff ff8f 	bl	8004f70 <BME280_ReadReg_S16>
  //sprintf(str1, "DIG_P4: %d", CalibData.dig_P4);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8005052:	493e      	ldr	r1, [pc, #248]	; (800514c <BME280_ReadCoefficients+0x138>)
 8005054:	2096      	movs	r0, #150	; 0x96
 8005056:	f7ff ff8b 	bl	8004f70 <BME280_ReadReg_S16>
  //sprintf(str1, "DIG_P5: %d", CalibData.dig_P5);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 800505a:	493d      	ldr	r1, [pc, #244]	; (8005150 <BME280_ReadCoefficients+0x13c>)
 800505c:	2098      	movs	r0, #152	; 0x98
 800505e:	f7ff ff87 	bl	8004f70 <BME280_ReadReg_S16>
 // sprintf(str1, "DIG_P6: %d", CalibData.dig_P6);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8005062:	493c      	ldr	r1, [pc, #240]	; (8005154 <BME280_ReadCoefficients+0x140>)
 8005064:	209a      	movs	r0, #154	; 0x9a
 8005066:	f7ff ff83 	bl	8004f70 <BME280_ReadReg_S16>
  //sprintf(str1, "DIG_P7: %d", CalibData.dig_P7);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 800506a:	493b      	ldr	r1, [pc, #236]	; (8005158 <BME280_ReadCoefficients+0x144>)
 800506c:	209c      	movs	r0, #156	; 0x9c
 800506e:	f7ff ff7f 	bl	8004f70 <BME280_ReadReg_S16>
  //sprintf(str1, "DIG_P8: %d", CalibData.dig_P8);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8005072:	493a      	ldr	r1, [pc, #232]	; (800515c <BME280_ReadCoefficients+0x148>)
 8005074:	209e      	movs	r0, #158	; 0x9e
 8005076:	f7ff ff7b 	bl	8004f70 <BME280_ReadReg_S16>
  //sprintf(str1, "DIG_P9: %d", CalibData.dig_P9);
  status = HAL_I2C_Mem_Read(&hi2c1, adress, BME280_REGISTER_DIG_H1, I2C_MEMADD_SIZE_8BIT, &val, 0x01, 0x10000);
 800507a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800507e:	9302      	str	r3, [sp, #8]
 8005080:	2301      	movs	r3, #1
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	1dfb      	adds	r3, r7, #7
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2301      	movs	r3, #1
 800508a:	22a1      	movs	r2, #161	; 0xa1
 800508c:	21ec      	movs	r1, #236	; 0xec
 800508e:	4834      	ldr	r0, [pc, #208]	; (8005160 <BME280_ReadCoefficients+0x14c>)
 8005090:	f7fd fe70 	bl	8002d74 <HAL_I2C_Mem_Read>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <BME280_ReadCoefficients+0x150>)
 800509a:	701a      	strb	r2, [r3, #0]
  CalibData.dig_H1 = val;
 800509c:	79fa      	ldrb	r2, [r7, #7]
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <BME280_ReadCoefficients+0x11c>)
 80050a0:	761a      	strb	r2, [r3, #24]
 // sprintf(str1, "DIG_H1: %d", CalibData.dig_H1);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 80050a2:	4931      	ldr	r1, [pc, #196]	; (8005168 <BME280_ReadCoefficients+0x154>)
 80050a4:	20e1      	movs	r0, #225	; 0xe1
 80050a6:	f7ff ff63 	bl	8004f70 <BME280_ReadReg_S16>
 // sprintf(str1, "DIG_H2: %d", CalibData.dig_H2);
  status = HAL_I2C_Mem_Read(&hi2c1, adress, BME280_REGISTER_DIG_H3, I2C_MEMADD_SIZE_8BIT, &val, 0x01, 0x10000);
 80050aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ae:	9302      	str	r3, [sp, #8]
 80050b0:	2301      	movs	r3, #1
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2301      	movs	r3, #1
 80050ba:	22e3      	movs	r2, #227	; 0xe3
 80050bc:	21ec      	movs	r1, #236	; 0xec
 80050be:	4828      	ldr	r0, [pc, #160]	; (8005160 <BME280_ReadCoefficients+0x14c>)
 80050c0:	f7fd fe58 	bl	8002d74 <HAL_I2C_Mem_Read>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	4b26      	ldr	r3, [pc, #152]	; (8005164 <BME280_ReadCoefficients+0x150>)
 80050ca:	701a      	strb	r2, [r3, #0]
  CalibData.dig_H3 = val;
 80050cc:	79fa      	ldrb	r2, [r7, #7]
 80050ce:	4b18      	ldr	r3, [pc, #96]	; (8005130 <BME280_ReadCoefficients+0x11c>)
 80050d0:	771a      	strb	r2, [r3, #28]
  //sprintf(str1, "DIG_H3: %d", CalibData.dig_H3);

  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80050d2:	20e4      	movs	r0, #228	; 0xe4
 80050d4:	f7ff feb0 	bl	8004e38 <BME280_ReadReg>
 80050d8:	4603      	mov	r3, r0
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	b21c      	sxth	r4, r3
 80050de:	20e5      	movs	r0, #229	; 0xe5
 80050e0:	f7ff feaa 	bl	8004e38 <BME280_ReadReg>
 80050e4:	4603      	mov	r3, r0
 80050e6:	b21b      	sxth	r3, r3
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	b21b      	sxth	r3, r3
 80050ee:	4323      	orrs	r3, r4
 80050f0:	b21a      	sxth	r2, r3
 80050f2:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <BME280_ReadCoefficients+0x11c>)
 80050f4:	83da      	strh	r2, [r3, #30]
 // sprintf(str1, "DIG_H4: %d", CalibData.dig_H4);
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80050f6:	20e6      	movs	r0, #230	; 0xe6
 80050f8:	f7ff fe9e 	bl	8004e38 <BME280_ReadReg>
 80050fc:	4603      	mov	r3, r0
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	b21c      	sxth	r4, r3
 8005102:	20e5      	movs	r0, #229	; 0xe5
 8005104:	f7ff fe98 	bl	8004e38 <BME280_ReadReg>
 8005108:	4603      	mov	r3, r0
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	b2db      	uxtb	r3, r3
 800510e:	b21b      	sxth	r3, r3
 8005110:	4323      	orrs	r3, r4
 8005112:	b21a      	sxth	r2, r3
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <BME280_ReadCoefficients+0x11c>)
 8005116:	841a      	strh	r2, [r3, #32]
 // sprintf(str1, "DIG_H5: %d", CalibData.dig_H5);
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8005118:	20e7      	movs	r0, #231	; 0xe7
 800511a:	f7ff fe8d 	bl	8004e38 <BME280_ReadReg>
 800511e:	4603      	mov	r3, r0
 8005120:	b25a      	sxtb	r2, r3
 8005122:	4b03      	ldr	r3, [pc, #12]	; (8005130 <BME280_ReadCoefficients+0x11c>)
 8005124:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 // sprintf(str1, "DIG_H6: %d", CalibData.dig_H3);
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	200004c0 	.word	0x200004c0
 8005134:	200004c2 	.word	0x200004c2
 8005138:	200004c4 	.word	0x200004c4
 800513c:	200004c6 	.word	0x200004c6
 8005140:	200004c8 	.word	0x200004c8
 8005144:	200004ca 	.word	0x200004ca
 8005148:	200004cc 	.word	0x200004cc
 800514c:	200004ce 	.word	0x200004ce
 8005150:	200004d0 	.word	0x200004d0
 8005154:	200004d2 	.word	0x200004d2
 8005158:	200004d4 	.word	0x200004d4
 800515c:	200004d6 	.word	0x200004d6
 8005160:	2000051c 	.word	0x2000051c
 8005164:	20000630 	.word	0x20000630
 8005168:	200004da 	.word	0x200004da

0800516c <BME280_ini>:

void BME280_ini()
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af04      	add	r7, sp, #16
	uint8_t data[1] =  {0};
 8005172:	2300      	movs	r3, #0
 8005174:	713b      	strb	r3, [r7, #4]
	uint8_t val;
	//reset the whole module first
	data[0] = 0xB6;
 8005176:	23b6      	movs	r3, #182	; 0xb6
 8005178:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0xE0, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800517a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800517e:	9302      	str	r3, [sp, #8]
 8005180:	2301      	movs	r3, #1
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2301      	movs	r3, #1
 800518a:	22e0      	movs	r2, #224	; 0xe0
 800518c:	21ec      	movs	r1, #236	; 0xec
 800518e:	483b      	ldr	r0, [pc, #236]	; (800527c <BME280_ini+0x110>)
 8005190:	f7fd fce6 	bl	8002b60 <HAL_I2C_Mem_Write>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	4b39      	ldr	r3, [pc, #228]	; (8005280 <BME280_ini+0x114>)
 800519a:	701a      	strb	r2, [r3, #0]

	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 800519c:	bf00      	nop
 800519e:	f7ff feb3 	bl	8004f08 <BME280_ReadStatus>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f8      	bne.n	800519e <BME280_ini+0x32>
	BME280_ReadCoefficients();
 80051ac:	f7ff ff32 	bl	8005014 <BME280_ReadCoefficients>

	status = HAL_I2C_Mem_Read(&hi2c1, adress, 0xF5, I2C_MEMADD_SIZE_8BIT, &val, 0x01, 0x10000);
 80051b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051b4:	9302      	str	r3, [sp, #8]
 80051b6:	2301      	movs	r3, #1
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	1cfb      	adds	r3, r7, #3
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2301      	movs	r3, #1
 80051c0:	22f5      	movs	r2, #245	; 0xf5
 80051c2:	21ec      	movs	r1, #236	; 0xec
 80051c4:	482d      	ldr	r0, [pc, #180]	; (800527c <BME280_ini+0x110>)
 80051c6:	f7fd fdd5 	bl	8002d74 <HAL_I2C_Mem_Read>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <BME280_ini+0x114>)
 80051d0:	701a      	strb	r2, [r3, #0]
	data[0] = val | 0xA8;
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f063 0357 	orn	r3, r3, #87	; 0x57
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0xF5, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 80051dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051e0:	9302      	str	r3, [sp, #8]
 80051e2:	2301      	movs	r3, #1
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2301      	movs	r3, #1
 80051ec:	22f5      	movs	r2, #245	; 0xf5
 80051ee:	21ec      	movs	r1, #236	; 0xec
 80051f0:	4822      	ldr	r0, [pc, #136]	; (800527c <BME280_ini+0x110>)
 80051f2:	f7fd fcb5 	bl	8002b60 <HAL_I2C_Mem_Write>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b21      	ldr	r3, [pc, #132]	; (8005280 <BME280_ini+0x114>)
 80051fc:	701a      	strb	r2, [r3, #0]

	status = HAL_I2C_Mem_Read(&hi2c1, adress, 0xF2, I2C_MEMADD_SIZE_8BIT, &val, 0x01, 0x10000);
 80051fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005202:	9302      	str	r3, [sp, #8]
 8005204:	2301      	movs	r3, #1
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	1cfb      	adds	r3, r7, #3
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	2301      	movs	r3, #1
 800520e:	22f2      	movs	r2, #242	; 0xf2
 8005210:	21ec      	movs	r1, #236	; 0xec
 8005212:	481a      	ldr	r0, [pc, #104]	; (800527c <BME280_ini+0x110>)
 8005214:	f7fd fdae 	bl	8002d74 <HAL_I2C_Mem_Read>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	4b18      	ldr	r3, [pc, #96]	; (8005280 <BME280_ini+0x114>)
 800521e:	701a      	strb	r2, [r3, #0]
	data[0] = val | 1;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0xF2, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 800522a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	2301      	movs	r3, #1
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2301      	movs	r3, #1
 800523a:	22f2      	movs	r2, #242	; 0xf2
 800523c:	21ec      	movs	r1, #236	; 0xec
 800523e:	480f      	ldr	r0, [pc, #60]	; (800527c <BME280_ini+0x110>)
 8005240:	f7fd fc8e 	bl	8002b60 <HAL_I2C_Mem_Write>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <BME280_ini+0x114>)
 800524a:	701a      	strb	r2, [r3, #0]

	data[0] = 0x27;
 800524c:	2327      	movs	r3, #39	; 0x27
 800524e:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Mem_Write(&hi2c1, adress, 0xF4, I2C_MEMADD_SIZE_8BIT, data, 0x01, 0x10000);
 8005250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	2301      	movs	r3, #1
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2301      	movs	r3, #1
 8005260:	22f4      	movs	r2, #244	; 0xf4
 8005262:	21ec      	movs	r1, #236	; 0xec
 8005264:	4805      	ldr	r0, [pc, #20]	; (800527c <BME280_ini+0x110>)
 8005266:	f7fd fc7b 	bl	8002b60 <HAL_I2C_Mem_Write>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <BME280_ini+0x114>)
 8005270:	701a      	strb	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000051c 	.word	0x2000051c
 8005280:	20000630 	.word	0x20000630

08005284 <BME280_ReadTemperature>:

float BME280_ReadTemperature(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
	float temper_float = 0.0f;
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  uint32_t temper_raw;
  int32_t val1, val2;
  BME280_ReadReg_BE_U24(0xFA, &temper_raw);
 8005290:	463b      	mov	r3, r7
 8005292:	4619      	mov	r1, r3
 8005294:	20fa      	movs	r0, #250	; 0xfa
 8005296:	f7ff fe99 	bl	8004fcc <BME280_ReadReg_BE_U24>
  temper_raw >>= 4;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	603b      	str	r3, [r7, #0]

  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	08db      	lsrs	r3, r3, #3
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <BME280_ReadTemperature+0x98>)
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	0052      	lsls	r2, r2, #1
 80052aa:	1a9b      	subs	r3, r3, r2
  ((int32_t)CalibData.dig_T2)) >> 11;
 80052ac:	4a1b      	ldr	r2, [pc, #108]	; (800531c <BME280_ReadTemperature+0x98>)
 80052ae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_T2)) >> 11;
 80052b6:	0adb      	lsrs	r3, r3, #11
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80052b8:	60bb      	str	r3, [r7, #8]

  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <BME280_ReadTemperature+0x98>)
 80052c0:	8812      	ldrh	r2, [r2, #0]
 80052c2:	1a9b      	subs	r3, r3, r2
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	0912      	lsrs	r2, r2, #4
 80052c8:	4914      	ldr	r1, [pc, #80]	; (800531c <BME280_ReadTemperature+0x98>)
 80052ca:	8809      	ldrh	r1, [r1, #0]
 80052cc:	1a52      	subs	r2, r2, r1
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80052d2:	0b1b      	lsrs	r3, r3, #12
  ((int32_t)CalibData.dig_T3)) >> 14;
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <BME280_ReadTemperature+0x98>)
 80052d6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80052da:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_T3)) >> 14;
 80052de:	0b9b      	lsrs	r3, r3, #14
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80052e0:	607b      	str	r3, [r7, #4]

  temper_int = val1 + val2;
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <BME280_ReadTemperature+0x9c>)
 80052ea:	6013      	str	r3, [r2, #0]

  temper_float = ((temper_int * 5 + 128) >> 8);
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <BME280_ReadTemperature+0x9c>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	3380      	adds	r3, #128	; 0x80
 80052f8:	121b      	asrs	r3, r3, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb fce2 	bl	8000cc4 <__aeabi_i2f>
 8005300:	4603      	mov	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]

  temper_float /= 100.0f;
 8005304:	4907      	ldr	r1, [pc, #28]	; (8005324 <BME280_ReadTemperature+0xa0>)
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7fb fde4 	bl	8000ed4 <__aeabi_fdiv>
 800530c:	4603      	mov	r3, r0
 800530e:	60fb      	str	r3, [r7, #12]
  return temper_float;
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200004c0 	.word	0x200004c0
 8005320:	200004e8 	.word	0x200004e8
 8005324:	42c80000 	.word	0x42c80000

08005328 <BME280_ReadPressure>:

float BME280_ReadPressure(void)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b0a6      	sub	sp, #152	; 0x98
 800532e:	af00      	add	r7, sp, #0
	float press_float = 0.0f;
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t press_raw, pres_int;
  int64_t val1, val2, p;
  BME280_ReadTemperature(); // must be done first to get t_fine
 8005338:	f7ff ffa4 	bl	8005284 <BME280_ReadTemperature>
  BME280_ReadReg_BE_U24(0xF7,&press_raw);
 800533c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005340:	4619      	mov	r1, r3
 8005342:	20f7      	movs	r0, #247	; 0xf7
 8005344:	f7ff fe42 	bl	8004fcc <BME280_ReadReg_BE_U24>
  press_raw >>= 4;
 8005348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	673b      	str	r3, [r7, #112]	; 0x70

  val1 = ((int64_t) temper_int) - 128000;
 800534e:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <BME280_ReadPressure+0x1dc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005356:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 800535a:	f144 34ff 	adc.w	r4, r4, #4294967295
 800535e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
  val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8005362:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800536a:	fb03 f102 	mul.w	r1, r3, r2
 800536e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005376:	fb03 f302 	mul.w	r3, r3, r2
 800537a:	18cc      	adds	r4, r1, r3
 800537c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005384:	fba2 0103 	umull	r0, r1, r2, r3
 8005388:	1863      	adds	r3, r4, r1
 800538a:	4619      	mov	r1, r3
 800538c:	4b5e      	ldr	r3, [pc, #376]	; (8005508 <BME280_ReadPressure+0x1e0>)
 800538e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005392:	b21b      	sxth	r3, r3
 8005394:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005398:	fb03 f501 	mul.w	r5, r3, r1
 800539c:	fb00 f204 	mul.w	r2, r0, r4
 80053a0:	442a      	add	r2, r5
 80053a2:	fba0 3403 	umull	r3, r4, r0, r3
 80053a6:	4422      	add	r2, r4
 80053a8:	4614      	mov	r4, r2
 80053aa:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 80053ae:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 80053b2:	4b55      	ldr	r3, [pc, #340]	; (8005508 <BME280_ReadPressure+0x1e0>)
 80053b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80053b8:	b21b      	sxth	r3, r3
 80053ba:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80053be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80053c2:	fb04 f102 	mul.w	r1, r4, r2
 80053c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80053ca:	fb03 f202 	mul.w	r2, r3, r2
 80053ce:	4411      	add	r1, r2
 80053d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80053d4:	fba2 3403 	umull	r3, r4, r2, r3
 80053d8:	190a      	adds	r2, r1, r4
 80053da:	4614      	mov	r4, r2
 80053dc:	ea4f 4944 	mov.w	r9, r4, lsl #17
 80053e0:	ea49 39d3 	orr.w	r9, r9, r3, lsr #15
 80053e4:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80053e8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80053ec:	eb13 0308 	adds.w	r3, r3, r8
 80053f0:	eb44 0409 	adc.w	r4, r4, r9
 80053f4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 80053f8:	4b43      	ldr	r3, [pc, #268]	; (8005508 <BME280_ReadPressure+0x1e0>)
 80053fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80053fe:	b21b      	sxth	r3, r3
 8005400:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	2300      	movs	r3, #0
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005410:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005414:	18c9      	adds	r1, r1, r3
 8005416:	eb42 0204 	adc.w	r2, r2, r4
 800541a:	460b      	mov	r3, r1
 800541c:	4614      	mov	r4, r2
 800541e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) +
 8005422:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800542a:	fb03 f102 	mul.w	r1, r3, r2
 800542e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005436:	fb03 f302 	mul.w	r3, r3, r2
 800543a:	18cc      	adds	r4, r1, r3
 800543c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005444:	fba2 0103 	umull	r0, r1, r2, r3
 8005448:	1863      	adds	r3, r4, r1
 800544a:	4619      	mov	r1, r3
 800544c:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <BME280_ReadPressure+0x1e0>)
 800544e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005452:	b21b      	sxth	r3, r3
 8005454:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005458:	fb03 f501 	mul.w	r5, r3, r1
 800545c:	fb00 f204 	mul.w	r2, r0, r4
 8005460:	442a      	add	r2, r5
 8005462:	fba0 3403 	umull	r3, r4, r0, r3
 8005466:	4422      	add	r2, r4
 8005468:	4614      	mov	r4, r2
 800546a:	0a1a      	lsrs	r2, r3, #8
 800546c:	66ba      	str	r2, [r7, #104]	; 0x68
 800546e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005470:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8005474:	66ba      	str	r2, [r7, #104]	; 0x68
 8005476:	1223      	asrs	r3, r4, #8
 8005478:	66fb      	str	r3, [r7, #108]	; 0x6c
		  ((val1 * (int64_t)CalibData.dig_P2) << 12);
 800547a:	4b23      	ldr	r3, [pc, #140]	; (8005508 <BME280_ReadPressure+0x1e0>)
 800547c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005480:	b21b      	sxth	r3, r3
 8005482:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005486:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800548a:	fb04 f102 	mul.w	r1, r4, r2
 800548e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005492:	fb03 f202 	mul.w	r2, r3, r2
 8005496:	4411      	add	r1, r2
 8005498:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800549c:	fba2 3403 	umull	r3, r4, r2, r3
 80054a0:	190a      	adds	r2, r1, r4
 80054a2:	4614      	mov	r4, r2
 80054a4:	ea4f 3b04 	mov.w	fp, r4, lsl #12
 80054a8:	ea4b 5b13 	orr.w	fp, fp, r3, lsr #20
 80054ac:	ea4f 3a03 	mov.w	sl, r3, lsl #12
  val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) +
 80054b0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80054b4:	eb13 030a 	adds.w	r3, r3, sl
 80054b8:	eb44 040b 	adc.w	r4, r4, fp
 80054bc:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
  val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 80054c0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80054c4:	1c19      	adds	r1, r3, #0
 80054c6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <BME280_ReadPressure+0x1e0>)
 80054cc:	88db      	ldrh	r3, [r3, #6]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	fb03 f502 	mul.w	r5, r3, r2
 80054d8:	fb01 f004 	mul.w	r0, r1, r4
 80054dc:	4428      	add	r0, r5
 80054de:	fba1 3403 	umull	r3, r4, r1, r3
 80054e2:	1902      	adds	r2, r0, r4
 80054e4:	4614      	mov	r4, r2
 80054e6:	1062      	asrs	r2, r4, #1
 80054e8:	603a      	str	r2, [r7, #0]
 80054ea:	17e3      	asrs	r3, r4, #31
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	e897 0018 	ldmia.w	r7, {r3, r4}
 80054f2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

  if (val1 == 0)
 80054f6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80054fa:	4323      	orrs	r3, r4
 80054fc:	d106      	bne.n	800550c <BME280_ReadPressure+0x1e4>
    return 0; // avoid exception caused by division by zero
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e11e      	b.n	8005742 <BME280_ReadPressure+0x41a>
 8005504:	200004e8 	.word	0x200004e8
 8005508:	200004c0 	.word	0x200004c0

  p = 1048576 - press_raw;
 800550c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800550e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  p = (((p << 31) - val2) * 3125) / val1;
 800551a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800551e:	07e2      	lsls	r2, r4, #31
 8005520:	667a      	str	r2, [r7, #100]	; 0x64
 8005522:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005524:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8005528:	667a      	str	r2, [r7, #100]	; 0x64
 800552a:	07db      	lsls	r3, r3, #31
 800552c:	663b      	str	r3, [r7, #96]	; 0x60
 800552e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005532:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005536:	1ac9      	subs	r1, r1, r3
 8005538:	eb62 0204 	sbc.w	r2, r2, r4
 800553c:	460b      	mov	r3, r1
 800553e:	4614      	mov	r4, r2
 8005540:	18db      	adds	r3, r3, r3
 8005542:	eb44 0404 	adc.w	r4, r4, r4
 8005546:	185b      	adds	r3, r3, r1
 8005548:	eb44 0402 	adc.w	r4, r4, r2
 800554c:	01a0      	lsls	r0, r4, #6
 800554e:	6378      	str	r0, [r7, #52]	; 0x34
 8005550:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005552:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8005556:	6378      	str	r0, [r7, #52]	; 0x34
 8005558:	0198      	lsls	r0, r3, #6
 800555a:	6338      	str	r0, [r7, #48]	; 0x30
 800555c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8005560:	eb18 0803 	adds.w	r8, r8, r3
 8005564:	eb49 0904 	adc.w	r9, r9, r4
 8005568:	4643      	mov	r3, r8
 800556a:	464c      	mov	r4, r9
 800556c:	00a0      	lsls	r0, r4, #2
 800556e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005572:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8005576:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
 800557c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005580:	185b      	adds	r3, r3, r1
 8005582:	eb44 0402 	adc.w	r4, r4, r2
 8005586:	00a0      	lsls	r0, r4, #2
 8005588:	6278      	str	r0, [r7, #36]	; 0x24
 800558a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8005590:	6278      	str	r0, [r7, #36]	; 0x24
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	623b      	str	r3, [r7, #32]
 8005596:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800559a:	eb13 0801 	adds.w	r8, r3, r1
 800559e:	eb44 0902 	adc.w	r9, r4, r2
 80055a2:	4640      	mov	r0, r8
 80055a4:	4649      	mov	r1, r9
 80055a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80055aa:	f7fb fd55 	bl	8001058 <__aeabi_ldivmod>
 80055ae:	4603      	mov	r3, r0
 80055b0:	460c      	mov	r4, r1
 80055b2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80055b6:	4b65      	ldr	r3, [pc, #404]	; (800574c <BME280_ReadPressure+0x424>)
 80055b8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80055bc:	b219      	sxth	r1, r3
 80055be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80055c2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80055c6:	0b58      	lsrs	r0, r3, #13
 80055c8:	65b8      	str	r0, [r7, #88]	; 0x58
 80055ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80055cc:	ea40 40c4 	orr.w	r0, r0, r4, lsl #19
 80055d0:	65b8      	str	r0, [r7, #88]	; 0x58
 80055d2:	1363      	asrs	r3, r4, #13
 80055d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80055da:	4623      	mov	r3, r4
 80055dc:	fb03 f002 	mul.w	r0, r3, r2
 80055e0:	462b      	mov	r3, r5
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4403      	add	r3, r0
 80055e8:	4620      	mov	r0, r4
 80055ea:	fba1 0100 	umull	r0, r1, r1, r0
 80055ee:	440b      	add	r3, r1
 80055f0:	4619      	mov	r1, r3
 80055f2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80055f6:	0b5a      	lsrs	r2, r3, #13
 80055f8:	653a      	str	r2, [r7, #80]	; 0x50
 80055fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055fc:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
 8005600:	653a      	str	r2, [r7, #80]	; 0x50
 8005602:	1363      	asrs	r3, r4, #13
 8005604:	657b      	str	r3, [r7, #84]	; 0x54
 8005606:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800560a:	4623      	mov	r3, r4
 800560c:	fb03 f201 	mul.w	r2, r3, r1
 8005610:	462b      	mov	r3, r5
 8005612:	fb00 f303 	mul.w	r3, r0, r3
 8005616:	441a      	add	r2, r3
 8005618:	4623      	mov	r3, r4
 800561a:	fba0 3403 	umull	r3, r4, r0, r3
 800561e:	4422      	add	r2, r4
 8005620:	4614      	mov	r4, r2
 8005622:	0e5a      	lsrs	r2, r3, #25
 8005624:	61ba      	str	r2, [r7, #24]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800562c:	61ba      	str	r2, [r7, #24]
 800562e:	1663      	asrs	r3, r4, #25
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005636:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
  val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 800563a:	4b44      	ldr	r3, [pc, #272]	; (800574c <BME280_ReadPressure+0x424>)
 800563c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005640:	b21b      	sxth	r3, r3
 8005642:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005646:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005648:	fb04 f102 	mul.w	r1, r4, r2
 800564c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800564e:	fb03 f202 	mul.w	r2, r3, r2
 8005652:	440a      	add	r2, r1
 8005654:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005656:	fba1 3403 	umull	r3, r4, r1, r3
 800565a:	4422      	add	r2, r4
 800565c:	4614      	mov	r4, r2
 800565e:	0cda      	lsrs	r2, r3, #19
 8005660:	613a      	str	r2, [r7, #16]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8005668:	613a      	str	r2, [r7, #16]
 800566a:	14e3      	asrs	r3, r4, #19
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005672:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8005676:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800567a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800567e:	18c9      	adds	r1, r1, r3
 8005680:	eb42 0204 	adc.w	r2, r2, r4
 8005684:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005688:	185b      	adds	r3, r3, r1
 800568a:	eb44 0402 	adc.w	r4, r4, r2
 800568e:	0a1a      	lsrs	r2, r3, #8
 8005690:	64ba      	str	r2, [r7, #72]	; 0x48
 8005692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005694:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8005698:	64ba      	str	r2, [r7, #72]	; 0x48
 800569a:	1223      	asrs	r3, r4, #8
 800569c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569e:	4b2b      	ldr	r3, [pc, #172]	; (800574c <BME280_ReadPressure+0x424>)
 80056a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80056aa:	0122      	lsls	r2, r4, #4
 80056ac:	647a      	str	r2, [r7, #68]	; 0x44
 80056ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056b0:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80056b4:	647a      	str	r2, [r7, #68]	; 0x44
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80056be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80056c2:	185b      	adds	r3, r3, r1
 80056c4:	eb44 0402 	adc.w	r4, r4, r2
 80056c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
  pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 80056cc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80056d0:	0a1a      	lsrs	r2, r3, #8
 80056d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80056d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80056da:	63ba      	str	r2, [r7, #56]	; 0x38
 80056dc:	1223      	asrs	r3, r4, #8
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056e6:	fb03 f502 	mul.w	r5, r3, r2
 80056ea:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80056ee:	f04f 01ff 	mov.w	r1, #255	; 0xff
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	ea03 0301 	and.w	r3, r3, r1
 80056fa:	ea04 0402 	and.w	r4, r4, r2
 80056fe:	4a14      	ldr	r2, [pc, #80]	; (8005750 <BME280_ReadPressure+0x428>)
 8005700:	fb02 f104 	mul.w	r1, r2, r4
 8005704:	2200      	movs	r2, #0
 8005706:	fb02 f203 	mul.w	r2, r2, r3
 800570a:	440a      	add	r2, r1
 800570c:	4910      	ldr	r1, [pc, #64]	; (8005750 <BME280_ReadPressure+0x428>)
 800570e:	fba3 0101 	umull	r0, r1, r3, r1
 8005712:	1853      	adds	r3, r2, r1
 8005714:	4619      	mov	r1, r3
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <BME280_ReadPressure+0x42c>)
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f7fb fc9c 	bl	8001058 <__aeabi_ldivmod>
 8005720:	4603      	mov	r3, r0
 8005722:	460c      	mov	r4, r1
 8005724:	442b      	add	r3, r5
 8005726:	677b      	str	r3, [r7, #116]	; 0x74
  press_float = pres_int / 100.0f;
 8005728:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800572a:	f7fb fac7 	bl	8000cbc <__aeabi_ui2f>
 800572e:	4603      	mov	r3, r0
 8005730:	4909      	ldr	r1, [pc, #36]	; (8005758 <BME280_ReadPressure+0x430>)
 8005732:	4618      	mov	r0, r3
 8005734:	f7fb fbce 	bl	8000ed4 <__aeabi_fdiv>
 8005738:	4603      	mov	r3, r0
 800573a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return press_float;
 800573e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8005742:	4618      	mov	r0, r3
 8005744:	3798      	adds	r7, #152	; 0x98
 8005746:	46bd      	mov	sp, r7
 8005748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574c:	200004c0 	.word	0x200004c0
 8005750:	0005f5e1 	.word	0x0005f5e1
 8005754:	000186a0 	.word	0x000186a0
 8005758:	42c80000 	.word	0x42c80000

0800575c <BME280_ReadHumidity>:

float BME280_ReadHumidity(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
	float hum_float = 0.0f;
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  int16_t hum_raw;
  int32_t hum_raw_sign, v_x1_u32r;
  BME280_ReadTemperature(); // must be done first to get t_fine
 8005768:	f7ff fd8c 	bl	8005284 <BME280_ReadTemperature>
  BME280_ReadReg_BE_S16(0xFD,&hum_raw);
 800576c:	1cbb      	adds	r3, r7, #2
 800576e:	4619      	mov	r1, r3
 8005770:	20fd      	movs	r0, #253	; 0xfd
 8005772:	f7ff fc0d 	bl	8004f90 <BME280_ReadReg_BE_S16>
  hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8005776:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800577a:	b29b      	uxth	r3, r3
 800577c:	60bb      	str	r3, [r7, #8]

  v_x1_u32r = (temper_int - ((int32_t)76800));
 800577e:	4b32      	ldr	r3, [pc, #200]	; (8005848 <BME280_ReadHumidity+0xec>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8005786:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	039a      	lsls	r2, r3, #14
 800578c:	4b2f      	ldr	r3, [pc, #188]	; (800584c <BME280_ReadHumidity+0xf0>)
 800578e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	1ad2      	subs	r2, r2, r3
  (((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <BME280_ReadHumidity+0xf0>)
 8005798:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800579c:	4619      	mov	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	fb03 f301 	mul.w	r3, r3, r1
  v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 80057a4:	1ad3      	subs	r3, r2, r3
  (((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80057a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80057aa:	13db      	asrs	r3, r3, #15
  (((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 80057ac:	4a27      	ldr	r2, [pc, #156]	; (800584c <BME280_ReadHumidity+0xf0>)
 80057ae:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80057b2:	4611      	mov	r1, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	fb02 f201 	mul.w	r2, r2, r1
 80057ba:	1292      	asrs	r2, r2, #10
  (((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80057bc:	4923      	ldr	r1, [pc, #140]	; (800584c <BME280_ReadHumidity+0xf0>)
 80057be:	7f09      	ldrb	r1, [r1, #28]
 80057c0:	4608      	mov	r0, r1
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fb01 f100 	mul.w	r1, r1, r0
 80057c8:	12c9      	asrs	r1, r1, #11
 80057ca:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
  (((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 80057ce:	fb01 f202 	mul.w	r2, r1, r2
  (((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 80057d2:	1292      	asrs	r2, r2, #10
 80057d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
  ((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 80057d8:	491c      	ldr	r1, [pc, #112]	; (800584c <BME280_ReadHumidity+0xf0>)
 80057da:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80057de:	fb01 f202 	mul.w	r2, r1, r2
 80057e2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80057e6:	1392      	asrs	r2, r2, #14
  v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	607b      	str	r3, [r7, #4]

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	13db      	asrs	r3, r3, #15
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	13d2      	asrs	r2, r2, #15
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	11db      	asrs	r3, r3, #7
  ((int32_t)CalibData.dig_H1)) >> 4));
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <BME280_ReadHumidity+0xf0>)
 80057fe:	7e12      	ldrb	r2, [r2, #24]
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8005800:	fb02 f303 	mul.w	r3, r2, r3
  ((int32_t)CalibData.dig_H1)) >> 4));
 8005804:	111b      	asrs	r3, r3, #4
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005812:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800581a:	bfa8      	it	ge
 800581c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8005820:	607b      	str	r3, [r7, #4]
  hum_float = (v_x1_u32r>>12);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	131b      	asrs	r3, r3, #12
 8005826:	4618      	mov	r0, r3
 8005828:	f7fb fa4c 	bl	8000cc4 <__aeabi_i2f>
 800582c:	4603      	mov	r3, r0
 800582e:	60fb      	str	r3, [r7, #12]
  hum_float /= 1024.0f;
 8005830:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7fb fb4d 	bl	8000ed4 <__aeabi_fdiv>
 800583a:	4603      	mov	r3, r0
 800583c:	60fb      	str	r3, [r7, #12]
  return hum_float;
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	200004e8 	.word	0x200004e8
 800584c:	200004c0 	.word	0x200004c0

08005850 <BME280_ReadAltitude>:

float BME280_ReadAltitude(float seaLevel)
{
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	float att = 0.0f;
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
	float atm = BME280_ReadPressure();
 800585e:	f7ff fd63 	bl	8005328 <BME280_ReadPressure>
 8005862:	60b8      	str	r0, [r7, #8]
  att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	68b8      	ldr	r0, [r7, #8]
 8005868:	f7fb fb34 	bl	8000ed4 <__aeabi_fdiv>
 800586c:	4603      	mov	r3, r0
 800586e:	4618      	mov	r0, r3
 8005870:	f7fa fdd2 	bl	8000418 <__aeabi_f2d>
 8005874:	a312      	add	r3, pc, #72	; (adr r3, 80058c0 <BME280_ReadAltitude+0x70>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f001 fd69 	bl	8007350 <pow>
 800587e:	4603      	mov	r3, r0
 8005880:	460c      	mov	r4, r1
 8005882:	461a      	mov	r2, r3
 8005884:	4623      	mov	r3, r4
 8005886:	f04f 0000 	mov.w	r0, #0
 800588a:	4911      	ldr	r1, [pc, #68]	; (80058d0 <BME280_ReadAltitude+0x80>)
 800588c:	f7fa fc64 	bl	8000158 <__aeabi_dsub>
 8005890:	4603      	mov	r3, r0
 8005892:	460c      	mov	r4, r1
 8005894:	4618      	mov	r0, r3
 8005896:	4621      	mov	r1, r4
 8005898:	a30b      	add	r3, pc, #44	; (adr r3, 80058c8 <BME280_ReadAltitude+0x78>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa fe0f 	bl	80004c0 <__aeabi_dmul>
 80058a2:	4603      	mov	r3, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	4618      	mov	r0, r3
 80058a8:	4621      	mov	r1, r4
 80058aa:	f7fb f901 	bl	8000ab0 <__aeabi_d2f>
 80058ae:	4603      	mov	r3, r0
 80058b0:	60fb      	str	r3, [r7, #12]
  return att;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}
 80058bc:	f3af 8000 	nop.w
 80058c0:	1a36e2eb 	.word	0x1a36e2eb
 80058c4:	3fc85bc0 	.word	0x3fc85bc0
 80058c8:	00000000 	.word	0x00000000
 80058cc:	40e5a540 	.word	0x40e5a540
 80058d0:	3ff00000 	.word	0x3ff00000

080058d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08c      	sub	sp, #48	; 0x30
 80058d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80058da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	2220      	movs	r2, #32
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 ff7f 	bl	80067f0 <memset>

  /**Common config 
  */
  hadc1.Instance = ADC1;
 80058f2:	4b27      	ldr	r3, [pc, #156]	; (8005990 <MX_ADC1_Init+0xbc>)
 80058f4:	4a27      	ldr	r2, [pc, #156]	; (8005994 <MX_ADC1_Init+0xc0>)
 80058f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80058f8:	4b25      	ldr	r3, [pc, #148]	; (8005990 <MX_ADC1_Init+0xbc>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <MX_ADC1_Init+0xbc>)
 8005900:	2200      	movs	r2, #0
 8005902:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005904:	4b22      	ldr	r3, [pc, #136]	; (8005990 <MX_ADC1_Init+0xbc>)
 8005906:	2200      	movs	r2, #0
 8005908:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800590a:	4b21      	ldr	r3, [pc, #132]	; (8005990 <MX_ADC1_Init+0xbc>)
 800590c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005912:	4b1f      	ldr	r3, [pc, #124]	; (8005990 <MX_ADC1_Init+0xbc>)
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <MX_ADC1_Init+0xbc>)
 800591a:	2201      	movs	r2, #1
 800591c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800591e:	481c      	ldr	r0, [pc, #112]	; (8005990 <MX_ADC1_Init+0xbc>)
 8005920:	f7fb fdde 	bl	80014e0 <HAL_ADC_Init>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 800592a:	f000 fb97 	bl	800605c <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800592e:	2305      	movs	r3, #5
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005932:	2301      	movs	r3, #1
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005936:	2300      	movs	r3, #0
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800593a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800593e:	4619      	mov	r1, r3
 8005940:	4813      	ldr	r0, [pc, #76]	; (8005990 <MX_ADC1_Init+0xbc>)
 8005942:	f7fb ff7b 	bl	800183c <HAL_ADC_ConfigChannel>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800594c:	f000 fb86 	bl	800605c <Error_Handler>
  }
  /**Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8005950:	2305      	movs	r3, #5
 8005952:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8005954:	2301      	movs	r3, #1
 8005956:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8005958:	2301      	movs	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005960:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005964:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4806      	ldr	r0, [pc, #24]	; (8005990 <MX_ADC1_Init+0xbc>)
 8005978:	f7fc facc 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8005982:	f000 fb6b 	bl	800605c <Error_Handler>
  }

}
 8005986:	bf00      	nop
 8005988:	3730      	adds	r7, #48	; 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200004ec 	.word	0x200004ec
 8005994:	40012400 	.word	0x40012400

08005998 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	609a      	str	r2, [r3, #8]
 80059ac:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_ADC_MspInit+0x7c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d129      	bne.n	8005a0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <HAL_ADC_MspInit+0x80>)
 80059ba:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <HAL_ADC_MspInit+0x80>)
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c2:	6193      	str	r3, [r2, #24]
 80059c4:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <HAL_ADC_MspInit+0x80>)
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d0:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <HAL_ADC_MspInit+0x80>)
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <HAL_ADC_MspInit+0x80>)
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f043 0304 	orr.w	r3, r3, #4
 80059da:	6193      	str	r3, [r2, #24]
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_ADC_MspInit+0x80>)
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80059e8:	2320      	movs	r3, #32
 80059ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059ec:	2303      	movs	r3, #3
 80059ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f0:	f107 0310 	add.w	r3, r7, #16
 80059f4:	4619      	mov	r1, r3
 80059f6:	4809      	ldr	r0, [pc, #36]	; (8005a1c <HAL_ADC_MspInit+0x84>)
 80059f8:	f7fc fd2a 	bl	8002450 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80059fc:	2200      	movs	r2, #0
 80059fe:	2100      	movs	r1, #0
 8005a00:	2012      	movs	r0, #18
 8005a02:	f7fc fcee 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005a06:	2012      	movs	r0, #18
 8005a08:	f7fc fd07 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40012400 	.word	0x40012400
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40010800 	.word	0x40010800

08005a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a26:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f043 0320 	orr.w	r3, r3, #32
 8005a30:	6193      	str	r3, [r2, #24]
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a40:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f043 0304 	orr.w	r3, r3, #4
 8005a48:	6193      	str	r3, [r2, #24]
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a56:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f043 0308 	orr.w	r3, r3, #8
 8005a60:	6193      	str	r3, [r2, #24]
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <MX_GPIO_Init+0x58>)
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]

}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	40021000 	.word	0x40021000

08005a7c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a82:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <MX_I2C1_Init+0x54>)
 8005a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a88:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <MX_I2C1_Init+0x58>)
 8005a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005a92:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <MX_I2C1_Init+0x50>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ab8:	4804      	ldr	r0, [pc, #16]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aba:	f7fc fe3f 	bl	800273c <HAL_I2C_Init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005ac4:	f000 faca 	bl	800605c <Error_Handler>
  }

}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2000051c 	.word	0x2000051c
 8005ad0:	40005400 	.word	0x40005400
 8005ad4:	000186a0 	.word	0x000186a0

08005ad8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <MX_I2C2_Init+0x54>)
 8005ae0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005ae4:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <MX_I2C2_Init+0x58>)
 8005ae6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005af4:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005afa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005b14:	4804      	ldr	r0, [pc, #16]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b16:	f7fc fe11 	bl	800273c <HAL_I2C_Init>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005b20:	f000 fa9c 	bl	800605c <Error_Handler>
  }

}
 8005b24:	bf00      	nop
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000570 	.word	0x20000570
 8005b2c:	40005800 	.word	0x40005800
 8005b30:	000186a0 	.word	0x000186a0

08005b34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	; 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b3c:	f107 0318 	add.w	r3, r7, #24
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2b      	ldr	r2, [pc, #172]	; (8005bfc <HAL_I2C_MspInit+0xc8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d124      	bne.n	8005b9e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b54:	4a2a      	ldr	r2, [pc, #168]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005b56:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f043 0308 	orr.w	r3, r3, #8
 8005b5e:	6193      	str	r3, [r2, #24]
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b6c:	23c0      	movs	r3, #192	; 0xc0
 8005b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b70:	2312      	movs	r3, #18
 8005b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b74:	2303      	movs	r3, #3
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b78:	f107 0318 	add.w	r3, r7, #24
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4821      	ldr	r0, [pc, #132]	; (8005c04 <HAL_I2C_MspInit+0xd0>)
 8005b80:	f7fc fc66 	bl	8002450 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b84:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005b86:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b8e:	61d3      	str	r3, [r2, #28]
 8005b90:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005b9c:	e029      	b.n	8005bf2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_I2C_MspInit+0xd4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d124      	bne.n	8005bf2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005baa:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f043 0308 	orr.w	r3, r3, #8
 8005bb2:	6193      	str	r3, [r2, #24]
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_Display_Pin|SDA_Display_Pin;
 8005bc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bc6:	2312      	movs	r3, #18
 8005bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bce:	f107 0318 	add.w	r3, r7, #24
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	480b      	ldr	r0, [pc, #44]	; (8005c04 <HAL_I2C_MspInit+0xd0>)
 8005bd6:	f7fc fc3b 	bl	8002450 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005be4:	61d3      	str	r3, [r2, #28]
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_I2C_MspInit+0xcc>)
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
}
 8005bf2:	bf00      	nop
 8005bf4:	3728      	adds	r7, #40	; 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40005400 	.word	0x40005400
 8005c00:	40021000 	.word	0x40021000
 8005c04:	40010c00 	.word	0x40010c00
 8005c08:	40005800 	.word	0x40005800

08005c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	short tf = 0.0f, pf = 0.0f, af = 0.0f, hf = 0.0f;
 8005c12:	2300      	movs	r3, #0
 8005c14:	80fb      	strh	r3, [r7, #6]
 8005c16:	2300      	movs	r3, #0
 8005c18:	80bb      	strh	r3, [r7, #4]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	807b      	strh	r3, [r7, #2]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c22:	f7fb fbd9 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c26:	f000 f8db 	bl	8005de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c2a:	f7ff fef9 	bl	8005a20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005c2e:	f7ff ff25 	bl	8005a7c <MX_I2C1_Init>
  MX_I2C2_Init();
 8005c32:	f7ff ff51 	bl	8005ad8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8005c36:	f000 fd1f 	bl	8006678 <MX_TIM2_Init>
  MX_ADC1_Init();
 8005c3a:	f7ff fe4b 	bl	80058d4 <MX_ADC1_Init>
  	}
  	HAL_Delay(100);
  }
  if(i == 0)
  	;*/
  SSD1306_Init();
 8005c3e:	f000 fa31 	bl	80060a4 <SSD1306_Init>
    BME280_ini();
 8005c42:	f7ff fa93 	bl	800516c <BME280_ini>
    HAL_TIM_Base_Start_IT(&htim2);
 8005c46:	4857      	ldr	r0, [pc, #348]	; (8005da4 <main+0x198>)
 8005c48:	f7fe fd69 	bl	800471e <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag)
 8005c4c:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <main+0x19c>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0fb      	beq.n	8005c4c <main+0x40>
		  	{
		  HAL_ADCEx_InjectedStart(&hadc1);
 8005c54:	4855      	ldr	r0, [pc, #340]	; (8005dac <main+0x1a0>)
 8005c56:	f7fb ff75 	bl	8001b44 <HAL_ADCEx_InjectedStart>
		 	  	  HAL_ADCEx_InjectedPollForConversion(&hadc1, 100);
 8005c5a:	2164      	movs	r1, #100	; 0x64
 8005c5c:	4853      	ldr	r0, [pc, #332]	; (8005dac <main+0x1a0>)
 8005c5e:	f7fc f839 	bl	8001cd4 <HAL_ADCEx_InjectedPollForConversion>
		 	  	  ADC_data = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8005c62:	2101      	movs	r1, #1
 8005c64:	4851      	ldr	r0, [pc, #324]	; (8005dac <main+0x1a0>)
 8005c66:	f7fc f923 	bl	8001eb0 <HAL_ADCEx_InjectedGetValue>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fb f825 	bl	8000cbc <__aeabi_ui2f>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b4e      	ldr	r3, [pc, #312]	; (8005db0 <main+0x1a4>)
 8005c76:	601a      	str	r2, [r3, #0]
		 	  	  HAL_ADCEx_InjectedStop(&hadc1);
 8005c78:	484c      	ldr	r0, [pc, #304]	; (8005dac <main+0x1a0>)
 8005c7a:	f7fb ffe9 	bl	8001c50 <HAL_ADCEx_InjectedStop>
		 	  	  calculatePPM();
 8005c7e:	f000 f90b 	bl	8005e98 <calculatePPM>
		  	 SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005c82:	2000      	movs	r0, #0
 8005c84:	f000 faea 	bl	800625c <SSD1306_Fill>
		  	SSD1306_UpdateScreen();
 8005c88:	f000 fad0 	bl	800622c <SSD1306_UpdateScreen>
		  	tf = BME280_ReadTemperature();
 8005c8c:	f7ff fafa 	bl	8005284 <BME280_ReadTemperature>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fb f9ba 	bl	800100c <__aeabi_f2iz>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	80fb      	strh	r3, [r7, #6]
		  snprintf(&str, sizeof(str), "Temperature: %i C", tf);
 8005c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ca0:	4a44      	ldr	r2, [pc, #272]	; (8005db4 <main+0x1a8>)
 8005ca2:	2114      	movs	r1, #20
 8005ca4:	4844      	ldr	r0, [pc, #272]	; (8005db8 <main+0x1ac>)
 8005ca6:	f000 fdab 	bl	8006800 <sniprintf>
		  SSD1306_GotoXY(0, 10);
 8005caa:	210a      	movs	r1, #10
 8005cac:	2000      	movs	r0, #0
 8005cae:	f000 fb53 	bl	8006358 <SSD1306_GotoXY>
		  SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4941      	ldr	r1, [pc, #260]	; (8005dbc <main+0x1b0>)
 8005cb6:	4840      	ldr	r0, [pc, #256]	; (8005db8 <main+0x1ac>)
 8005cb8:	f000 fbd6 	bl	8006468 <SSD1306_Puts>

		  pf = BME280_ReadPressure()/1000.0;
 8005cbc:	f7ff fb34 	bl	8005328 <BME280_ReadPressure>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fa fba8 	bl	8000418 <__aeabi_f2d>
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	4b3c      	ldr	r3, [pc, #240]	; (8005dc0 <main+0x1b4>)
 8005cce:	f7fa fd21 	bl	8000714 <__aeabi_ddiv>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	4621      	mov	r1, r4
 8005cda:	f7fa fea1 	bl	8000a20 <__aeabi_d2iz>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80bb      	strh	r3, [r7, #4]
		  snprintf(str, sizeof(str), "Pressure: %i mmHg", pf);
 8005ce2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ce6:	4a37      	ldr	r2, [pc, #220]	; (8005dc4 <main+0x1b8>)
 8005ce8:	2114      	movs	r1, #20
 8005cea:	4833      	ldr	r0, [pc, #204]	; (8005db8 <main+0x1ac>)
 8005cec:	f000 fd88 	bl	8006800 <sniprintf>
		  SSD1306_GotoXY(0, 20);
 8005cf0:	2114      	movs	r1, #20
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f000 fb30 	bl	8006358 <SSD1306_GotoXY>
		  SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	4930      	ldr	r1, [pc, #192]	; (8005dbc <main+0x1b0>)
 8005cfc:	482e      	ldr	r0, [pc, #184]	; (8005db8 <main+0x1ac>)
 8005cfe:	f000 fbb3 	bl	8006468 <SSD1306_Puts>

		  af = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
 8005d02:	4831      	ldr	r0, [pc, #196]	; (8005dc8 <main+0x1bc>)
 8005d04:	f7ff fda4 	bl	8005850 <BME280_ReadAltitude>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fb f97e 	bl	800100c <__aeabi_f2iz>
 8005d10:	4603      	mov	r3, r0
 8005d12:	807b      	strh	r3, [r7, #2]
		  snprintf(str, sizeof(str), "Altitude: %i m", af);
 8005d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d18:	4a2c      	ldr	r2, [pc, #176]	; (8005dcc <main+0x1c0>)
 8005d1a:	2114      	movs	r1, #20
 8005d1c:	4826      	ldr	r0, [pc, #152]	; (8005db8 <main+0x1ac>)
 8005d1e:	f000 fd6f 	bl	8006800 <sniprintf>
		  SSD1306_GotoXY(0, 30);
 8005d22:	211e      	movs	r1, #30
 8005d24:	2000      	movs	r0, #0
 8005d26:	f000 fb17 	bl	8006358 <SSD1306_GotoXY>
		  SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4923      	ldr	r1, [pc, #140]	; (8005dbc <main+0x1b0>)
 8005d2e:	4822      	ldr	r0, [pc, #136]	; (8005db8 <main+0x1ac>)
 8005d30:	f000 fb9a 	bl	8006468 <SSD1306_Puts>

		  hf = BME280_ReadHumidity();
 8005d34:	f7ff fd12 	bl	800575c <BME280_ReadHumidity>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fb f966 	bl	800100c <__aeabi_f2iz>
 8005d40:	4603      	mov	r3, r0
 8005d42:	803b      	strh	r3, [r7, #0]
		  snprintf(str, sizeof(str), "Humidity: %i %%", hf);
 8005d44:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005d48:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <main+0x1c4>)
 8005d4a:	2114      	movs	r1, #20
 8005d4c:	481a      	ldr	r0, [pc, #104]	; (8005db8 <main+0x1ac>)
 8005d4e:	f000 fd57 	bl	8006800 <sniprintf>
		  SSD1306_GotoXY(0, 40);
 8005d52:	2128      	movs	r1, #40	; 0x28
 8005d54:	2000      	movs	r0, #0
 8005d56:	f000 faff 	bl	8006358 <SSD1306_GotoXY>
		  SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4917      	ldr	r1, [pc, #92]	; (8005dbc <main+0x1b0>)
 8005d5e:	4816      	ldr	r0, [pc, #88]	; (8005db8 <main+0x1ac>)
 8005d60:	f000 fb82 	bl	8006468 <SSD1306_Puts>

		  ppm2 = ppm;
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <main+0x1c8>)
 8005d66:	cb18      	ldmia	r3, {r3, r4}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	f7fa fe80 	bl	8000a70 <__aeabi_d2uiz>
 8005d70:	4603      	mov	r3, r0
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <main+0x1cc>)
 8005d76:	801a      	strh	r2, [r3, #0]
		  snprintf(str, sizeof(str), "CO2 lev: %i ppm", ppm2);
 8005d78:	4b17      	ldr	r3, [pc, #92]	; (8005dd8 <main+0x1cc>)
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <main+0x1d0>)
 8005d7e:	2114      	movs	r1, #20
 8005d80:	480d      	ldr	r0, [pc, #52]	; (8005db8 <main+0x1ac>)
 8005d82:	f000 fd3d 	bl	8006800 <sniprintf>
		  SSD1306_GotoXY(0, 50);
 8005d86:	2132      	movs	r1, #50	; 0x32
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f000 fae5 	bl	8006358 <SSD1306_GotoXY>
		  SSD1306_Puts(str, &Font_7x10, SSD1306_COLOR_WHITE);
 8005d8e:	2201      	movs	r2, #1
 8005d90:	490a      	ldr	r1, [pc, #40]	; (8005dbc <main+0x1b0>)
 8005d92:	4809      	ldr	r0, [pc, #36]	; (8005db8 <main+0x1ac>)
 8005d94:	f000 fb68 	bl	8006468 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8005d98:	f000 fa48 	bl	800622c <SSD1306_UpdateScreen>

	 flag = 0;
 8005d9c:	4b02      	ldr	r3, [pc, #8]	; (8005da8 <main+0x19c>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
	  if(flag)
 8005da2:	e753      	b.n	8005c4c <main+0x40>
 8005da4:	20000634 	.word	0x20000634
 8005da8:	200005e0 	.word	0x200005e0
 8005dac:	200004ec 	.word	0x200004ec
 8005db0:	200005fc 	.word	0x200005fc
 8005db4:	08008b70 	.word	0x08008b70
 8005db8:	2000060c 	.word	0x2000060c
 8005dbc:	20000008 	.word	0x20000008
 8005dc0:	408f4000 	.word	0x408f4000
 8005dc4:	08008b84 	.word	0x08008b84
 8005dc8:	49776020 	.word	0x49776020
 8005dcc:	08008b98 	.word	0x08008b98
 8005dd0:	08008ba8 	.word	0x08008ba8
 8005dd4:	200005e8 	.word	0x200005e8
 8005dd8:	20000628 	.word	0x20000628
 8005ddc:	08008bb8 	.word	0x08008bb8

08005de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b094      	sub	sp, #80	; 0x50
 8005de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dea:	2228      	movs	r2, #40	; 0x28
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fcfe 	bl	80067f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e04:	1d3b      	adds	r3, r7, #4
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	60da      	str	r2, [r3, #12]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e22:	2302      	movs	r3, #2
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8005e2c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8005e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fd feae 	bl	8003b98 <HAL_RCC_OscConfig>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005e42:	f000 f90b 	bl	800605c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e46:	230f      	movs	r3, #15
 8005e48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	2102      	movs	r1, #2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe f8fc 	bl	8004060 <HAL_RCC_ClockConfig>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005e6e:	f000 f8f5 	bl	800605c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005e72:	2302      	movs	r3, #2
 8005e74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8005e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe faac 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005e8a:	f000 f8e7 	bl	800605c <Error_Handler>
  }
}
 8005e8e:	bf00      	nop
 8005e90:	3750      	adds	r7, #80	; 0x50
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <calculatePPM>:

/* USER CODE BEGIN 4 */
//Calculation of PPM
 void calculatePPM()
 {
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
   double lgPPM;
   a= 1.5020682;
 8005e9e:	4b62      	ldr	r3, [pc, #392]	; (8006028 <calculatePPM+0x190>)
 8005ea0:	4a62      	ldr	r2, [pc, #392]	; (800602c <calculatePPM+0x194>)
 8005ea2:	601a      	str	r2, [r3, #0]
   	b = -0.9;
 8005ea4:	4b62      	ldr	r3, [pc, #392]	; (8006030 <calculatePPM+0x198>)
 8005ea6:	4a63      	ldr	r2, [pc, #396]	; (8006034 <calculatePPM+0x19c>)
 8005ea8:	601a      	str	r2, [r3, #0]
   Vrl = (double)ADC_data*Vadc_33;             // For 5V Vcc use Vadc_5
 8005eaa:	4b63      	ldr	r3, [pc, #396]	; (8006038 <calculatePPM+0x1a0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fa fab2 	bl	8000418 <__aeabi_f2d>
 8005eb4:	a458      	add	r4, pc, #352	; (adr r4, 8006018 <calculatePPM+0x180>)
 8005eb6:	cc18      	ldmia	r4, {r3, r4}
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4623      	mov	r3, r4
 8005ebc:	f7fa fb00 	bl	80004c0 <__aeabi_dmul>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4a5d      	ldr	r2, [pc, #372]	; (800603c <calculatePPM+0x1a4>)
 8005ec6:	e882 0018 	stmia.w	r2, {r3, r4}
  // Rs = (3.3 - Vrl)/Vrl;                   // Calculate sensor resistance
   Rs= (Rl*5 - Vrl*Rl)/Vrl;
 8005eca:	f04f 0000 	mov.w	r0, #0
 8005ece:	495c      	ldr	r1, [pc, #368]	; (8006040 <calculatePPM+0x1a8>)
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	4b5b      	ldr	r3, [pc, #364]	; (8006044 <calculatePPM+0x1ac>)
 8005ed6:	f7fa faf3 	bl	80004c0 <__aeabi_dmul>
 8005eda:	4603      	mov	r3, r0
 8005edc:	460c      	mov	r4, r1
 8005ede:	461d      	mov	r5, r3
 8005ee0:	4626      	mov	r6, r4
 8005ee2:	4b56      	ldr	r3, [pc, #344]	; (800603c <calculatePPM+0x1a4>)
 8005ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	4c54      	ldr	r4, [pc, #336]	; (8006040 <calculatePPM+0x1a8>)
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	f7fa fae5 	bl	80004c0 <__aeabi_dmul>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	461a      	mov	r2, r3
 8005efc:	4623      	mov	r3, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	4631      	mov	r1, r6
 8005f02:	f7fa f929 	bl	8000158 <__aeabi_dsub>
 8005f06:	4603      	mov	r3, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4b4b      	ldr	r3, [pc, #300]	; (800603c <calculatePPM+0x1a4>)
 8005f10:	cb18      	ldmia	r3, {r3, r4}
 8005f12:	461a      	mov	r2, r3
 8005f14:	4623      	mov	r3, r4
 8005f16:	f7fa fbfd 	bl	8000714 <__aeabi_ddiv>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	4a4a      	ldr	r2, [pc, #296]	; (8006048 <calculatePPM+0x1b0>)
 8005f20:	e882 0018 	stmia.w	r2, {r3, r4}
   RO = exp(log(a /414.14)/ b);
 8005f24:	4b40      	ldr	r3, [pc, #256]	; (8006028 <calculatePPM+0x190>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fa fa75 	bl	8000418 <__aeabi_f2d>
 8005f2e:	a33c      	add	r3, pc, #240	; (adr r3, 8006020 <calculatePPM+0x188>)
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f7fa fbee 	bl	8000714 <__aeabi_ddiv>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	4621      	mov	r1, r4
 8005f40:	f001 f912 	bl	8007168 <log>
 8005f44:	4604      	mov	r4, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	4b39      	ldr	r3, [pc, #228]	; (8006030 <calculatePPM+0x198>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fa fa63 	bl	8000418 <__aeabi_f2d>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fa fbdb 	bl	8000714 <__aeabi_ddiv>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	4618      	mov	r0, r3
 8005f64:	4621      	mov	r1, r4
 8005f66:	f001 f887 	bl	8007078 <exp>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	4621      	mov	r1, r4
 8005f72:	f7fa fd9d 	bl	8000ab0 <__aeabi_d2f>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b34      	ldr	r3, [pc, #208]	; (800604c <calculatePPM+0x1b4>)
 8005f7a:	601a      	str	r2, [r3, #0]
   //Rs = (Vrl - 1) * 10;
   ratio = Rs/RO;                             // Calculate ratio
 8005f7c:	4b32      	ldr	r3, [pc, #200]	; (8006048 <calculatePPM+0x1b0>)
 8005f7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f82:	4b32      	ldr	r3, [pc, #200]	; (800604c <calculatePPM+0x1b4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa fa46 	bl	8000418 <__aeabi_f2d>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa fbbe 	bl	8000714 <__aeabi_ddiv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <calculatePPM+0x1b8>)
 8005f9e:	e882 0018 	stmia.w	r2, {r3, r4}
   lgPPM = (log10(ratio) * -b)+ a;        // Calculate ppm
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <calculatePPM+0x1b8>)
 8005fa4:	cb18      	ldmia	r3, {r3, r4}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	4621      	mov	r1, r4
 8005faa:	f001 f957 	bl	800725c <log10>
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <calculatePPM+0x198>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fa fa2c 	bl	8000418 <__aeabi_f2d>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa fa7a 	bl	80004c0 <__aeabi_dmul>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4625      	mov	r5, r4
 8005fd2:	461c      	mov	r4, r3
 8005fd4:	4b14      	ldr	r3, [pc, #80]	; (8006028 <calculatePPM+0x190>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fa fa1d 	bl	8000418 <__aeabi_f2d>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7fa f8b9 	bl	800015c <__adddf3>
 8005fea:	4603      	mov	r3, r0
 8005fec:	460c      	mov	r4, r1
 8005fee:	e887 0018 	stmia.w	r7, {r3, r4}
   ppm = pow(10,lgPPM);                       // Calculate ppm
 8005ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff6:	f04f 0000 	mov.w	r0, #0
 8005ffa:	4916      	ldr	r1, [pc, #88]	; (8006054 <calculatePPM+0x1bc>)
 8005ffc:	f001 f9a8 	bl	8007350 <pow>
 8006000:	4603      	mov	r3, r0
 8006002:	460c      	mov	r4, r1
 8006004:	4a14      	ldr	r2, [pc, #80]	; (8006058 <calculatePPM+0x1c0>)
 8006006:	e882 0018 	stmia.w	r2, {r3, r4}
 }
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006012:	bf00      	nop
 8006014:	f3af 8000 	nop.w
 8006018:	66666666 	.word	0x66666666
 800601c:	3f4a6666 	.word	0x3f4a6666
 8006020:	70a3d70a 	.word	0x70a3d70a
 8006024:	4079e23d 	.word	0x4079e23d
 8006028:	20000624 	.word	0x20000624
 800602c:	3fc043c5 	.word	0x3fc043c5
 8006030:	200005c8 	.word	0x200005c8
 8006034:	bf666666 	.word	0xbf666666
 8006038:	200005fc 	.word	0x200005fc
 800603c:	200005f0 	.word	0x200005f0
 8006040:	408f4000 	.word	0x408f4000
 8006044:	40140000 	.word	0x40140000
 8006048:	200005d8 	.word	0x200005d8
 800604c:	200005e4 	.word	0x200005e4
 8006050:	20000600 	.word	0x20000600
 8006054:	40240000 	.word	0x40240000
 8006058:	200005e8 	.word	0x200005e8

0800605c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006060:	bf00      	nop
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr

08006068 <ssd1306_Reset>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void ssd1306_Reset(void) {
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800606c:	2201      	movs	r2, #1
 800606e:	2110      	movs	r1, #16
 8006070:	480a      	ldr	r0, [pc, #40]	; (800609c <ssd1306_Reset+0x34>)
 8006072:	f7fc fb4b 	bl	800270c <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8006076:	2200      	movs	r2, #0
 8006078:	2104      	movs	r1, #4
 800607a:	4809      	ldr	r0, [pc, #36]	; (80060a0 <ssd1306_Reset+0x38>)
 800607c:	f7fc fb46 	bl	800270c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006080:	200a      	movs	r0, #10
 8006082:	f7fb fa0b 	bl	800149c <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8006086:	2201      	movs	r2, #1
 8006088:	2104      	movs	r1, #4
 800608a:	4805      	ldr	r0, [pc, #20]	; (80060a0 <ssd1306_Reset+0x38>)
 800608c:	f7fc fb3e 	bl	800270c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006090:	200a      	movs	r0, #10
 8006092:	f7fb fa03 	bl	800149c <HAL_Delay>
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40010800 	.word	0x40010800
 80060a0:	40010c00 	.word	0x40010c00

080060a4 <SSD1306_Init>:
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
}
*/
uint8_t SSD1306_Init(void) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0

	/* Init I2C  */
	ssd1306_I2C_Init();
 80060aa:	f000 fa03 	bl	80064b4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C   */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80060ae:	f644 6320 	movw	r3, #20000	; 0x4e20
 80060b2:	2201      	movs	r2, #1
 80060b4:	2178      	movs	r1, #120	; 0x78
 80060b6:	485b      	ldr	r0, [pc, #364]	; (8006224 <SSD1306_Init+0x180>)
 80060b8:	f7fd f89e 	bl	80031f8 <HAL_I2C_IsDeviceReady>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <SSD1306_Init+0x22>
		/* Return false  */
		return 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e0a9      	b.n	800621a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80060c6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80060ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80060cc:	e002      	b.n	80060d4 <SSD1306_Init+0x30>
		p--;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f9      	bne.n	80060ce <SSD1306_Init+0x2a>

	// Reset OLED
		ssd1306_Reset();
 80060da:	f7ff ffc5 	bl	8006068 <ssd1306_Reset>

	    // Wait for the screen to boot
	HAL_Delay(100);
 80060de:	2064      	movs	r0, #100	; 0x64
 80060e0:	f7fb f9dc 	bl	800149c <HAL_Delay>
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80060e4:	22ae      	movs	r2, #174	; 0xae
 80060e6:	2100      	movs	r1, #0
 80060e8:	2078      	movs	r0, #120	; 0x78
 80060ea:	f000 f9f7 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80060ee:	2220      	movs	r2, #32
 80060f0:	2100      	movs	r1, #0
 80060f2:	2078      	movs	r0, #120	; 0x78
 80060f4:	f000 f9f2 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80060f8:	2210      	movs	r2, #16
 80060fa:	2100      	movs	r1, #0
 80060fc:	2078      	movs	r0, #120	; 0x78
 80060fe:	f000 f9ed 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006102:	22b0      	movs	r2, #176	; 0xb0
 8006104:	2100      	movs	r1, #0
 8006106:	2078      	movs	r0, #120	; 0x78
 8006108:	f000 f9e8 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800610c:	22c8      	movs	r2, #200	; 0xc8
 800610e:	2100      	movs	r1, #0
 8006110:	2078      	movs	r0, #120	; 0x78
 8006112:	f000 f9e3 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	2078      	movs	r0, #120	; 0x78
 800611c:	f000 f9de 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006120:	2210      	movs	r2, #16
 8006122:	2100      	movs	r1, #0
 8006124:	2078      	movs	r0, #120	; 0x78
 8006126:	f000 f9d9 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	2100      	movs	r1, #0
 800612e:	2078      	movs	r0, #120	; 0x78
 8006130:	f000 f9d4 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006134:	2281      	movs	r2, #129	; 0x81
 8006136:	2100      	movs	r1, #0
 8006138:	2078      	movs	r0, #120	; 0x78
 800613a:	f000 f9cf 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	2100      	movs	r1, #0
 8006142:	2078      	movs	r0, #120	; 0x78
 8006144:	f000 f9ca 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006148:	22a1      	movs	r2, #161	; 0xa1
 800614a:	2100      	movs	r1, #0
 800614c:	2078      	movs	r0, #120	; 0x78
 800614e:	f000 f9c5 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006152:	22a6      	movs	r2, #166	; 0xa6
 8006154:	2100      	movs	r1, #0
 8006156:	2078      	movs	r0, #120	; 0x78
 8006158:	f000 f9c0 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800615c:	22a8      	movs	r2, #168	; 0xa8
 800615e:	2100      	movs	r1, #0
 8006160:	2078      	movs	r0, #120	; 0x78
 8006162:	f000 f9bb 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006166:	223f      	movs	r2, #63	; 0x3f
 8006168:	2100      	movs	r1, #0
 800616a:	2078      	movs	r0, #120	; 0x78
 800616c:	f000 f9b6 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006170:	22a4      	movs	r2, #164	; 0xa4
 8006172:	2100      	movs	r1, #0
 8006174:	2078      	movs	r0, #120	; 0x78
 8006176:	f000 f9b1 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800617a:	22d3      	movs	r2, #211	; 0xd3
 800617c:	2100      	movs	r1, #0
 800617e:	2078      	movs	r0, #120	; 0x78
 8006180:	f000 f9ac 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006184:	2200      	movs	r2, #0
 8006186:	2100      	movs	r1, #0
 8006188:	2078      	movs	r0, #120	; 0x78
 800618a:	f000 f9a7 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800618e:	22d5      	movs	r2, #213	; 0xd5
 8006190:	2100      	movs	r1, #0
 8006192:	2078      	movs	r0, #120	; 0x78
 8006194:	f000 f9a2 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006198:	22f0      	movs	r2, #240	; 0xf0
 800619a:	2100      	movs	r1, #0
 800619c:	2078      	movs	r0, #120	; 0x78
 800619e:	f000 f99d 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80061a2:	22d9      	movs	r2, #217	; 0xd9
 80061a4:	2100      	movs	r1, #0
 80061a6:	2078      	movs	r0, #120	; 0x78
 80061a8:	f000 f998 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80061ac:	2222      	movs	r2, #34	; 0x22
 80061ae:	2100      	movs	r1, #0
 80061b0:	2078      	movs	r0, #120	; 0x78
 80061b2:	f000 f993 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80061b6:	22da      	movs	r2, #218	; 0xda
 80061b8:	2100      	movs	r1, #0
 80061ba:	2078      	movs	r0, #120	; 0x78
 80061bc:	f000 f98e 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80061c0:	2212      	movs	r2, #18
 80061c2:	2100      	movs	r1, #0
 80061c4:	2078      	movs	r0, #120	; 0x78
 80061c6:	f000 f989 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80061ca:	22db      	movs	r2, #219	; 0xdb
 80061cc:	2100      	movs	r1, #0
 80061ce:	2078      	movs	r0, #120	; 0x78
 80061d0:	f000 f984 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80061d4:	2220      	movs	r2, #32
 80061d6:	2100      	movs	r1, #0
 80061d8:	2078      	movs	r0, #120	; 0x78
 80061da:	f000 f97f 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80061de:	228d      	movs	r2, #141	; 0x8d
 80061e0:	2100      	movs	r1, #0
 80061e2:	2078      	movs	r0, #120	; 0x78
 80061e4:	f000 f97a 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80061e8:	2214      	movs	r2, #20
 80061ea:	2100      	movs	r1, #0
 80061ec:	2078      	movs	r0, #120	; 0x78
 80061ee:	f000 f975 	bl	80064dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80061f2:	22af      	movs	r2, #175	; 0xaf
 80061f4:	2100      	movs	r1, #0
 80061f6:	2078      	movs	r0, #120	; 0x78
 80061f8:	f000 f970 	bl	80064dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80061fc:	2000      	movs	r0, #0
 80061fe:	f000 f82d 	bl	800625c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8006202:	f000 f813 	bl	800622c <SSD1306_UpdateScreen>
	//SSD1306_UpdateScreen();

	/* Set default values */
	SSD1306.CurrentX = 0;
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <SSD1306_Init+0x184>)
 8006208:	2200      	movs	r2, #0
 800620a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <SSD1306_Init+0x184>)
 800620e:	2200      	movs	r2, #0
 8006210:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <SSD1306_Init+0x184>)
 8006214:	2201      	movs	r2, #1
 8006216:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8006218:	2301      	movs	r3, #1
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000570 	.word	0x20000570
 8006228:	200004a0 	.word	0x200004a0

0800622c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af02      	add	r7, sp, #8
	SSD1306_Buffer_all[0] = 0x40;
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <SSD1306_UpdateScreen+0x28>)
 8006234:	2240      	movs	r2, #64	; 0x40
 8006236:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDR, SSD1306_Buffer_all, SSD1306_WIDTH * SSD1306_HEIGHT / 8 + 1, 1000);
 8006238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	f240 4301 	movw	r3, #1025	; 0x401
 8006242:	4a04      	ldr	r2, [pc, #16]	; (8006254 <SSD1306_UpdateScreen+0x28>)
 8006244:	2178      	movs	r1, #120	; 0x78
 8006246:	4804      	ldr	r0, [pc, #16]	; (8006258 <SSD1306_UpdateScreen+0x2c>)
 8006248:	f7fc fb7c 	bl	8002944 <HAL_I2C_Master_Transmit>
	/*while(HAL_DMA_GetState(hi2c1.hdmatx) != HAL_DMA_STATE_READY)
	{
		HAL_Delay(1); //Change for your RTOS
	}*/
}
 800624c:	bf00      	nop
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	2000009c 	.word	0x2000009c
 8006258:	20000570 	.word	0x20000570

0800625c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(uint8_t color) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <SSD1306_Fill+0x2c>)
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <SSD1306_Fill+0x18>
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <SSD1306_Fill+0x1a>
 8006274:	23ff      	movs	r3, #255	; 0xff
 8006276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800627a:	4619      	mov	r1, r3
 800627c:	f000 fab8 	bl	80067f0 <memset>
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000010 	.word	0x20000010

0800628c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color) {
 800628c:	b490      	push	{r4, r7}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	80fb      	strh	r3, [r7, #6]
 8006296:	460b      	mov	r3, r1
 8006298:	80bb      	strh	r3, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	70fb      	strb	r3, [r7, #3]
	if (
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	2b7f      	cmp	r3, #127	; 0x7f
 80062a2:	d850      	bhi.n	8006346 <SSD1306_DrawPixel+0xba>
		x >= SSD1306_WIDTH ||
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	2b3f      	cmp	r3, #63	; 0x3f
 80062a8:	d84d      	bhi.n	8006346 <SSD1306_DrawPixel+0xba>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80062aa:	4b29      	ldr	r3, [pc, #164]	; (8006350 <SSD1306_DrawPixel+0xc4>)
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <SSD1306_DrawPixel+0x34>
		color = (uint8_t)!color;
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d11e      	bne.n	8006304 <SSD1306_DrawPixel+0x78>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <SSD1306_DrawPixel+0xc8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	88f9      	ldrh	r1, [r7, #6]
 80062cc:	88ba      	ldrh	r2, [r7, #4]
 80062ce:	08d2      	lsrs	r2, r2, #3
 80062d0:	b294      	uxth	r4, r2
 80062d2:	4622      	mov	r2, r4
 80062d4:	01d2      	lsls	r2, r2, #7
 80062d6:	440a      	add	r2, r1
 80062d8:	4413      	add	r3, r2
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <SSD1306_DrawPixel+0xc8>)
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	88f8      	ldrh	r0, [r7, #6]
 80062e0:	4621      	mov	r1, r4
 80062e2:	01c9      	lsls	r1, r1, #7
 80062e4:	4401      	add	r1, r0
 80062e6:	440a      	add	r2, r1
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	b251      	sxtb	r1, r2
 80062ec:	88ba      	ldrh	r2, [r7, #4]
 80062ee:	f002 0207 	and.w	r2, r2, #7
 80062f2:	2001      	movs	r0, #1
 80062f4:	fa00 f202 	lsl.w	r2, r0, r2
 80062f8:	b252      	sxtb	r2, r2
 80062fa:	430a      	orrs	r2, r1
 80062fc:	b252      	sxtb	r2, r2
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e021      	b.n	8006348 <SSD1306_DrawPixel+0xbc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <SSD1306_DrawPixel+0xc8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	88f9      	ldrh	r1, [r7, #6]
 800630a:	88ba      	ldrh	r2, [r7, #4]
 800630c:	08d2      	lsrs	r2, r2, #3
 800630e:	b294      	uxth	r4, r2
 8006310:	4622      	mov	r2, r4
 8006312:	01d2      	lsls	r2, r2, #7
 8006314:	440a      	add	r2, r1
 8006316:	4413      	add	r3, r2
 8006318:	4a0e      	ldr	r2, [pc, #56]	; (8006354 <SSD1306_DrawPixel+0xc8>)
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	88f8      	ldrh	r0, [r7, #6]
 800631e:	4621      	mov	r1, r4
 8006320:	01c9      	lsls	r1, r1, #7
 8006322:	4401      	add	r1, r0
 8006324:	440a      	add	r2, r1
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	b251      	sxtb	r1, r2
 800632a:	88ba      	ldrh	r2, [r7, #4]
 800632c:	f002 0207 	and.w	r2, r2, #7
 8006330:	2001      	movs	r0, #1
 8006332:	fa00 f202 	lsl.w	r2, r0, r2
 8006336:	b252      	sxtb	r2, r2
 8006338:	43d2      	mvns	r2, r2
 800633a:	b252      	sxtb	r2, r2
 800633c:	400a      	ands	r2, r1
 800633e:	b252      	sxtb	r2, r2
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e000      	b.n	8006348 <SSD1306_DrawPixel+0xbc>
		return;
 8006346:	bf00      	nop
	}
}
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bc90      	pop	{r4, r7}
 800634e:	4770      	bx	lr
 8006350:	200004a0 	.word	0x200004a0
 8006354:	20000010 	.word	0x20000010

08006358 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	460a      	mov	r2, r1
 8006362:	80fb      	strh	r3, [r7, #6]
 8006364:	4613      	mov	r3, r2
 8006366:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006368:	4a05      	ldr	r2, [pc, #20]	; (8006380 <SSD1306_GotoXY+0x28>)
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800636e:	4a04      	ldr	r2, [pc, #16]	; (8006380 <SSD1306_GotoXY+0x28>)
 8006370:	88bb      	ldrh	r3, [r7, #4]
 8006372:	8053      	strh	r3, [r2, #2]
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	200004a0 	.word	0x200004a0

08006384 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	6039      	str	r1, [r7, #0]
 800638e:	71fb      	strb	r3, [r7, #7]
 8006390:	4613      	mov	r3, r2
 8006392:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	b = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e04e      	b.n	800643c <SSD1306_Putc+0xb8>
		for (j = 0; j < Font->FontWidth; j++) {
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e042      	b.n	800642a <SSD1306_Putc+0xa6>
			if ((Font->data[ch*Font->CharBytes + b/8] >> b%8) & 1) {
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	7889      	ldrb	r1, [r1, #2]
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4619      	mov	r1, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	440b      	add	r3, r1
 80063ba:	4413      	add	r3, r2
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	fa42 f303 	asr.w	r3, r2, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d010      	beq.n	80063f4 <SSD1306_Putc+0x70>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t) color);
 80063d2:	4b24      	ldr	r3, [pc, #144]	; (8006464 <SSD1306_Putc+0xe0>)
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	4413      	add	r3, r2
 80063dc:	b298      	uxth	r0, r3
 80063de:	4b21      	ldr	r3, [pc, #132]	; (8006464 <SSD1306_Putc+0xe0>)
 80063e0:	885a      	ldrh	r2, [r3, #2]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	4413      	add	r3, r2
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	79ba      	ldrb	r2, [r7, #6]
 80063ec:	4619      	mov	r1, r3
 80063ee:	f7ff ff4d 	bl	800628c <SSD1306_DrawPixel>
 80063f2:	e014      	b.n	800641e <SSD1306_Putc+0x9a>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (uint8_t)!color);
 80063f4:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <SSD1306_Putc+0xe0>)
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	4413      	add	r3, r2
 80063fe:	b298      	uxth	r0, r3
 8006400:	4b18      	ldr	r3, [pc, #96]	; (8006464 <SSD1306_Putc+0xe0>)
 8006402:	885a      	ldrh	r2, [r3, #2]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	b29b      	uxth	r3, r3
 8006408:	4413      	add	r3, r2
 800640a:	b299      	uxth	r1, r3
 800640c:	79bb      	ldrb	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bf0c      	ite	eq
 8006412:	2301      	moveq	r3, #1
 8006414:	2300      	movne	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	f7ff ff37 	bl	800628c <SSD1306_DrawPixel>
			}
			b++;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3301      	adds	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
		for (j = 0; j < Font->FontWidth; j++) {
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	429a      	cmp	r2, r3
 8006434:	d8b6      	bhi.n	80063a4 <SSD1306_Putc+0x20>
	for (i = 0; i < Font->FontHeight; i++) {
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	3301      	adds	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	461a      	mov	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	429a      	cmp	r2, r3
 8006446:	d8aa      	bhi.n	800639e <SSD1306_Putc+0x1a>
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <SSD1306_Putc+0xe0>)
 800644a:	881a      	ldrh	r2, [r3, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	4413      	add	r3, r2
 8006454:	b29a      	uxth	r2, r3
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <SSD1306_Putc+0xe0>)
 8006458:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800645a:	79fb      	ldrb	r3, [r7, #7]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	200004a0 	.word	0x200004a0

08006468 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, uint8_t color) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006476:	e012      	b.n	800649e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	79fa      	ldrb	r2, [r7, #7]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff7f 	bl	8006384 <SSD1306_Putc>
 8006486:	4603      	mov	r3, r0
 8006488:	461a      	mov	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d002      	beq.n	8006498 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	e008      	b.n	80064aa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e8      	bne.n	8006478 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <ssd1306_I2C_Init+0x24>)
 80064bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80064be:	e002      	b.n	80064c6 <ssd1306_I2C_Init+0x12>
		p--;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f9      	bne.n	80064c0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	0003d090 	.word	0x0003d090

080064dc <ssd1306_I2C_Write>:
	HAL_I2C_Master_Transmit(&hi2c2, address, &reg, 1, 100);
	HAL_I2C_Master_Transmit_DMA(&hi2c2, address, data, count);
}


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
 80064e6:	460b      	mov	r3, r1
 80064e8:	71bb      	strb	r3, [r7, #6]
 80064ea:	4613      	mov	r3, r2
 80064ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80064ee:	79bb      	ldrb	r3, [r7, #6]
 80064f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80064f2:	797b      	ldrb	r3, [r7, #5]
 80064f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	b299      	uxth	r1, r3
 80064fa:	f107 020c 	add.w	r2, r7, #12
 80064fe:	230a      	movs	r3, #10
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	2302      	movs	r3, #2
 8006504:	4803      	ldr	r0, [pc, #12]	; (8006514 <ssd1306_I2C_Write+0x38>)
 8006506:	f7fc fa1d 	bl	8002944 <HAL_I2C_Master_Transmit>
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000570 	.word	0x20000570

08006518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800651e:	4a15      	ldr	r2, [pc, #84]	; (8006574 <HAL_MspInit+0x5c>)
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_MspInit+0x5c>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	6193      	str	r3, [r2, #24]
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <HAL_MspInit+0x5c>)
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	60bb      	str	r3, [r7, #8]
 8006534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <HAL_MspInit+0x5c>)
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <HAL_MspInit+0x5c>)
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006540:	61d3      	str	r3, [r2, #28]
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <HAL_MspInit+0x5c>)
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <HAL_MspInit+0x60>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	4a04      	ldr	r2, [pc, #16]	; (8006578 <HAL_MspInit+0x60>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr
 8006574:	40021000 	.word	0x40021000
 8006578:	40010000 	.word	0x40010000

0800657c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800658c:	e7fe      	b.n	800658c <HardFault_Handler+0x4>

0800658e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800658e:	b480      	push	{r7}
 8006590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006592:	e7fe      	b.n	8006592 <MemManage_Handler+0x4>

08006594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006598:	e7fe      	b.n	8006598 <BusFault_Handler+0x4>

0800659a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800659a:	b480      	push	{r7}
 800659c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800659e:	e7fe      	b.n	800659e <UsageFault_Handler+0x4>

080065a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065b0:	bf00      	nop
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065c8:	f7fa ff4c 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065cc:	bf00      	nop
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80065d4:	4802      	ldr	r0, [pc, #8]	; (80065e0 <ADC1_2_IRQHandler+0x10>)
 80065d6:	f7fb f85b 	bl	8001690 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80065da:	bf00      	nop
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	200004ec 	.word	0x200004ec

080065e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	counter++;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <TIM2_IRQHandler+0x20>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <TIM2_IRQHandler+0x20>)
 80065f2:	801a      	strh	r2, [r3, #0]
	flag = 1;
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <TIM2_IRQHandler+0x24>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80065fa:	4804      	ldr	r0, [pc, #16]	; (800660c <TIM2_IRQHandler+0x28>)
 80065fc:	f7fe f8a9 	bl	8004752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}
 8006604:	200005f8 	.word	0x200005f8
 8006608:	200005e0 	.word	0x200005e0
 800660c:	20000634 	.word	0x20000634

08006610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <SystemInit+0x5c>)
 8006616:	4b15      	ldr	r3, [pc, #84]	; (800666c <SystemInit+0x5c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006620:	4912      	ldr	r1, [pc, #72]	; (800666c <SystemInit+0x5c>)
 8006622:	4b12      	ldr	r3, [pc, #72]	; (800666c <SystemInit+0x5c>)
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <SystemInit+0x60>)
 8006628:	4013      	ands	r3, r2
 800662a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800662c:	4a0f      	ldr	r2, [pc, #60]	; (800666c <SystemInit+0x5c>)
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <SystemInit+0x5c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800663c:	4a0b      	ldr	r2, [pc, #44]	; (800666c <SystemInit+0x5c>)
 800663e:	4b0b      	ldr	r3, [pc, #44]	; (800666c <SystemInit+0x5c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006646:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <SystemInit+0x5c>)
 800664a:	4b08      	ldr	r3, [pc, #32]	; (800666c <SystemInit+0x5c>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006652:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <SystemInit+0x5c>)
 8006656:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800665a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <SystemInit+0x64>)
 800665e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006662:	609a      	str	r2, [r3, #8]
#endif 
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr
 800666c:	40021000 	.word	0x40021000
 8006670:	f8ff0000 	.word	0xf8ff0000
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	609a      	str	r2, [r3, #8]
 800668a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800668c:	463b      	mov	r3, r7
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006694:	4b1e      	ldr	r3, [pc, #120]	; (8006710 <MX_TIM2_Init+0x98>)
 8006696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800669a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56000;
 800669c:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <MX_TIM2_Init+0x98>)
 800669e:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 80066a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a4:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <MX_TIM2_Init+0x98>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <MX_TIM2_Init+0x98>)
 80066ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80066b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066b2:	4b17      	ldr	r3, [pc, #92]	; (8006710 <MX_TIM2_Init+0x98>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <MX_TIM2_Init+0x98>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066be:	4814      	ldr	r0, [pc, #80]	; (8006710 <MX_TIM2_Init+0x98>)
 80066c0:	f7fe f802 	bl	80046c8 <HAL_TIM_Base_Init>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80066ca:	f7ff fcc7 	bl	800605c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80066d4:	f107 0308 	add.w	r3, r7, #8
 80066d8:	4619      	mov	r1, r3
 80066da:	480d      	ldr	r0, [pc, #52]	; (8006710 <MX_TIM2_Init+0x98>)
 80066dc:	f7fe f941 	bl	8004962 <HAL_TIM_ConfigClockSource>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80066e6:	f7ff fcb9 	bl	800605c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066ea:	2300      	movs	r3, #0
 80066ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80066f2:	463b      	mov	r3, r7
 80066f4:	4619      	mov	r1, r3
 80066f6:	4806      	ldr	r0, [pc, #24]	; (8006710 <MX_TIM2_Init+0x98>)
 80066f8:	f7fe fb47 	bl	8004d8a <HAL_TIMEx_MasterConfigSynchronization>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006702:	f7ff fcab 	bl	800605c <Error_Handler>
  }

}
 8006706:	bf00      	nop
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000634 	.word	0x20000634

08006714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006724:	d113      	bne.n	800674e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006726:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <HAL_TIM_Base_MspInit+0x44>)
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_TIM_Base_MspInit+0x44>)
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	61d3      	str	r3, [r2, #28]
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <HAL_TIM_Base_MspInit+0x44>)
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800673e:	2200      	movs	r2, #0
 8006740:	2100      	movs	r1, #0
 8006742:	201c      	movs	r0, #28
 8006744:	f7fb fe4d 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006748:	201c      	movs	r0, #28
 800674a:	f7fb fe66 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000

0800675c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800675c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800675e:	e003      	b.n	8006768 <LoopCopyDataInit>

08006760 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006762:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006764:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006766:	3104      	adds	r1, #4

08006768 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006768:	480a      	ldr	r0, [pc, #40]	; (8006794 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800676c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800676e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006770:	d3f6      	bcc.n	8006760 <CopyDataInit>
  ldr r2, =_sbss
 8006772:	4a0a      	ldr	r2, [pc, #40]	; (800679c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006774:	e002      	b.n	800677c <LoopFillZerobss>

08006776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006776:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006778:	f842 3b04 	str.w	r3, [r2], #4

0800677c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800677c:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800677e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006780:	d3f9      	bcc.n	8006776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006782:	f7ff ff45 	bl	8006610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006786:	f000 f80f 	bl	80067a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800678a:	f7ff fa3f 	bl	8005c0c <main>
  bx lr
 800678e:	4770      	bx	lr
  ldr r3, =_sidata
 8006790:	080096a8 	.word	0x080096a8
  ldr r0, =_sdata
 8006794:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006798:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 800679c:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80067a0:	20000678 	.word	0x20000678

080067a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80067a4:	e7fe      	b.n	80067a4 <CAN1_RX1_IRQHandler>
	...

080067a8 <__libc_init_array>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	2500      	movs	r5, #0
 80067ac:	4e0c      	ldr	r6, [pc, #48]	; (80067e0 <__libc_init_array+0x38>)
 80067ae:	4c0d      	ldr	r4, [pc, #52]	; (80067e4 <__libc_init_array+0x3c>)
 80067b0:	1ba4      	subs	r4, r4, r6
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	42a5      	cmp	r5, r4
 80067b6:	d109      	bne.n	80067cc <__libc_init_array+0x24>
 80067b8:	f002 f9b8 	bl	8008b2c <_init>
 80067bc:	2500      	movs	r5, #0
 80067be:	4e0a      	ldr	r6, [pc, #40]	; (80067e8 <__libc_init_array+0x40>)
 80067c0:	4c0a      	ldr	r4, [pc, #40]	; (80067ec <__libc_init_array+0x44>)
 80067c2:	1ba4      	subs	r4, r4, r6
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	42a5      	cmp	r5, r4
 80067c8:	d105      	bne.n	80067d6 <__libc_init_array+0x2e>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067d0:	4798      	blx	r3
 80067d2:	3501      	adds	r5, #1
 80067d4:	e7ee      	b.n	80067b4 <__libc_init_array+0xc>
 80067d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067da:	4798      	blx	r3
 80067dc:	3501      	adds	r5, #1
 80067de:	e7f2      	b.n	80067c6 <__libc_init_array+0x1e>
 80067e0:	080096a0 	.word	0x080096a0
 80067e4:	080096a0 	.word	0x080096a0
 80067e8:	080096a0 	.word	0x080096a0
 80067ec:	080096a4 	.word	0x080096a4

080067f0 <memset>:
 80067f0:	4603      	mov	r3, r0
 80067f2:	4402      	add	r2, r0
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d100      	bne.n	80067fa <memset+0xa>
 80067f8:	4770      	bx	lr
 80067fa:	f803 1b01 	strb.w	r1, [r3], #1
 80067fe:	e7f9      	b.n	80067f4 <memset+0x4>

08006800 <sniprintf>:
 8006800:	b40c      	push	{r2, r3}
 8006802:	b530      	push	{r4, r5, lr}
 8006804:	4b17      	ldr	r3, [pc, #92]	; (8006864 <sniprintf+0x64>)
 8006806:	1e0c      	subs	r4, r1, #0
 8006808:	b09d      	sub	sp, #116	; 0x74
 800680a:	681d      	ldr	r5, [r3, #0]
 800680c:	da08      	bge.n	8006820 <sniprintf+0x20>
 800680e:	238b      	movs	r3, #139	; 0x8b
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	b01d      	add	sp, #116	; 0x74
 8006818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800681c:	b002      	add	sp, #8
 800681e:	4770      	bx	lr
 8006820:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006824:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006828:	bf0c      	ite	eq
 800682a:	4623      	moveq	r3, r4
 800682c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006838:	9002      	str	r0, [sp, #8]
 800683a:	9006      	str	r0, [sp, #24]
 800683c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006840:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006842:	ab21      	add	r3, sp, #132	; 0x84
 8006844:	a902      	add	r1, sp, #8
 8006846:	4628      	mov	r0, r5
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	f000 f869 	bl	8006920 <_svfiprintf_r>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	bfbc      	itt	lt
 8006852:	238b      	movlt	r3, #139	; 0x8b
 8006854:	602b      	strlt	r3, [r5, #0]
 8006856:	2c00      	cmp	r4, #0
 8006858:	d0dd      	beq.n	8006816 <sniprintf+0x16>
 800685a:	2200      	movs	r2, #0
 800685c:	9b02      	ldr	r3, [sp, #8]
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e7d9      	b.n	8006816 <sniprintf+0x16>
 8006862:	bf00      	nop
 8006864:	20000018 	.word	0x20000018

08006868 <__ssputs_r>:
 8006868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800686c:	688e      	ldr	r6, [r1, #8]
 800686e:	4682      	mov	sl, r0
 8006870:	429e      	cmp	r6, r3
 8006872:	460c      	mov	r4, r1
 8006874:	4691      	mov	r9, r2
 8006876:	4698      	mov	r8, r3
 8006878:	d835      	bhi.n	80068e6 <__ssputs_r+0x7e>
 800687a:	898a      	ldrh	r2, [r1, #12]
 800687c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006880:	d031      	beq.n	80068e6 <__ssputs_r+0x7e>
 8006882:	2302      	movs	r3, #2
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	6909      	ldr	r1, [r1, #16]
 8006888:	1a6f      	subs	r7, r5, r1
 800688a:	6965      	ldr	r5, [r4, #20]
 800688c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006890:	fb95 f5f3 	sdiv	r5, r5, r3
 8006894:	f108 0301 	add.w	r3, r8, #1
 8006898:	443b      	add	r3, r7
 800689a:	429d      	cmp	r5, r3
 800689c:	bf38      	it	cc
 800689e:	461d      	movcc	r5, r3
 80068a0:	0553      	lsls	r3, r2, #21
 80068a2:	d531      	bpl.n	8006908 <__ssputs_r+0xa0>
 80068a4:	4629      	mov	r1, r5
 80068a6:	f000 fb47 	bl	8006f38 <_malloc_r>
 80068aa:	4606      	mov	r6, r0
 80068ac:	b950      	cbnz	r0, 80068c4 <__ssputs_r+0x5c>
 80068ae:	230c      	movs	r3, #12
 80068b0:	f8ca 3000 	str.w	r3, [sl]
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	463a      	mov	r2, r7
 80068c6:	6921      	ldr	r1, [r4, #16]
 80068c8:	f000 fac4 	bl	8006e54 <memcpy>
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	6126      	str	r6, [r4, #16]
 80068da:	443e      	add	r6, r7
 80068dc:	6026      	str	r6, [r4, #0]
 80068de:	4646      	mov	r6, r8
 80068e0:	6165      	str	r5, [r4, #20]
 80068e2:	1bed      	subs	r5, r5, r7
 80068e4:	60a5      	str	r5, [r4, #8]
 80068e6:	4546      	cmp	r6, r8
 80068e8:	bf28      	it	cs
 80068ea:	4646      	movcs	r6, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	4632      	mov	r2, r6
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	f000 faba 	bl	8006e6a <memmove>
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	2000      	movs	r0, #0
 80068fa:	1b9b      	subs	r3, r3, r6
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	441e      	add	r6, r3
 8006902:	6026      	str	r6, [r4, #0]
 8006904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006908:	462a      	mov	r2, r5
 800690a:	f000 fb73 	bl	8006ff4 <_realloc_r>
 800690e:	4606      	mov	r6, r0
 8006910:	2800      	cmp	r0, #0
 8006912:	d1e1      	bne.n	80068d8 <__ssputs_r+0x70>
 8006914:	6921      	ldr	r1, [r4, #16]
 8006916:	4650      	mov	r0, sl
 8006918:	f000 fac2 	bl	8006ea0 <_free_r>
 800691c:	e7c7      	b.n	80068ae <__ssputs_r+0x46>
	...

08006920 <_svfiprintf_r>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	b09d      	sub	sp, #116	; 0x74
 8006926:	9303      	str	r3, [sp, #12]
 8006928:	898b      	ldrh	r3, [r1, #12]
 800692a:	4680      	mov	r8, r0
 800692c:	061c      	lsls	r4, r3, #24
 800692e:	460d      	mov	r5, r1
 8006930:	4616      	mov	r6, r2
 8006932:	d50f      	bpl.n	8006954 <_svfiprintf_r+0x34>
 8006934:	690b      	ldr	r3, [r1, #16]
 8006936:	b96b      	cbnz	r3, 8006954 <_svfiprintf_r+0x34>
 8006938:	2140      	movs	r1, #64	; 0x40
 800693a:	f000 fafd 	bl	8006f38 <_malloc_r>
 800693e:	6028      	str	r0, [r5, #0]
 8006940:	6128      	str	r0, [r5, #16]
 8006942:	b928      	cbnz	r0, 8006950 <_svfiprintf_r+0x30>
 8006944:	230c      	movs	r3, #12
 8006946:	f8c8 3000 	str.w	r3, [r8]
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	e0c4      	b.n	8006ada <_svfiprintf_r+0x1ba>
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	616b      	str	r3, [r5, #20]
 8006954:	2300      	movs	r3, #0
 8006956:	9309      	str	r3, [sp, #36]	; 0x24
 8006958:	2320      	movs	r3, #32
 800695a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800695e:	2330      	movs	r3, #48	; 0x30
 8006960:	f04f 0b01 	mov.w	fp, #1
 8006964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006968:	4637      	mov	r7, r6
 800696a:	463c      	mov	r4, r7
 800696c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d13c      	bne.n	80069ee <_svfiprintf_r+0xce>
 8006974:	ebb7 0a06 	subs.w	sl, r7, r6
 8006978:	d00b      	beq.n	8006992 <_svfiprintf_r+0x72>
 800697a:	4653      	mov	r3, sl
 800697c:	4632      	mov	r2, r6
 800697e:	4629      	mov	r1, r5
 8006980:	4640      	mov	r0, r8
 8006982:	f7ff ff71 	bl	8006868 <__ssputs_r>
 8006986:	3001      	adds	r0, #1
 8006988:	f000 80a2 	beq.w	8006ad0 <_svfiprintf_r+0x1b0>
 800698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698e:	4453      	add	r3, sl
 8006990:	9309      	str	r3, [sp, #36]	; 0x24
 8006992:	783b      	ldrb	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 809b 	beq.w	8006ad0 <_svfiprintf_r+0x1b0>
 800699a:	2300      	movs	r3, #0
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	9307      	str	r3, [sp, #28]
 80069a4:	9205      	str	r2, [sp, #20]
 80069a6:	9306      	str	r3, [sp, #24]
 80069a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ac:	931a      	str	r3, [sp, #104]	; 0x68
 80069ae:	2205      	movs	r2, #5
 80069b0:	7821      	ldrb	r1, [r4, #0]
 80069b2:	4850      	ldr	r0, [pc, #320]	; (8006af4 <_svfiprintf_r+0x1d4>)
 80069b4:	f000 fa40 	bl	8006e38 <memchr>
 80069b8:	1c67      	adds	r7, r4, #1
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	b9d8      	cbnz	r0, 80069f6 <_svfiprintf_r+0xd6>
 80069be:	06d9      	lsls	r1, r3, #27
 80069c0:	bf44      	itt	mi
 80069c2:	2220      	movmi	r2, #32
 80069c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069c8:	071a      	lsls	r2, r3, #28
 80069ca:	bf44      	itt	mi
 80069cc:	222b      	movmi	r2, #43	; 0x2b
 80069ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069d2:	7822      	ldrb	r2, [r4, #0]
 80069d4:	2a2a      	cmp	r2, #42	; 0x2a
 80069d6:	d016      	beq.n	8006a06 <_svfiprintf_r+0xe6>
 80069d8:	2100      	movs	r1, #0
 80069da:	200a      	movs	r0, #10
 80069dc:	9a07      	ldr	r2, [sp, #28]
 80069de:	4627      	mov	r7, r4
 80069e0:	783b      	ldrb	r3, [r7, #0]
 80069e2:	3401      	adds	r4, #1
 80069e4:	3b30      	subs	r3, #48	; 0x30
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d950      	bls.n	8006a8c <_svfiprintf_r+0x16c>
 80069ea:	b1c9      	cbz	r1, 8006a20 <_svfiprintf_r+0x100>
 80069ec:	e011      	b.n	8006a12 <_svfiprintf_r+0xf2>
 80069ee:	2b25      	cmp	r3, #37	; 0x25
 80069f0:	d0c0      	beq.n	8006974 <_svfiprintf_r+0x54>
 80069f2:	4627      	mov	r7, r4
 80069f4:	e7b9      	b.n	800696a <_svfiprintf_r+0x4a>
 80069f6:	4a3f      	ldr	r2, [pc, #252]	; (8006af4 <_svfiprintf_r+0x1d4>)
 80069f8:	463c      	mov	r4, r7
 80069fa:	1a80      	subs	r0, r0, r2
 80069fc:	fa0b f000 	lsl.w	r0, fp, r0
 8006a00:	4318      	orrs	r0, r3
 8006a02:	9004      	str	r0, [sp, #16]
 8006a04:	e7d3      	b.n	80069ae <_svfiprintf_r+0x8e>
 8006a06:	9a03      	ldr	r2, [sp, #12]
 8006a08:	1d11      	adds	r1, r2, #4
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	9103      	str	r1, [sp, #12]
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	db01      	blt.n	8006a16 <_svfiprintf_r+0xf6>
 8006a12:	9207      	str	r2, [sp, #28]
 8006a14:	e004      	b.n	8006a20 <_svfiprintf_r+0x100>
 8006a16:	4252      	negs	r2, r2
 8006a18:	f043 0302 	orr.w	r3, r3, #2
 8006a1c:	9207      	str	r2, [sp, #28]
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	783b      	ldrb	r3, [r7, #0]
 8006a22:	2b2e      	cmp	r3, #46	; 0x2e
 8006a24:	d10d      	bne.n	8006a42 <_svfiprintf_r+0x122>
 8006a26:	787b      	ldrb	r3, [r7, #1]
 8006a28:	1c79      	adds	r1, r7, #1
 8006a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a2c:	d132      	bne.n	8006a94 <_svfiprintf_r+0x174>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	3702      	adds	r7, #2
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9203      	str	r2, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfb8      	it	lt
 8006a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	4c2d      	ldr	r4, [pc, #180]	; (8006af8 <_svfiprintf_r+0x1d8>)
 8006a44:	2203      	movs	r2, #3
 8006a46:	7839      	ldrb	r1, [r7, #0]
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 f9f5 	bl	8006e38 <memchr>
 8006a4e:	b138      	cbz	r0, 8006a60 <_svfiprintf_r+0x140>
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	1b00      	subs	r0, r0, r4
 8006a54:	fa03 f000 	lsl.w	r0, r3, r0
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	3701      	adds	r7, #1
 8006a5c:	4303      	orrs	r3, r0
 8006a5e:	9304      	str	r3, [sp, #16]
 8006a60:	7839      	ldrb	r1, [r7, #0]
 8006a62:	2206      	movs	r2, #6
 8006a64:	4825      	ldr	r0, [pc, #148]	; (8006afc <_svfiprintf_r+0x1dc>)
 8006a66:	1c7e      	adds	r6, r7, #1
 8006a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a6c:	f000 f9e4 	bl	8006e38 <memchr>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d035      	beq.n	8006ae0 <_svfiprintf_r+0x1c0>
 8006a74:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <_svfiprintf_r+0x1e0>)
 8006a76:	b9fb      	cbnz	r3, 8006ab8 <_svfiprintf_r+0x198>
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	3307      	adds	r3, #7
 8006a7c:	f023 0307 	bic.w	r3, r3, #7
 8006a80:	3308      	adds	r3, #8
 8006a82:	9303      	str	r3, [sp, #12]
 8006a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a86:	444b      	add	r3, r9
 8006a88:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8a:	e76d      	b.n	8006968 <_svfiprintf_r+0x48>
 8006a8c:	fb00 3202 	mla	r2, r0, r2, r3
 8006a90:	2101      	movs	r1, #1
 8006a92:	e7a4      	b.n	80069de <_svfiprintf_r+0xbe>
 8006a94:	2300      	movs	r3, #0
 8006a96:	240a      	movs	r4, #10
 8006a98:	4618      	mov	r0, r3
 8006a9a:	9305      	str	r3, [sp, #20]
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	783a      	ldrb	r2, [r7, #0]
 8006aa0:	3101      	adds	r1, #1
 8006aa2:	3a30      	subs	r2, #48	; 0x30
 8006aa4:	2a09      	cmp	r2, #9
 8006aa6:	d903      	bls.n	8006ab0 <_svfiprintf_r+0x190>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0ca      	beq.n	8006a42 <_svfiprintf_r+0x122>
 8006aac:	9005      	str	r0, [sp, #20]
 8006aae:	e7c8      	b.n	8006a42 <_svfiprintf_r+0x122>
 8006ab0:	fb04 2000 	mla	r0, r4, r0, r2
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e7f1      	b.n	8006a9c <_svfiprintf_r+0x17c>
 8006ab8:	ab03      	add	r3, sp, #12
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	462a      	mov	r2, r5
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <_svfiprintf_r+0x1e4>)
 8006ac0:	a904      	add	r1, sp, #16
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006acc:	4681      	mov	r9, r0
 8006ace:	d1d9      	bne.n	8006a84 <_svfiprintf_r+0x164>
 8006ad0:	89ab      	ldrh	r3, [r5, #12]
 8006ad2:	065b      	lsls	r3, r3, #25
 8006ad4:	f53f af39 	bmi.w	800694a <_svfiprintf_r+0x2a>
 8006ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ada:	b01d      	add	sp, #116	; 0x74
 8006adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae0:	ab03      	add	r3, sp, #12
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	462a      	mov	r2, r5
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <_svfiprintf_r+0x1e4>)
 8006ae8:	a904      	add	r1, sp, #16
 8006aea:	4640      	mov	r0, r8
 8006aec:	f000 f884 	bl	8006bf8 <_printf_i>
 8006af0:	e7ea      	b.n	8006ac8 <_svfiprintf_r+0x1a8>
 8006af2:	bf00      	nop
 8006af4:	080095e0 	.word	0x080095e0
 8006af8:	080095e6 	.word	0x080095e6
 8006afc:	080095ea 	.word	0x080095ea
 8006b00:	00000000 	.word	0x00000000
 8006b04:	08006869 	.word	0x08006869

08006b08 <_printf_common>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	4691      	mov	r9, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	688a      	ldr	r2, [r1, #8]
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	4606      	mov	r6, r0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfb8      	it	lt
 8006b1a:	4613      	movlt	r3, r2
 8006b1c:	f8c9 3000 	str.w	r3, [r9]
 8006b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b24:	460c      	mov	r4, r1
 8006b26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2a:	b112      	cbz	r2, 8006b32 <_printf_common+0x2a>
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f8c9 3000 	str.w	r3, [r9]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	0699      	lsls	r1, r3, #26
 8006b36:	bf42      	ittt	mi
 8006b38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b3c:	3302      	addmi	r3, #2
 8006b3e:	f8c9 3000 	strmi.w	r3, [r9]
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	f015 0506 	ands.w	r5, r5, #6
 8006b48:	d107      	bne.n	8006b5a <_printf_common+0x52>
 8006b4a:	f104 0a19 	add.w	sl, r4, #25
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	f8d9 2000 	ldr.w	r2, [r9]
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	429d      	cmp	r5, r3
 8006b58:	db2a      	blt.n	8006bb0 <_printf_common+0xa8>
 8006b5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	3300      	adds	r3, #0
 8006b62:	bf18      	it	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	0692      	lsls	r2, r2, #26
 8006b68:	d42f      	bmi.n	8006bca <_printf_common+0xc2>
 8006b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b6e:	4639      	mov	r1, r7
 8006b70:	4630      	mov	r0, r6
 8006b72:	47c0      	blx	r8
 8006b74:	3001      	adds	r0, #1
 8006b76:	d022      	beq.n	8006bbe <_printf_common+0xb6>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	68e5      	ldr	r5, [r4, #12]
 8006b7c:	f003 0306 	and.w	r3, r3, #6
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	bf18      	it	ne
 8006b84:	2500      	movne	r5, #0
 8006b86:	f8d9 2000 	ldr.w	r2, [r9]
 8006b8a:	f04f 0900 	mov.w	r9, #0
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf08      	it	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfc4      	itt	gt
 8006ba0:	1a9b      	subgt	r3, r3, r2
 8006ba2:	18ed      	addgt	r5, r5, r3
 8006ba4:	341a      	adds	r4, #26
 8006ba6:	454d      	cmp	r5, r9
 8006ba8:	d11b      	bne.n	8006be2 <_printf_common+0xda>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d103      	bne.n	8006bc6 <_printf_common+0xbe>
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	e7c1      	b.n	8006b4e <_printf_common+0x46>
 8006bca:	2030      	movs	r0, #48	; 0x30
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bd8:	4422      	add	r2, r4
 8006bda:	3302      	adds	r3, #2
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be0:	e7c3      	b.n	8006b6a <_printf_common+0x62>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4622      	mov	r2, r4
 8006be6:	4639      	mov	r1, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	47c0      	blx	r8
 8006bec:	3001      	adds	r0, #1
 8006bee:	d0e6      	beq.n	8006bbe <_printf_common+0xb6>
 8006bf0:	f109 0901 	add.w	r9, r9, #1
 8006bf4:	e7d7      	b.n	8006ba6 <_printf_common+0x9e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4617      	mov	r7, r2
 8006bfe:	7e0a      	ldrb	r2, [r1, #24]
 8006c00:	b085      	sub	sp, #20
 8006c02:	2a6e      	cmp	r2, #110	; 0x6e
 8006c04:	4698      	mov	r8, r3
 8006c06:	4606      	mov	r6, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c0c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006c10:	f000 80bc 	beq.w	8006d8c <_printf_i+0x194>
 8006c14:	d81a      	bhi.n	8006c4c <_printf_i+0x54>
 8006c16:	2a63      	cmp	r2, #99	; 0x63
 8006c18:	d02e      	beq.n	8006c78 <_printf_i+0x80>
 8006c1a:	d80a      	bhi.n	8006c32 <_printf_i+0x3a>
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	f000 80c8 	beq.w	8006db2 <_printf_i+0x1ba>
 8006c22:	2a58      	cmp	r2, #88	; 0x58
 8006c24:	f000 808a 	beq.w	8006d3c <_printf_i+0x144>
 8006c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006c30:	e02a      	b.n	8006c88 <_printf_i+0x90>
 8006c32:	2a64      	cmp	r2, #100	; 0x64
 8006c34:	d001      	beq.n	8006c3a <_printf_i+0x42>
 8006c36:	2a69      	cmp	r2, #105	; 0x69
 8006c38:	d1f6      	bne.n	8006c28 <_printf_i+0x30>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c42:	d023      	beq.n	8006c8c <_printf_i+0x94>
 8006c44:	1d11      	adds	r1, r2, #4
 8006c46:	6019      	str	r1, [r3, #0]
 8006c48:	6813      	ldr	r3, [r2, #0]
 8006c4a:	e027      	b.n	8006c9c <_printf_i+0xa4>
 8006c4c:	2a73      	cmp	r2, #115	; 0x73
 8006c4e:	f000 80b4 	beq.w	8006dba <_printf_i+0x1c2>
 8006c52:	d808      	bhi.n	8006c66 <_printf_i+0x6e>
 8006c54:	2a6f      	cmp	r2, #111	; 0x6f
 8006c56:	d02a      	beq.n	8006cae <_printf_i+0xb6>
 8006c58:	2a70      	cmp	r2, #112	; 0x70
 8006c5a:	d1e5      	bne.n	8006c28 <_printf_i+0x30>
 8006c5c:	680a      	ldr	r2, [r1, #0]
 8006c5e:	f042 0220 	orr.w	r2, r2, #32
 8006c62:	600a      	str	r2, [r1, #0]
 8006c64:	e003      	b.n	8006c6e <_printf_i+0x76>
 8006c66:	2a75      	cmp	r2, #117	; 0x75
 8006c68:	d021      	beq.n	8006cae <_printf_i+0xb6>
 8006c6a:	2a78      	cmp	r2, #120	; 0x78
 8006c6c:	d1dc      	bne.n	8006c28 <_printf_i+0x30>
 8006c6e:	2278      	movs	r2, #120	; 0x78
 8006c70:	496f      	ldr	r1, [pc, #444]	; (8006e30 <_printf_i+0x238>)
 8006c72:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006c76:	e064      	b.n	8006d42 <_printf_i+0x14a>
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006c7e:	1d11      	adds	r1, r2, #4
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0a3      	b.n	8006dd4 <_printf_i+0x1dc>
 8006c8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006c90:	f102 0104 	add.w	r1, r2, #4
 8006c94:	6019      	str	r1, [r3, #0]
 8006c96:	d0d7      	beq.n	8006c48 <_printf_i+0x50>
 8006c98:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da03      	bge.n	8006ca8 <_printf_i+0xb0>
 8006ca0:	222d      	movs	r2, #45	; 0x2d
 8006ca2:	425b      	negs	r3, r3
 8006ca4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ca8:	4962      	ldr	r1, [pc, #392]	; (8006e34 <_printf_i+0x23c>)
 8006caa:	220a      	movs	r2, #10
 8006cac:	e017      	b.n	8006cde <_printf_i+0xe6>
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006cb6:	d003      	beq.n	8006cc0 <_printf_i+0xc8>
 8006cb8:	1d08      	adds	r0, r1, #4
 8006cba:	6018      	str	r0, [r3, #0]
 8006cbc:	680b      	ldr	r3, [r1, #0]
 8006cbe:	e006      	b.n	8006cce <_printf_i+0xd6>
 8006cc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cc4:	f101 0004 	add.w	r0, r1, #4
 8006cc8:	6018      	str	r0, [r3, #0]
 8006cca:	d0f7      	beq.n	8006cbc <_printf_i+0xc4>
 8006ccc:	880b      	ldrh	r3, [r1, #0]
 8006cce:	2a6f      	cmp	r2, #111	; 0x6f
 8006cd0:	bf14      	ite	ne
 8006cd2:	220a      	movne	r2, #10
 8006cd4:	2208      	moveq	r2, #8
 8006cd6:	4957      	ldr	r1, [pc, #348]	; (8006e34 <_printf_i+0x23c>)
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006cde:	6865      	ldr	r5, [r4, #4]
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	60a5      	str	r5, [r4, #8]
 8006ce4:	f2c0 809c 	blt.w	8006e20 <_printf_i+0x228>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	f020 0004 	bic.w	r0, r0, #4
 8006cee:	6020      	str	r0, [r4, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d13f      	bne.n	8006d74 <_printf_i+0x17c>
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	f040 8095 	bne.w	8006e24 <_printf_i+0x22c>
 8006cfa:	4675      	mov	r5, lr
 8006cfc:	2a08      	cmp	r2, #8
 8006cfe:	d10b      	bne.n	8006d18 <_printf_i+0x120>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07da      	lsls	r2, r3, #31
 8006d04:	d508      	bpl.n	8006d18 <_printf_i+0x120>
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	6862      	ldr	r2, [r4, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	bfde      	ittt	le
 8006d0e:	2330      	movle	r3, #48	; 0x30
 8006d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d18:	ebae 0305 	sub.w	r3, lr, r5
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	f8cd 8000 	str.w	r8, [sp]
 8006d22:	463b      	mov	r3, r7
 8006d24:	aa03      	add	r2, sp, #12
 8006d26:	4621      	mov	r1, r4
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff feed 	bl	8006b08 <_printf_common>
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d155      	bne.n	8006dde <_printf_i+0x1e6>
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	b005      	add	sp, #20
 8006d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d3c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006d40:	493c      	ldr	r1, [pc, #240]	; (8006e34 <_printf_i+0x23c>)
 8006d42:	6822      	ldr	r2, [r4, #0]
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d4a:	f100 0504 	add.w	r5, r0, #4
 8006d4e:	601d      	str	r5, [r3, #0]
 8006d50:	d001      	beq.n	8006d56 <_printf_i+0x15e>
 8006d52:	6803      	ldr	r3, [r0, #0]
 8006d54:	e002      	b.n	8006d5c <_printf_i+0x164>
 8006d56:	0655      	lsls	r5, r2, #25
 8006d58:	d5fb      	bpl.n	8006d52 <_printf_i+0x15a>
 8006d5a:	8803      	ldrh	r3, [r0, #0]
 8006d5c:	07d0      	lsls	r0, r2, #31
 8006d5e:	bf44      	itt	mi
 8006d60:	f042 0220 	orrmi.w	r2, r2, #32
 8006d64:	6022      	strmi	r2, [r4, #0]
 8006d66:	b91b      	cbnz	r3, 8006d70 <_printf_i+0x178>
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	f022 0220 	bic.w	r2, r2, #32
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	2210      	movs	r2, #16
 8006d72:	e7b1      	b.n	8006cd8 <_printf_i+0xe0>
 8006d74:	4675      	mov	r5, lr
 8006d76:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d7a:	fb02 3310 	mls	r3, r2, r0, r3
 8006d7e:	5ccb      	ldrb	r3, [r1, r3]
 8006d80:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d84:	4603      	mov	r3, r0
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d1f5      	bne.n	8006d76 <_printf_i+0x17e>
 8006d8a:	e7b7      	b.n	8006cfc <_printf_i+0x104>
 8006d8c:	6808      	ldr	r0, [r1, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006d94:	6949      	ldr	r1, [r1, #20]
 8006d96:	d004      	beq.n	8006da2 <_printf_i+0x1aa>
 8006d98:	1d10      	adds	r0, r2, #4
 8006d9a:	6018      	str	r0, [r3, #0]
 8006d9c:	6813      	ldr	r3, [r2, #0]
 8006d9e:	6019      	str	r1, [r3, #0]
 8006da0:	e007      	b.n	8006db2 <_printf_i+0x1ba>
 8006da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006da6:	f102 0004 	add.w	r0, r2, #4
 8006daa:	6018      	str	r0, [r3, #0]
 8006dac:	6813      	ldr	r3, [r2, #0]
 8006dae:	d0f6      	beq.n	8006d9e <_printf_i+0x1a6>
 8006db0:	8019      	strh	r1, [r3, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	4675      	mov	r5, lr
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	e7b1      	b.n	8006d1e <_printf_i+0x126>
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	1d11      	adds	r1, r2, #4
 8006dbe:	6019      	str	r1, [r3, #0]
 8006dc0:	6815      	ldr	r5, [r2, #0]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6862      	ldr	r2, [r4, #4]
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 f836 	bl	8006e38 <memchr>
 8006dcc:	b108      	cbz	r0, 8006dd2 <_printf_i+0x1da>
 8006dce:	1b40      	subs	r0, r0, r5
 8006dd0:	6060      	str	r0, [r4, #4]
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ddc:	e79f      	b.n	8006d1e <_printf_i+0x126>
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	462a      	mov	r2, r5
 8006de2:	4639      	mov	r1, r7
 8006de4:	4630      	mov	r0, r6
 8006de6:	47c0      	blx	r8
 8006de8:	3001      	adds	r0, #1
 8006dea:	d0a2      	beq.n	8006d32 <_printf_i+0x13a>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	079b      	lsls	r3, r3, #30
 8006df0:	d507      	bpl.n	8006e02 <_printf_i+0x20a>
 8006df2:	2500      	movs	r5, #0
 8006df4:	f104 0919 	add.w	r9, r4, #25
 8006df8:	68e3      	ldr	r3, [r4, #12]
 8006dfa:	9a03      	ldr	r2, [sp, #12]
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	429d      	cmp	r5, r3
 8006e00:	db05      	blt.n	8006e0e <_printf_i+0x216>
 8006e02:	68e0      	ldr	r0, [r4, #12]
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	4298      	cmp	r0, r3
 8006e08:	bfb8      	it	lt
 8006e0a:	4618      	movlt	r0, r3
 8006e0c:	e793      	b.n	8006d36 <_printf_i+0x13e>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	464a      	mov	r2, r9
 8006e12:	4639      	mov	r1, r7
 8006e14:	4630      	mov	r0, r6
 8006e16:	47c0      	blx	r8
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d08a      	beq.n	8006d32 <_printf_i+0x13a>
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	e7eb      	b.n	8006df8 <_printf_i+0x200>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1a7      	bne.n	8006d74 <_printf_i+0x17c>
 8006e24:	780b      	ldrb	r3, [r1, #0]
 8006e26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e2e:	e765      	b.n	8006cfc <_printf_i+0x104>
 8006e30:	08009602 	.word	0x08009602
 8006e34:	080095f1 	.word	0x080095f1

08006e38 <memchr>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	b2c9      	uxtb	r1, r1
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4290      	cmp	r0, r2
 8006e40:	4603      	mov	r3, r0
 8006e42:	d101      	bne.n	8006e48 <memchr+0x10>
 8006e44:	2000      	movs	r0, #0
 8006e46:	bd10      	pop	{r4, pc}
 8006e48:	781c      	ldrb	r4, [r3, #0]
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	428c      	cmp	r4, r1
 8006e4e:	d1f6      	bne.n	8006e3e <memchr+0x6>
 8006e50:	4618      	mov	r0, r3
 8006e52:	bd10      	pop	{r4, pc}

08006e54 <memcpy>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	1e43      	subs	r3, r0, #1
 8006e58:	440a      	add	r2, r1
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	d100      	bne.n	8006e60 <memcpy+0xc>
 8006e5e:	bd10      	pop	{r4, pc}
 8006e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e68:	e7f7      	b.n	8006e5a <memcpy+0x6>

08006e6a <memmove>:
 8006e6a:	4288      	cmp	r0, r1
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	eb01 0302 	add.w	r3, r1, r2
 8006e72:	d803      	bhi.n	8006e7c <memmove+0x12>
 8006e74:	1e42      	subs	r2, r0, #1
 8006e76:	4299      	cmp	r1, r3
 8006e78:	d10c      	bne.n	8006e94 <memmove+0x2a>
 8006e7a:	bd10      	pop	{r4, pc}
 8006e7c:	4298      	cmp	r0, r3
 8006e7e:	d2f9      	bcs.n	8006e74 <memmove+0xa>
 8006e80:	1881      	adds	r1, r0, r2
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	42d3      	cmn	r3, r2
 8006e86:	d100      	bne.n	8006e8a <memmove+0x20>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e92:	e7f7      	b.n	8006e84 <memmove+0x1a>
 8006e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e9c:	e7eb      	b.n	8006e76 <memmove+0xc>
	...

08006ea0 <_free_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	d043      	beq.n	8006f30 <_free_r+0x90>
 8006ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eac:	1f0c      	subs	r4, r1, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfb8      	it	lt
 8006eb2:	18e4      	addlt	r4, r4, r3
 8006eb4:	f000 f8d4 	bl	8007060 <__malloc_lock>
 8006eb8:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <_free_r+0x94>)
 8006eba:	6813      	ldr	r3, [r2, #0]
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	b933      	cbnz	r3, 8006ece <_free_r+0x2e>
 8006ec0:	6063      	str	r3, [r4, #4]
 8006ec2:	6014      	str	r4, [r2, #0]
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eca:	f000 b8ca 	b.w	8007062 <__malloc_unlock>
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	d90b      	bls.n	8006eea <_free_r+0x4a>
 8006ed2:	6821      	ldr	r1, [r4, #0]
 8006ed4:	1862      	adds	r2, r4, r1
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bf01      	itttt	eq
 8006eda:	681a      	ldreq	r2, [r3, #0]
 8006edc:	685b      	ldreq	r3, [r3, #4]
 8006ede:	1852      	addeq	r2, r2, r1
 8006ee0:	6022      	streq	r2, [r4, #0]
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	6004      	str	r4, [r0, #0]
 8006ee6:	e7ed      	b.n	8006ec4 <_free_r+0x24>
 8006ee8:	4613      	mov	r3, r2
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	b10a      	cbz	r2, 8006ef2 <_free_r+0x52>
 8006eee:	42a2      	cmp	r2, r4
 8006ef0:	d9fa      	bls.n	8006ee8 <_free_r+0x48>
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	1858      	adds	r0, r3, r1
 8006ef6:	42a0      	cmp	r0, r4
 8006ef8:	d10b      	bne.n	8006f12 <_free_r+0x72>
 8006efa:	6820      	ldr	r0, [r4, #0]
 8006efc:	4401      	add	r1, r0
 8006efe:	1858      	adds	r0, r3, r1
 8006f00:	4282      	cmp	r2, r0
 8006f02:	6019      	str	r1, [r3, #0]
 8006f04:	d1de      	bne.n	8006ec4 <_free_r+0x24>
 8006f06:	6810      	ldr	r0, [r2, #0]
 8006f08:	6852      	ldr	r2, [r2, #4]
 8006f0a:	4401      	add	r1, r0
 8006f0c:	6019      	str	r1, [r3, #0]
 8006f0e:	605a      	str	r2, [r3, #4]
 8006f10:	e7d8      	b.n	8006ec4 <_free_r+0x24>
 8006f12:	d902      	bls.n	8006f1a <_free_r+0x7a>
 8006f14:	230c      	movs	r3, #12
 8006f16:	602b      	str	r3, [r5, #0]
 8006f18:	e7d4      	b.n	8006ec4 <_free_r+0x24>
 8006f1a:	6820      	ldr	r0, [r4, #0]
 8006f1c:	1821      	adds	r1, r4, r0
 8006f1e:	428a      	cmp	r2, r1
 8006f20:	bf01      	itttt	eq
 8006f22:	6811      	ldreq	r1, [r2, #0]
 8006f24:	6852      	ldreq	r2, [r2, #4]
 8006f26:	1809      	addeq	r1, r1, r0
 8006f28:	6021      	streq	r1, [r4, #0]
 8006f2a:	6062      	str	r2, [r4, #4]
 8006f2c:	605c      	str	r4, [r3, #4]
 8006f2e:	e7c9      	b.n	8006ec4 <_free_r+0x24>
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	200004a8 	.word	0x200004a8

08006f38 <_malloc_r>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	1ccd      	adds	r5, r1, #3
 8006f3c:	f025 0503 	bic.w	r5, r5, #3
 8006f40:	3508      	adds	r5, #8
 8006f42:	2d0c      	cmp	r5, #12
 8006f44:	bf38      	it	cc
 8006f46:	250c      	movcc	r5, #12
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	db01      	blt.n	8006f52 <_malloc_r+0x1a>
 8006f4e:	42a9      	cmp	r1, r5
 8006f50:	d903      	bls.n	8006f5a <_malloc_r+0x22>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	2000      	movs	r0, #0
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	f000 f881 	bl	8007060 <__malloc_lock>
 8006f5e:	4a23      	ldr	r2, [pc, #140]	; (8006fec <_malloc_r+0xb4>)
 8006f60:	6814      	ldr	r4, [r2, #0]
 8006f62:	4621      	mov	r1, r4
 8006f64:	b991      	cbnz	r1, 8006f8c <_malloc_r+0x54>
 8006f66:	4c22      	ldr	r4, [pc, #136]	; (8006ff0 <_malloc_r+0xb8>)
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	b91b      	cbnz	r3, 8006f74 <_malloc_r+0x3c>
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f000 f867 	bl	8007040 <_sbrk_r>
 8006f72:	6020      	str	r0, [r4, #0]
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f000 f862 	bl	8007040 <_sbrk_r>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d126      	bne.n	8006fce <_malloc_r+0x96>
 8006f80:	230c      	movs	r3, #12
 8006f82:	4630      	mov	r0, r6
 8006f84:	6033      	str	r3, [r6, #0]
 8006f86:	f000 f86c 	bl	8007062 <__malloc_unlock>
 8006f8a:	e7e4      	b.n	8006f56 <_malloc_r+0x1e>
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	1b5b      	subs	r3, r3, r5
 8006f90:	d41a      	bmi.n	8006fc8 <_malloc_r+0x90>
 8006f92:	2b0b      	cmp	r3, #11
 8006f94:	d90f      	bls.n	8006fb6 <_malloc_r+0x7e>
 8006f96:	600b      	str	r3, [r1, #0]
 8006f98:	18cc      	adds	r4, r1, r3
 8006f9a:	50cd      	str	r5, [r1, r3]
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f860 	bl	8007062 <__malloc_unlock>
 8006fa2:	f104 000b 	add.w	r0, r4, #11
 8006fa6:	1d23      	adds	r3, r4, #4
 8006fa8:	f020 0007 	bic.w	r0, r0, #7
 8006fac:	1ac3      	subs	r3, r0, r3
 8006fae:	d01b      	beq.n	8006fe8 <_malloc_r+0xb0>
 8006fb0:	425a      	negs	r2, r3
 8006fb2:	50e2      	str	r2, [r4, r3]
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
 8006fb6:	428c      	cmp	r4, r1
 8006fb8:	bf0b      	itete	eq
 8006fba:	6863      	ldreq	r3, [r4, #4]
 8006fbc:	684b      	ldrne	r3, [r1, #4]
 8006fbe:	6013      	streq	r3, [r2, #0]
 8006fc0:	6063      	strne	r3, [r4, #4]
 8006fc2:	bf18      	it	ne
 8006fc4:	460c      	movne	r4, r1
 8006fc6:	e7e9      	b.n	8006f9c <_malloc_r+0x64>
 8006fc8:	460c      	mov	r4, r1
 8006fca:	6849      	ldr	r1, [r1, #4]
 8006fcc:	e7ca      	b.n	8006f64 <_malloc_r+0x2c>
 8006fce:	1cc4      	adds	r4, r0, #3
 8006fd0:	f024 0403 	bic.w	r4, r4, #3
 8006fd4:	42a0      	cmp	r0, r4
 8006fd6:	d005      	beq.n	8006fe4 <_malloc_r+0xac>
 8006fd8:	1a21      	subs	r1, r4, r0
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f000 f830 	bl	8007040 <_sbrk_r>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d0cd      	beq.n	8006f80 <_malloc_r+0x48>
 8006fe4:	6025      	str	r5, [r4, #0]
 8006fe6:	e7d9      	b.n	8006f9c <_malloc_r+0x64>
 8006fe8:	bd70      	pop	{r4, r5, r6, pc}
 8006fea:	bf00      	nop
 8006fec:	200004a8 	.word	0x200004a8
 8006ff0:	200004ac 	.word	0x200004ac

08006ff4 <_realloc_r>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	b921      	cbnz	r1, 8007008 <_realloc_r+0x14>
 8006ffe:	4611      	mov	r1, r2
 8007000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007004:	f7ff bf98 	b.w	8006f38 <_malloc_r>
 8007008:	b922      	cbnz	r2, 8007014 <_realloc_r+0x20>
 800700a:	f7ff ff49 	bl	8006ea0 <_free_r>
 800700e:	4625      	mov	r5, r4
 8007010:	4628      	mov	r0, r5
 8007012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007014:	f000 f826 	bl	8007064 <_malloc_usable_size_r>
 8007018:	4284      	cmp	r4, r0
 800701a:	d90f      	bls.n	800703c <_realloc_r+0x48>
 800701c:	4621      	mov	r1, r4
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ff8a 	bl	8006f38 <_malloc_r>
 8007024:	4605      	mov	r5, r0
 8007026:	2800      	cmp	r0, #0
 8007028:	d0f2      	beq.n	8007010 <_realloc_r+0x1c>
 800702a:	4631      	mov	r1, r6
 800702c:	4622      	mov	r2, r4
 800702e:	f7ff ff11 	bl	8006e54 <memcpy>
 8007032:	4631      	mov	r1, r6
 8007034:	4638      	mov	r0, r7
 8007036:	f7ff ff33 	bl	8006ea0 <_free_r>
 800703a:	e7e9      	b.n	8007010 <_realloc_r+0x1c>
 800703c:	4635      	mov	r5, r6
 800703e:	e7e7      	b.n	8007010 <_realloc_r+0x1c>

08007040 <_sbrk_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	2300      	movs	r3, #0
 8007044:	4c05      	ldr	r4, [pc, #20]	; (800705c <_sbrk_r+0x1c>)
 8007046:	4605      	mov	r5, r0
 8007048:	4608      	mov	r0, r1
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	f001 fd60 	bl	8008b10 <_sbrk>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_sbrk_r+0x1a>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	b103      	cbz	r3, 800705a <_sbrk_r+0x1a>
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000674 	.word	0x20000674

08007060 <__malloc_lock>:
 8007060:	4770      	bx	lr

08007062 <__malloc_unlock>:
 8007062:	4770      	bx	lr

08007064 <_malloc_usable_size_r>:
 8007064:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007068:	2800      	cmp	r0, #0
 800706a:	f1a0 0004 	sub.w	r0, r0, #4
 800706e:	bfbc      	itt	lt
 8007070:	580b      	ldrlt	r3, [r1, r0]
 8007072:	18c0      	addlt	r0, r0, r3
 8007074:	4770      	bx	lr
	...

08007078 <exp>:
 8007078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800707c:	b08b      	sub	sp, #44	; 0x2c
 800707e:	4604      	mov	r4, r0
 8007080:	460d      	mov	r5, r1
 8007082:	f000 fac9 	bl	8007618 <__ieee754_exp>
 8007086:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007164 <exp+0xec>
 800708a:	4606      	mov	r6, r0
 800708c:	f998 3000 	ldrsb.w	r3, [r8]
 8007090:	460f      	mov	r7, r1
 8007092:	3301      	adds	r3, #1
 8007094:	d02c      	beq.n	80070f0 <exp+0x78>
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f001 fc26 	bl	80088ea <finite>
 800709e:	b338      	cbz	r0, 80070f0 <exp+0x78>
 80070a0:	a329      	add	r3, pc, #164	; (adr r3, 8007148 <exp+0xd0>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 fc99 	bl	80009e0 <__aeabi_dcmpgt>
 80070ae:	4681      	mov	r9, r0
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d02d      	beq.n	8007110 <exp+0x98>
 80070b4:	2303      	movs	r3, #3
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4b27      	ldr	r3, [pc, #156]	; (8007158 <exp+0xe0>)
 80070ba:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	2300      	movs	r3, #0
 80070c2:	9308      	str	r3, [sp, #32]
 80070c4:	f998 3000 	ldrsb.w	r3, [r8]
 80070c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80070cc:	b9ab      	cbnz	r3, 80070fa <exp+0x82>
 80070ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80070d2:	4b22      	ldr	r3, [pc, #136]	; (800715c <exp+0xe4>)
 80070d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070d8:	4668      	mov	r0, sp
 80070da:	f001 fc0c 	bl	80088f6 <matherr>
 80070de:	b190      	cbz	r0, 8007106 <exp+0x8e>
 80070e0:	9b08      	ldr	r3, [sp, #32]
 80070e2:	b11b      	cbz	r3, 80070ec <exp+0x74>
 80070e4:	f001 fd0e 	bl	8008b04 <__errno>
 80070e8:	9b08      	ldr	r3, [sp, #32]
 80070ea:	6003      	str	r3, [r0, #0]
 80070ec:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	b00b      	add	sp, #44	; 0x2c
 80070f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070fa:	2000      	movs	r0, #0
 80070fc:	4918      	ldr	r1, [pc, #96]	; (8007160 <exp+0xe8>)
 80070fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d1e8      	bne.n	80070d8 <exp+0x60>
 8007106:	f001 fcfd 	bl	8008b04 <__errno>
 800710a:	2322      	movs	r3, #34	; 0x22
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	e7e7      	b.n	80070e0 <exp+0x68>
 8007110:	a30f      	add	r3, pc, #60	; (adr r3, 8007150 <exp+0xd8>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 fc43 	bl	80009a4 <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	d0e6      	beq.n	80070f0 <exp+0x78>
 8007122:	2304      	movs	r3, #4
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <exp+0xe0>)
 8007128:	2200      	movs	r2, #0
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	2300      	movs	r3, #0
 800712e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007132:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007136:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800713a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800713e:	f998 3000 	ldrsb.w	r3, [r8]
 8007142:	e7de      	b.n	8007102 <exp+0x8a>
 8007144:	f3af 8000 	nop.w
 8007148:	fefa39ef 	.word	0xfefa39ef
 800714c:	40862e42 	.word	0x40862e42
 8007150:	d52d3051 	.word	0xd52d3051
 8007154:	c0874910 	.word	0xc0874910
 8007158:	08009613 	.word	0x08009613
 800715c:	47efffff 	.word	0x47efffff
 8007160:	7ff00000 	.word	0x7ff00000
 8007164:	2000007c 	.word	0x2000007c

08007168 <log>:
 8007168:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800716c:	b08a      	sub	sp, #40	; 0x28
 800716e:	4604      	mov	r4, r0
 8007170:	460d      	mov	r5, r1
 8007172:	f000 fbc1 	bl	80078f8 <__ieee754_log>
 8007176:	4b34      	ldr	r3, [pc, #208]	; (8007248 <log+0xe0>)
 8007178:	4680      	mov	r8, r0
 800717a:	f993 6000 	ldrsb.w	r6, [r3]
 800717e:	4689      	mov	r9, r1
 8007180:	1c73      	adds	r3, r6, #1
 8007182:	d05b      	beq.n	800723c <log+0xd4>
 8007184:	4622      	mov	r2, r4
 8007186:	462b      	mov	r3, r5
 8007188:	4620      	mov	r0, r4
 800718a:	4629      	mov	r1, r5
 800718c:	f7f9 fc32 	bl	80009f4 <__aeabi_dcmpun>
 8007190:	2800      	cmp	r0, #0
 8007192:	d153      	bne.n	800723c <log+0xd4>
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	f7f9 fc20 	bl	80009e0 <__aeabi_dcmpgt>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d14b      	bne.n	800723c <log+0xd4>
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <log+0xe4>)
 80071a6:	9008      	str	r0, [sp, #32]
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80071ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80071b2:	b9a6      	cbnz	r6, 80071de <log+0x76>
 80071b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80071b8:	4b25      	ldr	r3, [pc, #148]	; (8007250 <log+0xe8>)
 80071ba:	4620      	mov	r0, r4
 80071bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071c0:	4629      	mov	r1, r5
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	f7f9 fbe3 	bl	8000990 <__aeabi_dcmpeq>
 80071ca:	bb40      	cbnz	r0, 800721e <log+0xb6>
 80071cc:	2301      	movs	r3, #1
 80071ce:	2e02      	cmp	r6, #2
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	d119      	bne.n	8007208 <log+0xa0>
 80071d4:	f001 fc96 	bl	8008b04 <__errno>
 80071d8:	2321      	movs	r3, #33	; 0x21
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	e019      	b.n	8007212 <log+0xaa>
 80071de:	2200      	movs	r2, #0
 80071e0:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <log+0xec>)
 80071e2:	4620      	mov	r0, r4
 80071e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071e8:	4629      	mov	r1, r5
 80071ea:	2200      	movs	r2, #0
 80071ec:	2300      	movs	r3, #0
 80071ee:	f7f9 fbcf 	bl	8000990 <__aeabi_dcmpeq>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0ea      	beq.n	80071cc <log+0x64>
 80071f6:	2302      	movs	r3, #2
 80071f8:	429e      	cmp	r6, r3
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	d111      	bne.n	8007222 <log+0xba>
 80071fe:	f001 fc81 	bl	8008b04 <__errno>
 8007202:	2322      	movs	r3, #34	; 0x22
 8007204:	6003      	str	r3, [r0, #0]
 8007206:	e011      	b.n	800722c <log+0xc4>
 8007208:	4668      	mov	r0, sp
 800720a:	f001 fb74 	bl	80088f6 <matherr>
 800720e:	2800      	cmp	r0, #0
 8007210:	d0e0      	beq.n	80071d4 <log+0x6c>
 8007212:	4811      	ldr	r0, [pc, #68]	; (8007258 <log+0xf0>)
 8007214:	f001 fb72 	bl	80088fc <nan>
 8007218:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800721c:	e006      	b.n	800722c <log+0xc4>
 800721e:	2302      	movs	r3, #2
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4668      	mov	r0, sp
 8007224:	f001 fb67 	bl	80088f6 <matherr>
 8007228:	2800      	cmp	r0, #0
 800722a:	d0e8      	beq.n	80071fe <log+0x96>
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	b11b      	cbz	r3, 8007238 <log+0xd0>
 8007230:	f001 fc68 	bl	8008b04 <__errno>
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	6003      	str	r3, [r0, #0]
 8007238:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	b00a      	add	sp, #40	; 0x28
 8007242:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007246:	bf00      	nop
 8007248:	2000007c 	.word	0x2000007c
 800724c:	08009617 	.word	0x08009617
 8007250:	c7efffff 	.word	0xc7efffff
 8007254:	fff00000 	.word	0xfff00000
 8007258:	080095e5 	.word	0x080095e5

0800725c <log10>:
 800725c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007260:	b08b      	sub	sp, #44	; 0x2c
 8007262:	4604      	mov	r4, r0
 8007264:	460d      	mov	r5, r1
 8007266:	f000 fd1b 	bl	8007ca0 <__ieee754_log10>
 800726a:	4b34      	ldr	r3, [pc, #208]	; (800733c <log10+0xe0>)
 800726c:	4680      	mov	r8, r0
 800726e:	f993 6000 	ldrsb.w	r6, [r3]
 8007272:	4689      	mov	r9, r1
 8007274:	1c73      	adds	r3, r6, #1
 8007276:	d05c      	beq.n	8007332 <log10+0xd6>
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	4620      	mov	r0, r4
 800727e:	4629      	mov	r1, r5
 8007280:	f7f9 fbb8 	bl	80009f4 <__aeabi_dcmpun>
 8007284:	4607      	mov	r7, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	d153      	bne.n	8007332 <log10+0xd6>
 800728a:	2200      	movs	r2, #0
 800728c:	2300      	movs	r3, #0
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	f7f9 fb91 	bl	80009b8 <__aeabi_dcmple>
 8007296:	2800      	cmp	r0, #0
 8007298:	d04b      	beq.n	8007332 <log10+0xd6>
 800729a:	4b29      	ldr	r3, [pc, #164]	; (8007340 <log10+0xe4>)
 800729c:	9708      	str	r7, [sp, #32]
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80072a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80072a8:	b9a6      	cbnz	r6, 80072d4 <log10+0x78>
 80072aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80072ae:	4b25      	ldr	r3, [pc, #148]	; (8007344 <log10+0xe8>)
 80072b0:	4620      	mov	r0, r4
 80072b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072b6:	4629      	mov	r1, r5
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	f7f9 fb68 	bl	8000990 <__aeabi_dcmpeq>
 80072c0:	bb40      	cbnz	r0, 8007314 <log10+0xb8>
 80072c2:	2301      	movs	r3, #1
 80072c4:	2e02      	cmp	r6, #2
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	d119      	bne.n	80072fe <log10+0xa2>
 80072ca:	f001 fc1b 	bl	8008b04 <__errno>
 80072ce:	2321      	movs	r3, #33	; 0x21
 80072d0:	6003      	str	r3, [r0, #0]
 80072d2:	e019      	b.n	8007308 <log10+0xac>
 80072d4:	2200      	movs	r2, #0
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <log10+0xec>)
 80072d8:	4620      	mov	r0, r4
 80072da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072de:	4629      	mov	r1, r5
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	f7f9 fb54 	bl	8000990 <__aeabi_dcmpeq>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d0ea      	beq.n	80072c2 <log10+0x66>
 80072ec:	2302      	movs	r3, #2
 80072ee:	429e      	cmp	r6, r3
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	d111      	bne.n	8007318 <log10+0xbc>
 80072f4:	f001 fc06 	bl	8008b04 <__errno>
 80072f8:	2322      	movs	r3, #34	; 0x22
 80072fa:	6003      	str	r3, [r0, #0]
 80072fc:	e011      	b.n	8007322 <log10+0xc6>
 80072fe:	4668      	mov	r0, sp
 8007300:	f001 faf9 	bl	80088f6 <matherr>
 8007304:	2800      	cmp	r0, #0
 8007306:	d0e0      	beq.n	80072ca <log10+0x6e>
 8007308:	4810      	ldr	r0, [pc, #64]	; (800734c <log10+0xf0>)
 800730a:	f001 faf7 	bl	80088fc <nan>
 800730e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007312:	e006      	b.n	8007322 <log10+0xc6>
 8007314:	2302      	movs	r3, #2
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4668      	mov	r0, sp
 800731a:	f001 faec 	bl	80088f6 <matherr>
 800731e:	2800      	cmp	r0, #0
 8007320:	d0e8      	beq.n	80072f4 <log10+0x98>
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	b11b      	cbz	r3, 800732e <log10+0xd2>
 8007326:	f001 fbed 	bl	8008b04 <__errno>
 800732a:	9b08      	ldr	r3, [sp, #32]
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007332:	4640      	mov	r0, r8
 8007334:	4649      	mov	r1, r9
 8007336:	b00b      	add	sp, #44	; 0x2c
 8007338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800733c:	2000007c 	.word	0x2000007c
 8007340:	0800961b 	.word	0x0800961b
 8007344:	c7efffff 	.word	0xc7efffff
 8007348:	fff00000 	.word	0xfff00000
 800734c:	080095e5 	.word	0x080095e5

08007350 <pow>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	b08f      	sub	sp, #60	; 0x3c
 8007356:	461d      	mov	r5, r3
 8007358:	4680      	mov	r8, r0
 800735a:	4689      	mov	r9, r1
 800735c:	4614      	mov	r4, r2
 800735e:	f000 fd23 	bl	8007da8 <__ieee754_pow>
 8007362:	4fa5      	ldr	r7, [pc, #660]	; (80075f8 <pow+0x2a8>)
 8007364:	e9cd 0100 	strd	r0, r1, [sp]
 8007368:	f997 3000 	ldrsb.w	r3, [r7]
 800736c:	463e      	mov	r6, r7
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	3301      	adds	r3, #1
 8007372:	d05f      	beq.n	8007434 <pow+0xe4>
 8007374:	4622      	mov	r2, r4
 8007376:	462b      	mov	r3, r5
 8007378:	4620      	mov	r0, r4
 800737a:	4629      	mov	r1, r5
 800737c:	f7f9 fb3a 	bl	80009f4 <__aeabi_dcmpun>
 8007380:	4682      	mov	sl, r0
 8007382:	2800      	cmp	r0, #0
 8007384:	d156      	bne.n	8007434 <pow+0xe4>
 8007386:	4642      	mov	r2, r8
 8007388:	464b      	mov	r3, r9
 800738a:	4640      	mov	r0, r8
 800738c:	4649      	mov	r1, r9
 800738e:	f7f9 fb31 	bl	80009f4 <__aeabi_dcmpun>
 8007392:	9003      	str	r0, [sp, #12]
 8007394:	b1e8      	cbz	r0, 80073d2 <pow+0x82>
 8007396:	2200      	movs	r2, #0
 8007398:	2300      	movs	r3, #0
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f7f9 faf7 	bl	8000990 <__aeabi_dcmpeq>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d046      	beq.n	8007434 <pow+0xe4>
 80073a6:	2301      	movs	r3, #1
 80073a8:	2200      	movs	r2, #0
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	4b93      	ldr	r3, [pc, #588]	; (80075fc <pow+0x2ac>)
 80073ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	4b92      	ldr	r3, [pc, #584]	; (8007600 <pow+0x2b0>)
 80073b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80073ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80073be:	9b02      	ldr	r3, [sp, #8]
 80073c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d031      	beq.n	800742c <pow+0xdc>
 80073c8:	a804      	add	r0, sp, #16
 80073ca:	f001 fa94 	bl	80088f6 <matherr>
 80073ce:	bb38      	cbnz	r0, 8007420 <pow+0xd0>
 80073d0:	e058      	b.n	8007484 <pow+0x134>
 80073d2:	f04f 0a00 	mov.w	sl, #0
 80073d6:	f04f 0b00 	mov.w	fp, #0
 80073da:	4652      	mov	r2, sl
 80073dc:	465b      	mov	r3, fp
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 fad5 	bl	8000990 <__aeabi_dcmpeq>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d051      	beq.n	800748e <pow+0x13e>
 80073ea:	4652      	mov	r2, sl
 80073ec:	465b      	mov	r3, fp
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f9 facd 	bl	8000990 <__aeabi_dcmpeq>
 80073f6:	4606      	mov	r6, r0
 80073f8:	b308      	cbz	r0, 800743e <pow+0xee>
 80073fa:	2301      	movs	r3, #1
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	4b7f      	ldr	r3, [pc, #508]	; (80075fc <pow+0x2ac>)
 8007400:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800740c:	930c      	str	r3, [sp, #48]	; 0x30
 800740e:	9b02      	ldr	r3, [sp, #8]
 8007410:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0d7      	beq.n	80073c8 <pow+0x78>
 8007418:	2200      	movs	r2, #0
 800741a:	4b79      	ldr	r3, [pc, #484]	; (8007600 <pow+0x2b0>)
 800741c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007422:	b11b      	cbz	r3, 800742c <pow+0xdc>
 8007424:	f001 fb6e 	bl	8008b04 <__errno>
 8007428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800742a:	6003      	str	r3, [r0, #0]
 800742c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8007430:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007438:	b00f      	add	sp, #60	; 0x3c
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f001 fa52 	bl	80088ea <finite>
 8007446:	2800      	cmp	r0, #0
 8007448:	d0f4      	beq.n	8007434 <pow+0xe4>
 800744a:	4652      	mov	r2, sl
 800744c:	465b      	mov	r3, fp
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7f9 faa7 	bl	80009a4 <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	d0ec      	beq.n	8007434 <pow+0xe4>
 800745a:	2301      	movs	r3, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	4b67      	ldr	r3, [pc, #412]	; (80075fc <pow+0x2ac>)
 8007460:	960c      	str	r6, [sp, #48]	; 0x30
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	f997 3000 	ldrsb.w	r3, [r7]
 8007468:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800746c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007470:	b913      	cbnz	r3, 8007478 <pow+0x128>
 8007472:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007476:	e7a7      	b.n	80073c8 <pow+0x78>
 8007478:	2000      	movs	r0, #0
 800747a:	4962      	ldr	r1, [pc, #392]	; (8007604 <pow+0x2b4>)
 800747c:	2b02      	cmp	r3, #2
 800747e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007482:	d1a1      	bne.n	80073c8 <pow+0x78>
 8007484:	f001 fb3e 	bl	8008b04 <__errno>
 8007488:	2321      	movs	r3, #33	; 0x21
 800748a:	6003      	str	r3, [r0, #0]
 800748c:	e7c8      	b.n	8007420 <pow+0xd0>
 800748e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007492:	f001 fa2a 	bl	80088ea <finite>
 8007496:	9002      	str	r0, [sp, #8]
 8007498:	2800      	cmp	r0, #0
 800749a:	d17f      	bne.n	800759c <pow+0x24c>
 800749c:	4640      	mov	r0, r8
 800749e:	4649      	mov	r1, r9
 80074a0:	f001 fa23 	bl	80088ea <finite>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d079      	beq.n	800759c <pow+0x24c>
 80074a8:	4620      	mov	r0, r4
 80074aa:	4629      	mov	r1, r5
 80074ac:	f001 fa1d 	bl	80088ea <finite>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d073      	beq.n	800759c <pow+0x24c>
 80074b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f7f9 fa9a 	bl	80009f4 <__aeabi_dcmpun>
 80074c0:	f997 7000 	ldrsb.w	r7, [r7]
 80074c4:	4b4d      	ldr	r3, [pc, #308]	; (80075fc <pow+0x2ac>)
 80074c6:	b1a0      	cbz	r0, 80074f2 <pow+0x1a2>
 80074c8:	2201      	movs	r2, #1
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	9b02      	ldr	r3, [sp, #8]
 80074ce:	9204      	str	r2, [sp, #16]
 80074d0:	930c      	str	r3, [sp, #48]	; 0x30
 80074d2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80074d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80074da:	2f00      	cmp	r7, #0
 80074dc:	d0c9      	beq.n	8007472 <pow+0x122>
 80074de:	4652      	mov	r2, sl
 80074e0:	465b      	mov	r3, fp
 80074e2:	4650      	mov	r0, sl
 80074e4:	4659      	mov	r1, fp
 80074e6:	f7f9 f915 	bl	8000714 <__aeabi_ddiv>
 80074ea:	2f02      	cmp	r7, #2
 80074ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074f0:	e7c7      	b.n	8007482 <pow+0x132>
 80074f2:	2203      	movs	r2, #3
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	9204      	str	r2, [sp, #16]
 80074f8:	900c      	str	r0, [sp, #48]	; 0x30
 80074fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80074fe:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007502:	bb57      	cbnz	r7, 800755a <pow+0x20a>
 8007504:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007508:	4b3f      	ldr	r3, [pc, #252]	; (8007608 <pow+0x2b8>)
 800750a:	4640      	mov	r0, r8
 800750c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007510:	4649      	mov	r1, r9
 8007512:	4652      	mov	r2, sl
 8007514:	465b      	mov	r3, fp
 8007516:	f7f9 fa45 	bl	80009a4 <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	d064      	beq.n	80075e8 <pow+0x298>
 800751e:	2200      	movs	r2, #0
 8007520:	4b3a      	ldr	r3, [pc, #232]	; (800760c <pow+0x2bc>)
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f8 ffcb 	bl	80004c0 <__aeabi_dmul>
 800752a:	4604      	mov	r4, r0
 800752c:	460d      	mov	r5, r1
 800752e:	f001 f9eb 	bl	8008908 <rint>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4620      	mov	r0, r4
 8007538:	4629      	mov	r1, r5
 800753a:	f7f9 fa29 	bl	8000990 <__aeabi_dcmpeq>
 800753e:	b920      	cbnz	r0, 800754a <pow+0x1fa>
 8007540:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007544:	4b32      	ldr	r3, [pc, #200]	; (8007610 <pow+0x2c0>)
 8007546:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800754a:	f996 3000 	ldrsb.w	r3, [r6]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d14a      	bne.n	80075e8 <pow+0x298>
 8007552:	f001 fad7 	bl	8008b04 <__errno>
 8007556:	2322      	movs	r3, #34	; 0x22
 8007558:	e797      	b.n	800748a <pow+0x13a>
 800755a:	2200      	movs	r2, #0
 800755c:	4b2d      	ldr	r3, [pc, #180]	; (8007614 <pow+0x2c4>)
 800755e:	4640      	mov	r0, r8
 8007560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007564:	4649      	mov	r1, r9
 8007566:	4652      	mov	r2, sl
 8007568:	465b      	mov	r3, fp
 800756a:	f7f9 fa1b 	bl	80009a4 <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d0eb      	beq.n	800754a <pow+0x1fa>
 8007572:	2200      	movs	r2, #0
 8007574:	4b25      	ldr	r3, [pc, #148]	; (800760c <pow+0x2bc>)
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f8 ffa1 	bl	80004c0 <__aeabi_dmul>
 800757e:	4604      	mov	r4, r0
 8007580:	460d      	mov	r5, r1
 8007582:	f001 f9c1 	bl	8008908 <rint>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f9 f9ff 	bl	8000990 <__aeabi_dcmpeq>
 8007592:	2800      	cmp	r0, #0
 8007594:	d1d9      	bne.n	800754a <pow+0x1fa>
 8007596:	2200      	movs	r2, #0
 8007598:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <pow+0x2b4>)
 800759a:	e7d4      	b.n	8007546 <pow+0x1f6>
 800759c:	2200      	movs	r2, #0
 800759e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075a2:	2300      	movs	r3, #0
 80075a4:	f7f9 f9f4 	bl	8000990 <__aeabi_dcmpeq>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	f43f af43 	beq.w	8007434 <pow+0xe4>
 80075ae:	4640      	mov	r0, r8
 80075b0:	4649      	mov	r1, r9
 80075b2:	f001 f99a 	bl	80088ea <finite>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f af3c 	beq.w	8007434 <pow+0xe4>
 80075bc:	4620      	mov	r0, r4
 80075be:	4629      	mov	r1, r5
 80075c0:	f001 f993 	bl	80088ea <finite>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f43f af35 	beq.w	8007434 <pow+0xe4>
 80075ca:	2304      	movs	r3, #4
 80075cc:	9304      	str	r3, [sp, #16]
 80075ce:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <pow+0x2ac>)
 80075d0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	2300      	movs	r3, #0
 80075d8:	2400      	movs	r4, #0
 80075da:	930c      	str	r3, [sp, #48]	; 0x30
 80075dc:	2300      	movs	r3, #0
 80075de:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80075e2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80075e6:	e7b0      	b.n	800754a <pow+0x1fa>
 80075e8:	a804      	add	r0, sp, #16
 80075ea:	f001 f984 	bl	80088f6 <matherr>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f47f af16 	bne.w	8007420 <pow+0xd0>
 80075f4:	e7ad      	b.n	8007552 <pow+0x202>
 80075f6:	bf00      	nop
 80075f8:	2000007c 	.word	0x2000007c
 80075fc:	08009621 	.word	0x08009621
 8007600:	3ff00000 	.word	0x3ff00000
 8007604:	fff00000 	.word	0xfff00000
 8007608:	47efffff 	.word	0x47efffff
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	c7efffff 	.word	0xc7efffff
 8007614:	7ff00000 	.word	0x7ff00000

08007618 <__ieee754_exp>:
 8007618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	4aac      	ldr	r2, [pc, #688]	; (80078d0 <__ieee754_exp+0x2b8>)
 800761e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007622:	4296      	cmp	r6, r2
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800762c:	f240 80ab 	bls.w	8007786 <__ieee754_exp+0x16e>
 8007630:	4aa8      	ldr	r2, [pc, #672]	; (80078d4 <__ieee754_exp+0x2bc>)
 8007632:	4296      	cmp	r6, r2
 8007634:	d912      	bls.n	800765c <__ieee754_exp+0x44>
 8007636:	f3c1 0313 	ubfx	r3, r1, #0, #20
 800763a:	4303      	orrs	r3, r0
 800763c:	d006      	beq.n	800764c <__ieee754_exp+0x34>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	f7f8 fd8b 	bl	800015c <__adddf3>
 8007646:	4605      	mov	r5, r0
 8007648:	460c      	mov	r4, r1
 800764a:	e002      	b.n	8007652 <__ieee754_exp+0x3a>
 800764c:	b10f      	cbz	r7, 8007652 <__ieee754_exp+0x3a>
 800764e:	2500      	movs	r5, #0
 8007650:	462c      	mov	r4, r5
 8007652:	4628      	mov	r0, r5
 8007654:	4621      	mov	r1, r4
 8007656:	b003      	add	sp, #12
 8007658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765c:	a386      	add	r3, pc, #536	; (adr r3, 8007878 <__ieee754_exp+0x260>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f9 f9bd 	bl	80009e0 <__aeabi_dcmpgt>
 8007666:	b138      	cbz	r0, 8007678 <__ieee754_exp+0x60>
 8007668:	a385      	add	r3, pc, #532	; (adr r3, 8007880 <__ieee754_exp+0x268>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	4610      	mov	r0, r2
 8007670:	4619      	mov	r1, r3
 8007672:	f7f8 ff25 	bl	80004c0 <__aeabi_dmul>
 8007676:	e7e6      	b.n	8007646 <__ieee754_exp+0x2e>
 8007678:	a383      	add	r3, pc, #524	; (adr r3, 8007888 <__ieee754_exp+0x270>)
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	4628      	mov	r0, r5
 8007680:	4621      	mov	r1, r4
 8007682:	f7f9 f98f 	bl	80009a4 <__aeabi_dcmplt>
 8007686:	2800      	cmp	r0, #0
 8007688:	d1e1      	bne.n	800764e <__ieee754_exp+0x36>
 800768a:	4b93      	ldr	r3, [pc, #588]	; (80078d8 <__ieee754_exp+0x2c0>)
 800768c:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8007690:	429e      	cmp	r6, r3
 8007692:	f200 808e 	bhi.w	80077b2 <__ieee754_exp+0x19a>
 8007696:	4b91      	ldr	r3, [pc, #580]	; (80078dc <__ieee754_exp+0x2c4>)
 8007698:	4621      	mov	r1, r4
 800769a:	4443      	add	r3, r8
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7f8 fd59 	bl	8000158 <__aeabi_dsub>
 80076a6:	4682      	mov	sl, r0
 80076a8:	468b      	mov	fp, r1
 80076aa:	4e8d      	ldr	r6, [pc, #564]	; (80078e0 <__ieee754_exp+0x2c8>)
 80076ac:	4446      	add	r6, r8
 80076ae:	e896 0018 	ldmia.w	r6, {r3, r4}
 80076b2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80076b6:	f1c7 0801 	rsb	r8, r7, #1
 80076ba:	eba8 0807 	sub.w	r8, r8, r7
 80076be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c2:	4650      	mov	r0, sl
 80076c4:	4659      	mov	r1, fp
 80076c6:	f7f8 fd47 	bl	8000158 <__aeabi_dsub>
 80076ca:	4605      	mov	r5, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	462a      	mov	r2, r5
 80076d0:	4623      	mov	r3, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	4621      	mov	r1, r4
 80076d6:	f7f8 fef3 	bl	80004c0 <__aeabi_dmul>
 80076da:	a36d      	add	r3, pc, #436	; (adr r3, 8007890 <__ieee754_exp+0x278>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	4606      	mov	r6, r0
 80076e2:	460f      	mov	r7, r1
 80076e4:	f7f8 feec 	bl	80004c0 <__aeabi_dmul>
 80076e8:	a36b      	add	r3, pc, #428	; (adr r3, 8007898 <__ieee754_exp+0x280>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 fd33 	bl	8000158 <__aeabi_dsub>
 80076f2:	4632      	mov	r2, r6
 80076f4:	463b      	mov	r3, r7
 80076f6:	f7f8 fee3 	bl	80004c0 <__aeabi_dmul>
 80076fa:	a369      	add	r3, pc, #420	; (adr r3, 80078a0 <__ieee754_exp+0x288>)
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f7f8 fd2c 	bl	800015c <__adddf3>
 8007704:	4632      	mov	r2, r6
 8007706:	463b      	mov	r3, r7
 8007708:	f7f8 feda 	bl	80004c0 <__aeabi_dmul>
 800770c:	a366      	add	r3, pc, #408	; (adr r3, 80078a8 <__ieee754_exp+0x290>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	f7f8 fd21 	bl	8000158 <__aeabi_dsub>
 8007716:	4632      	mov	r2, r6
 8007718:	463b      	mov	r3, r7
 800771a:	f7f8 fed1 	bl	80004c0 <__aeabi_dmul>
 800771e:	a364      	add	r3, pc, #400	; (adr r3, 80078b0 <__ieee754_exp+0x298>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f7f8 fd1a 	bl	800015c <__adddf3>
 8007728:	4632      	mov	r2, r6
 800772a:	463b      	mov	r3, r7
 800772c:	f7f8 fec8 	bl	80004c0 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4628      	mov	r0, r5
 8007736:	4621      	mov	r1, r4
 8007738:	f7f8 fd0e 	bl	8000158 <__aeabi_dsub>
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4628      	mov	r0, r5
 8007746:	4621      	mov	r1, r4
 8007748:	f1b8 0f00 	cmp.w	r8, #0
 800774c:	d161      	bne.n	8007812 <__ieee754_exp+0x1fa>
 800774e:	f7f8 feb7 	bl	80004c0 <__aeabi_dmul>
 8007752:	2200      	movs	r2, #0
 8007754:	4680      	mov	r8, r0
 8007756:	4689      	mov	r9, r1
 8007758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f8 fcfa 	bl	8000158 <__aeabi_dsub>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f8 ffd2 	bl	8000714 <__aeabi_ddiv>
 8007770:	462a      	mov	r2, r5
 8007772:	4623      	mov	r3, r4
 8007774:	f7f8 fcf0 	bl	8000158 <__aeabi_dsub>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	2000      	movs	r0, #0
 800777e:	4959      	ldr	r1, [pc, #356]	; (80078e4 <__ieee754_exp+0x2cc>)
 8007780:	f7f8 fcea 	bl	8000158 <__aeabi_dsub>
 8007784:	e75f      	b.n	8007646 <__ieee754_exp+0x2e>
 8007786:	4b58      	ldr	r3, [pc, #352]	; (80078e8 <__ieee754_exp+0x2d0>)
 8007788:	429e      	cmp	r6, r3
 800778a:	f63f af7e 	bhi.w	800768a <__ieee754_exp+0x72>
 800778e:	4b57      	ldr	r3, [pc, #348]	; (80078ec <__ieee754_exp+0x2d4>)
 8007790:	429e      	cmp	r6, r3
 8007792:	d839      	bhi.n	8007808 <__ieee754_exp+0x1f0>
 8007794:	a33a      	add	r3, pc, #232	; (adr r3, 8007880 <__ieee754_exp+0x268>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fcdf 	bl	800015c <__adddf3>
 800779e:	2200      	movs	r2, #0
 80077a0:	4b50      	ldr	r3, [pc, #320]	; (80078e4 <__ieee754_exp+0x2cc>)
 80077a2:	f7f9 f91d 	bl	80009e0 <__aeabi_dcmpgt>
 80077a6:	b390      	cbz	r0, 800780e <__ieee754_exp+0x1f6>
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b4e      	ldr	r3, [pc, #312]	; (80078e4 <__ieee754_exp+0x2cc>)
 80077ac:	4628      	mov	r0, r5
 80077ae:	4621      	mov	r1, r4
 80077b0:	e747      	b.n	8007642 <__ieee754_exp+0x2a>
 80077b2:	4e4f      	ldr	r6, [pc, #316]	; (80078f0 <__ieee754_exp+0x2d8>)
 80077b4:	a340      	add	r3, pc, #256	; (adr r3, 80078b8 <__ieee754_exp+0x2a0>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	4446      	add	r6, r8
 80077bc:	4628      	mov	r0, r5
 80077be:	4621      	mov	r1, r4
 80077c0:	f7f8 fe7e 	bl	80004c0 <__aeabi_dmul>
 80077c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077c8:	f7f8 fcc8 	bl	800015c <__adddf3>
 80077cc:	f7f9 f928 	bl	8000a20 <__aeabi_d2iz>
 80077d0:	4680      	mov	r8, r0
 80077d2:	f7f8 fe0f 	bl	80003f4 <__aeabi_i2d>
 80077d6:	a33a      	add	r3, pc, #232	; (adr r3, 80078c0 <__ieee754_exp+0x2a8>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	f7f8 fe6e 	bl	80004c0 <__aeabi_dmul>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4628      	mov	r0, r5
 80077ea:	4621      	mov	r1, r4
 80077ec:	f7f8 fcb4 	bl	8000158 <__aeabi_dsub>
 80077f0:	a335      	add	r3, pc, #212	; (adr r3, 80078c8 <__ieee754_exp+0x2b0>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	4682      	mov	sl, r0
 80077f8:	468b      	mov	fp, r1
 80077fa:	4630      	mov	r0, r6
 80077fc:	4639      	mov	r1, r7
 80077fe:	f7f8 fe5f 	bl	80004c0 <__aeabi_dmul>
 8007802:	e9cd 0100 	strd	r0, r1, [sp]
 8007806:	e75a      	b.n	80076be <__ieee754_exp+0xa6>
 8007808:	f04f 0800 	mov.w	r8, #0
 800780c:	e75f      	b.n	80076ce <__ieee754_exp+0xb6>
 800780e:	4680      	mov	r8, r0
 8007810:	e75d      	b.n	80076ce <__ieee754_exp+0xb6>
 8007812:	f7f8 fe55 	bl	80004c0 <__aeabi_dmul>
 8007816:	4632      	mov	r2, r6
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	463b      	mov	r3, r7
 800781e:	2000      	movs	r0, #0
 8007820:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007824:	f7f8 fc98 	bl	8000158 <__aeabi_dsub>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 ff70 	bl	8000714 <__aeabi_ddiv>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800783c:	f7f8 fc8c 	bl	8000158 <__aeabi_dsub>
 8007840:	4652      	mov	r2, sl
 8007842:	465b      	mov	r3, fp
 8007844:	f7f8 fc88 	bl	8000158 <__aeabi_dsub>
 8007848:	460b      	mov	r3, r1
 800784a:	4602      	mov	r2, r0
 800784c:	4925      	ldr	r1, [pc, #148]	; (80078e4 <__ieee754_exp+0x2cc>)
 800784e:	2000      	movs	r0, #0
 8007850:	f7f8 fc82 	bl	8000158 <__aeabi_dsub>
 8007854:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8007858:	4598      	cmp	r8, r3
 800785a:	db02      	blt.n	8007862 <__ieee754_exp+0x24a>
 800785c:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 8007860:	e6f1      	b.n	8007646 <__ieee754_exp+0x2e>
 8007862:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
 8007866:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 800786a:	2200      	movs	r2, #0
 800786c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007870:	e6ff      	b.n	8007672 <__ieee754_exp+0x5a>
 8007872:	bf00      	nop
 8007874:	f3af 8000 	nop.w
 8007878:	fefa39ef 	.word	0xfefa39ef
 800787c:	40862e42 	.word	0x40862e42
 8007880:	8800759c 	.word	0x8800759c
 8007884:	7e37e43c 	.word	0x7e37e43c
 8007888:	d52d3051 	.word	0xd52d3051
 800788c:	c0874910 	.word	0xc0874910
 8007890:	72bea4d0 	.word	0x72bea4d0
 8007894:	3e663769 	.word	0x3e663769
 8007898:	c5d26bf1 	.word	0xc5d26bf1
 800789c:	3ebbbd41 	.word	0x3ebbbd41
 80078a0:	af25de2c 	.word	0xaf25de2c
 80078a4:	3f11566a 	.word	0x3f11566a
 80078a8:	16bebd93 	.word	0x16bebd93
 80078ac:	3f66c16c 	.word	0x3f66c16c
 80078b0:	5555553e 	.word	0x5555553e
 80078b4:	3fc55555 	.word	0x3fc55555
 80078b8:	652b82fe 	.word	0x652b82fe
 80078bc:	3ff71547 	.word	0x3ff71547
 80078c0:	fee00000 	.word	0xfee00000
 80078c4:	3fe62e42 	.word	0x3fe62e42
 80078c8:	35793c76 	.word	0x35793c76
 80078cc:	3dea39ef 	.word	0x3dea39ef
 80078d0:	40862e41 	.word	0x40862e41
 80078d4:	7fefffff 	.word	0x7fefffff
 80078d8:	3ff0a2b1 	.word	0x3ff0a2b1
 80078dc:	08009638 	.word	0x08009638
 80078e0:	08009648 	.word	0x08009648
 80078e4:	3ff00000 	.word	0x3ff00000
 80078e8:	3fd62e42 	.word	0x3fd62e42
 80078ec:	3e2fffff 	.word	0x3e2fffff
 80078f0:	08009628 	.word	0x08009628
 80078f4:	00000000 	.word	0x00000000

080078f8 <__ieee754_log>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007900:	b087      	sub	sp, #28
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	da24      	bge.n	8007956 <__ieee754_log+0x5e>
 800790c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007910:	4334      	orrs	r4, r6
 8007912:	d108      	bne.n	8007926 <__ieee754_log+0x2e>
 8007914:	2200      	movs	r2, #0
 8007916:	2300      	movs	r3, #0
 8007918:	2000      	movs	r0, #0
 800791a:	49c9      	ldr	r1, [pc, #804]	; (8007c40 <__ieee754_log+0x348>)
 800791c:	f7f8 fefa 	bl	8000714 <__aeabi_ddiv>
 8007920:	b007      	add	sp, #28
 8007922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007926:	2900      	cmp	r1, #0
 8007928:	da04      	bge.n	8007934 <__ieee754_log+0x3c>
 800792a:	f7f8 fc15 	bl	8000158 <__aeabi_dsub>
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	e7f3      	b.n	800791c <__ieee754_log+0x24>
 8007934:	2200      	movs	r2, #0
 8007936:	4bc3      	ldr	r3, [pc, #780]	; (8007c44 <__ieee754_log+0x34c>)
 8007938:	f7f8 fdc2 	bl	80004c0 <__aeabi_dmul>
 800793c:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	460d      	mov	r5, r1
 8007946:	49c0      	ldr	r1, [pc, #768]	; (8007c48 <__ieee754_log+0x350>)
 8007948:	428d      	cmp	r5, r1
 800794a:	dd06      	ble.n	800795a <__ieee754_log+0x62>
 800794c:	4610      	mov	r0, r2
 800794e:	4619      	mov	r1, r3
 8007950:	f7f8 fc04 	bl	800015c <__adddf3>
 8007954:	e7e4      	b.n	8007920 <__ieee754_log+0x28>
 8007956:	2600      	movs	r6, #0
 8007958:	e7f5      	b.n	8007946 <__ieee754_log+0x4e>
 800795a:	152c      	asrs	r4, r5, #20
 800795c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007960:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8007964:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007968:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800796c:	4426      	add	r6, r4
 800796e:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8007972:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8007976:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800797a:	ea41 0305 	orr.w	r3, r1, r5
 800797e:	4610      	mov	r0, r2
 8007980:	4619      	mov	r1, r3
 8007982:	2200      	movs	r2, #0
 8007984:	4bb1      	ldr	r3, [pc, #708]	; (8007c4c <__ieee754_log+0x354>)
 8007986:	f7f8 fbe7 	bl	8000158 <__aeabi_dsub>
 800798a:	1cab      	adds	r3, r5, #2
 800798c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007990:	2b02      	cmp	r3, #2
 8007992:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8007996:	4682      	mov	sl, r0
 8007998:	468b      	mov	fp, r1
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	dc5b      	bgt.n	8007a58 <__ieee754_log+0x160>
 80079a0:	2300      	movs	r3, #0
 80079a2:	f7f8 fff5 	bl	8000990 <__aeabi_dcmpeq>
 80079a6:	b1d0      	cbz	r0, 80079de <__ieee754_log+0xe6>
 80079a8:	2c00      	cmp	r4, #0
 80079aa:	f000 816e 	beq.w	8007c8a <__ieee754_log+0x392>
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7f8 fd20 	bl	80003f4 <__aeabi_i2d>
 80079b4:	a38e      	add	r3, pc, #568	; (adr r3, 8007bf0 <__ieee754_log+0x2f8>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	f7f8 fd7f 	bl	80004c0 <__aeabi_dmul>
 80079c2:	a38d      	add	r3, pc, #564	; (adr r3, 8007bf8 <__ieee754_log+0x300>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	4630      	mov	r0, r6
 80079ce:	4639      	mov	r1, r7
 80079d0:	f7f8 fd76 	bl	80004c0 <__aeabi_dmul>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4620      	mov	r0, r4
 80079da:	4629      	mov	r1, r5
 80079dc:	e7b8      	b.n	8007950 <__ieee754_log+0x58>
 80079de:	a388      	add	r3, pc, #544	; (adr r3, 8007c00 <__ieee754_log+0x308>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	4650      	mov	r0, sl
 80079e6:	4659      	mov	r1, fp
 80079e8:	f7f8 fd6a 	bl	80004c0 <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	2000      	movs	r0, #0
 80079f2:	4997      	ldr	r1, [pc, #604]	; (8007c50 <__ieee754_log+0x358>)
 80079f4:	f7f8 fbb0 	bl	8000158 <__aeabi_dsub>
 80079f8:	4652      	mov	r2, sl
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	465b      	mov	r3, fp
 8007a00:	4650      	mov	r0, sl
 8007a02:	4659      	mov	r1, fp
 8007a04:	f7f8 fd5c 	bl	80004c0 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fd56 	bl	80004c0 <__aeabi_dmul>
 8007a14:	4606      	mov	r6, r0
 8007a16:	460f      	mov	r7, r1
 8007a18:	b934      	cbnz	r4, 8007a28 <__ieee754_log+0x130>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4650      	mov	r0, sl
 8007a20:	4659      	mov	r1, fp
 8007a22:	f7f8 fb99 	bl	8000158 <__aeabi_dsub>
 8007a26:	e77b      	b.n	8007920 <__ieee754_log+0x28>
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f7f8 fce3 	bl	80003f4 <__aeabi_i2d>
 8007a2e:	a370      	add	r3, pc, #448	; (adr r3, 8007bf0 <__ieee754_log+0x2f8>)
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	4680      	mov	r8, r0
 8007a36:	4689      	mov	r9, r1
 8007a38:	f7f8 fd42 	bl	80004c0 <__aeabi_dmul>
 8007a3c:	a36e      	add	r3, pc, #440	; (adr r3, 8007bf8 <__ieee754_log+0x300>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	4640      	mov	r0, r8
 8007a48:	4649      	mov	r1, r9
 8007a4a:	f7f8 fd39 	bl	80004c0 <__aeabi_dmul>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	e0b2      	b.n	8007bbe <__ieee754_log+0x2c6>
 8007a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a5c:	f7f8 fb7e 	bl	800015c <__adddf3>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4650      	mov	r0, sl
 8007a66:	4659      	mov	r1, fp
 8007a68:	f7f8 fe54 	bl	8000714 <__aeabi_ddiv>
 8007a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f7f8 fcbf 	bl	80003f4 <__aeabi_i2d>
 8007a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	f7f8 fd1d 	bl	80004c0 <__aeabi_dmul>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8e:	f7f8 fd17 	bl	80004c0 <__aeabi_dmul>
 8007a92:	a35d      	add	r3, pc, #372	; (adr r3, 8007c08 <__ieee754_log+0x310>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	f7f8 fd10 	bl	80004c0 <__aeabi_dmul>
 8007aa0:	a35b      	add	r3, pc, #364	; (adr r3, 8007c10 <__ieee754_log+0x318>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fb59 	bl	800015c <__adddf3>
 8007aaa:	4632      	mov	r2, r6
 8007aac:	463b      	mov	r3, r7
 8007aae:	f7f8 fd07 	bl	80004c0 <__aeabi_dmul>
 8007ab2:	a359      	add	r3, pc, #356	; (adr r3, 8007c18 <__ieee754_log+0x320>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fb50 	bl	800015c <__adddf3>
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	f7f8 fcfe 	bl	80004c0 <__aeabi_dmul>
 8007ac4:	a356      	add	r3, pc, #344	; (adr r3, 8007c20 <__ieee754_log+0x328>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fb47 	bl	800015c <__adddf3>
 8007ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ad2:	f7f8 fcf5 	bl	80004c0 <__aeabi_dmul>
 8007ad6:	a354      	add	r3, pc, #336	; (adr r3, 8007c28 <__ieee754_log+0x330>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f8 fcec 	bl	80004c0 <__aeabi_dmul>
 8007ae8:	a351      	add	r3, pc, #324	; (adr r3, 8007c30 <__ieee754_log+0x338>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f7f8 fb35 	bl	800015c <__adddf3>
 8007af2:	4632      	mov	r2, r6
 8007af4:	463b      	mov	r3, r7
 8007af6:	f7f8 fce3 	bl	80004c0 <__aeabi_dmul>
 8007afa:	a34f      	add	r3, pc, #316	; (adr r3, 8007c38 <__ieee754_log+0x340>)
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f7f8 fb2c 	bl	800015c <__adddf3>
 8007b04:	4632      	mov	r2, r6
 8007b06:	463b      	mov	r3, r7
 8007b08:	f7f8 fcda 	bl	80004c0 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b14:	f7f8 fb22 	bl	800015c <__adddf3>
 8007b18:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8007b1c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007b20:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8007b24:	3551      	adds	r5, #81	; 0x51
 8007b26:	ea45 0508 	orr.w	r5, r5, r8
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	dd50      	ble.n	8007bd4 <__ieee754_log+0x2dc>
 8007b32:	2200      	movs	r2, #0
 8007b34:	4b46      	ldr	r3, [pc, #280]	; (8007c50 <__ieee754_log+0x358>)
 8007b36:	4650      	mov	r0, sl
 8007b38:	4659      	mov	r1, fp
 8007b3a:	f7f8 fcc1 	bl	80004c0 <__aeabi_dmul>
 8007b3e:	4652      	mov	r2, sl
 8007b40:	465b      	mov	r3, fp
 8007b42:	f7f8 fcbd 	bl	80004c0 <__aeabi_dmul>
 8007b46:	4680      	mov	r8, r0
 8007b48:	4689      	mov	r9, r1
 8007b4a:	b994      	cbnz	r4, 8007b72 <__ieee754_log+0x27a>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 fb02 	bl	800015c <__adddf3>
 8007b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b5c:	f7f8 fcb0 	bl	80004c0 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 faf6 	bl	8000158 <__aeabi_dsub>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	e755      	b.n	8007a1e <__ieee754_log+0x126>
 8007b72:	a31f      	add	r3, pc, #124	; (adr r3, 8007bf0 <__ieee754_log+0x2f8>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b7c:	f7f8 fca0 	bl	80004c0 <__aeabi_dmul>
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	4604      	mov	r4, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 fae6 	bl	800015c <__adddf3>
 8007b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b94:	f7f8 fc94 	bl	80004c0 <__aeabi_dmul>
 8007b98:	a317      	add	r3, pc, #92	; (adr r3, 8007bf8 <__ieee754_log+0x300>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba6:	f7f8 fc8b 	bl	80004c0 <__aeabi_dmul>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 fad3 	bl	800015c <__adddf3>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 facb 	bl	8000158 <__aeabi_dsub>
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	465b      	mov	r3, fp
 8007bc6:	f7f8 fac7 	bl	8000158 <__aeabi_dsub>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4620      	mov	r0, r4
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	e726      	b.n	8007a22 <__ieee754_log+0x12a>
 8007bd4:	2c00      	cmp	r4, #0
 8007bd6:	d13d      	bne.n	8007c54 <__ieee754_log+0x35c>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4650      	mov	r0, sl
 8007bde:	4659      	mov	r1, fp
 8007be0:	f7f8 faba 	bl	8000158 <__aeabi_dsub>
 8007be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007be8:	f7f8 fc6a 	bl	80004c0 <__aeabi_dmul>
 8007bec:	e7be      	b.n	8007b6c <__ieee754_log+0x274>
 8007bee:	bf00      	nop
 8007bf0:	fee00000 	.word	0xfee00000
 8007bf4:	3fe62e42 	.word	0x3fe62e42
 8007bf8:	35793c76 	.word	0x35793c76
 8007bfc:	3dea39ef 	.word	0x3dea39ef
 8007c00:	55555555 	.word	0x55555555
 8007c04:	3fd55555 	.word	0x3fd55555
 8007c08:	df3e5244 	.word	0xdf3e5244
 8007c0c:	3fc2f112 	.word	0x3fc2f112
 8007c10:	96cb03de 	.word	0x96cb03de
 8007c14:	3fc74664 	.word	0x3fc74664
 8007c18:	94229359 	.word	0x94229359
 8007c1c:	3fd24924 	.word	0x3fd24924
 8007c20:	55555593 	.word	0x55555593
 8007c24:	3fe55555 	.word	0x3fe55555
 8007c28:	d078c69f 	.word	0xd078c69f
 8007c2c:	3fc39a09 	.word	0x3fc39a09
 8007c30:	1d8e78af 	.word	0x1d8e78af
 8007c34:	3fcc71c5 	.word	0x3fcc71c5
 8007c38:	9997fa04 	.word	0x9997fa04
 8007c3c:	3fd99999 	.word	0x3fd99999
 8007c40:	c3500000 	.word	0xc3500000
 8007c44:	43500000 	.word	0x43500000
 8007c48:	7fefffff 	.word	0x7fefffff
 8007c4c:	3ff00000 	.word	0x3ff00000
 8007c50:	3fe00000 	.word	0x3fe00000
 8007c54:	a30e      	add	r3, pc, #56	; (adr r3, 8007c90 <__ieee754_log+0x398>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5e:	f7f8 fc2f 	bl	80004c0 <__aeabi_dmul>
 8007c62:	4632      	mov	r2, r6
 8007c64:	463b      	mov	r3, r7
 8007c66:	4604      	mov	r4, r0
 8007c68:	460d      	mov	r5, r1
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	f7f8 fa73 	bl	8000158 <__aeabi_dsub>
 8007c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c76:	f7f8 fc23 	bl	80004c0 <__aeabi_dmul>
 8007c7a:	a307      	add	r3, pc, #28	; (adr r3, 8007c98 <__ieee754_log+0x3a0>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	4606      	mov	r6, r0
 8007c82:	460f      	mov	r7, r1
 8007c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c88:	e6df      	b.n	8007a4a <__ieee754_log+0x152>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	e647      	b.n	8007920 <__ieee754_log+0x28>
 8007c90:	fee00000 	.word	0xfee00000
 8007c94:	3fe62e42 	.word	0x3fe62e42
 8007c98:	35793c76 	.word	0x35793c76
 8007c9c:	3dea39ef 	.word	0x3dea39ef

08007ca0 <__ieee754_log10>:
 8007ca0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4604      	mov	r4, r0
 8007cac:	460d      	mov	r5, r1
 8007cae:	460b      	mov	r3, r1
 8007cb0:	da28      	bge.n	8007d04 <__ieee754_log10+0x64>
 8007cb2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007cb6:	4332      	orrs	r2, r6
 8007cb8:	d107      	bne.n	8007cca <__ieee754_log10+0x2a>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	4935      	ldr	r1, [pc, #212]	; (8007d98 <__ieee754_log10+0xf8>)
 8007cc2:	f7f8 fd27 	bl	8000714 <__aeabi_ddiv>
 8007cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	da06      	bge.n	8007cdc <__ieee754_log10+0x3c>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	f7f8 fa41 	bl	8000158 <__aeabi_dsub>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e7f2      	b.n	8007cc2 <__ieee754_log10+0x22>
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4b2f      	ldr	r3, [pc, #188]	; (8007d9c <__ieee754_log10+0xfc>)
 8007ce0:	f7f8 fbee 	bl	80004c0 <__aeabi_dmul>
 8007ce4:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	460b      	mov	r3, r1
 8007cee:	492c      	ldr	r1, [pc, #176]	; (8007da0 <__ieee754_log10+0x100>)
 8007cf0:	428b      	cmp	r3, r1
 8007cf2:	dd09      	ble.n	8007d08 <__ieee754_log10+0x68>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f7f8 fa2e 	bl	800015c <__adddf3>
 8007d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d04:	2200      	movs	r2, #0
 8007d06:	e7f2      	b.n	8007cee <__ieee754_log10+0x4e>
 8007d08:	1518      	asrs	r0, r3, #20
 8007d0a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007d0e:	4410      	add	r0, r2
 8007d10:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8007d14:	4448      	add	r0, r9
 8007d16:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8007d1a:	f7f8 fb6b 	bl	80003f4 <__aeabi_i2d>
 8007d1e:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8007d22:	3303      	adds	r3, #3
 8007d24:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f7ff fde2 	bl	80078f8 <__ieee754_log>
 8007d34:	a312      	add	r3, pc, #72	; (adr r3, 8007d80 <__ieee754_log10+0xe0>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	4630      	mov	r0, r6
 8007d40:	4639      	mov	r1, r7
 8007d42:	f7f8 fbbd 	bl	80004c0 <__aeabi_dmul>
 8007d46:	a310      	add	r3, pc, #64	; (adr r3, 8007d88 <__ieee754_log10+0xe8>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 fbb4 	bl	80004c0 <__aeabi_dmul>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 f9fc 	bl	800015c <__adddf3>
 8007d64:	a30a      	add	r3, pc, #40	; (adr r3, 8007d90 <__ieee754_log10+0xf0>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	460d      	mov	r5, r1
 8007d6e:	4630      	mov	r0, r6
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 fba5 	bl	80004c0 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	e7bd      	b.n	8007cfc <__ieee754_log10+0x5c>
 8007d80:	11f12b36 	.word	0x11f12b36
 8007d84:	3d59fef3 	.word	0x3d59fef3
 8007d88:	1526e50e 	.word	0x1526e50e
 8007d8c:	3fdbcb7b 	.word	0x3fdbcb7b
 8007d90:	509f6000 	.word	0x509f6000
 8007d94:	3fd34413 	.word	0x3fd34413
 8007d98:	c3500000 	.word	0xc3500000
 8007d9c:	43500000 	.word	0x43500000
 8007da0:	7fefffff 	.word	0x7fefffff
 8007da4:	00000000 	.word	0x00000000

08007da8 <__ieee754_pow>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	b093      	sub	sp, #76	; 0x4c
 8007dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007db2:	9e03      	ldr	r6, [sp, #12]
 8007db4:	9a02      	ldr	r2, [sp, #8]
 8007db6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007dba:	ea55 0302 	orrs.w	r3, r5, r2
 8007dbe:	4607      	mov	r7, r0
 8007dc0:	4688      	mov	r8, r1
 8007dc2:	4682      	mov	sl, r0
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	f000 849e 	beq.w	8008706 <__ieee754_pow+0x95e>
 8007dca:	4b77      	ldr	r3, [pc, #476]	; (8007fa8 <__ieee754_pow+0x200>)
 8007dcc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007dd0:	429c      	cmp	r4, r3
 8007dd2:	dc09      	bgt.n	8007de8 <__ieee754_pow+0x40>
 8007dd4:	d103      	bne.n	8007dde <__ieee754_pow+0x36>
 8007dd6:	b938      	cbnz	r0, 8007de8 <__ieee754_pow+0x40>
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	dc0d      	bgt.n	8007df8 <__ieee754_pow+0x50>
 8007ddc:	e001      	b.n	8007de2 <__ieee754_pow+0x3a>
 8007dde:	429d      	cmp	r5, r3
 8007de0:	dc02      	bgt.n	8007de8 <__ieee754_pow+0x40>
 8007de2:	429d      	cmp	r5, r3
 8007de4:	d10e      	bne.n	8007e04 <__ieee754_pow+0x5c>
 8007de6:	b16a      	cbz	r2, 8007e04 <__ieee754_pow+0x5c>
 8007de8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007dec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007df0:	ea54 030a 	orrs.w	r3, r4, sl
 8007df4:	f000 8487 	beq.w	8008706 <__ieee754_pow+0x95e>
 8007df8:	486c      	ldr	r0, [pc, #432]	; (8007fac <__ieee754_pow+0x204>)
 8007dfa:	b013      	add	sp, #76	; 0x4c
 8007dfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e00:	f000 bd7c 	b.w	80088fc <nan>
 8007e04:	f1b9 0f00 	cmp.w	r9, #0
 8007e08:	da4f      	bge.n	8007eaa <__ieee754_pow+0x102>
 8007e0a:	4b69      	ldr	r3, [pc, #420]	; (8007fb0 <__ieee754_pow+0x208>)
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	dc4a      	bgt.n	8007ea6 <__ieee754_pow+0xfe>
 8007e10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e14:	429d      	cmp	r5, r3
 8007e16:	dd48      	ble.n	8007eaa <__ieee754_pow+0x102>
 8007e18:	152b      	asrs	r3, r5, #20
 8007e1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e1e:	2b14      	cmp	r3, #20
 8007e20:	dd24      	ble.n	8007e6c <__ieee754_pow+0xc4>
 8007e22:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e26:	fa22 f103 	lsr.w	r1, r2, r3
 8007e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d13b      	bne.n	8007eaa <__ieee754_pow+0x102>
 8007e32:	f001 0101 	and.w	r1, r1, #1
 8007e36:	f1c1 0302 	rsb	r3, r1, #2
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d156      	bne.n	8007eee <__ieee754_pow+0x146>
 8007e40:	4b59      	ldr	r3, [pc, #356]	; (8007fa8 <__ieee754_pow+0x200>)
 8007e42:	429d      	cmp	r5, r3
 8007e44:	d122      	bne.n	8007e8c <__ieee754_pow+0xe4>
 8007e46:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e4a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007e4e:	ea53 030a 	orrs.w	r3, r3, sl
 8007e52:	f000 8458 	beq.w	8008706 <__ieee754_pow+0x95e>
 8007e56:	4b57      	ldr	r3, [pc, #348]	; (8007fb4 <__ieee754_pow+0x20c>)
 8007e58:	429c      	cmp	r4, r3
 8007e5a:	dd28      	ble.n	8007eae <__ieee754_pow+0x106>
 8007e5c:	2e00      	cmp	r6, #0
 8007e5e:	f280 8456 	bge.w	800870e <__ieee754_pow+0x966>
 8007e62:	2000      	movs	r0, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	b013      	add	sp, #76	; 0x4c
 8007e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d13c      	bne.n	8007eea <__ieee754_pow+0x142>
 8007e70:	f1c3 0314 	rsb	r3, r3, #20
 8007e74:	fa45 f103 	asr.w	r1, r5, r3
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	429d      	cmp	r5, r3
 8007e7e:	f040 844e 	bne.w	800871e <__ieee754_pow+0x976>
 8007e82:	f001 0101 	and.w	r1, r1, #1
 8007e86:	f1c1 0302 	rsb	r3, r1, #2
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4b4a      	ldr	r3, [pc, #296]	; (8007fb8 <__ieee754_pow+0x210>)
 8007e8e:	429d      	cmp	r5, r3
 8007e90:	d114      	bne.n	8007ebc <__ieee754_pow+0x114>
 8007e92:	2e00      	cmp	r6, #0
 8007e94:	f280 843f 	bge.w	8008716 <__ieee754_pow+0x96e>
 8007e98:	463a      	mov	r2, r7
 8007e9a:	4643      	mov	r3, r8
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4946      	ldr	r1, [pc, #280]	; (8007fb8 <__ieee754_pow+0x210>)
 8007ea0:	f7f8 fc38 	bl	8000714 <__aeabi_ddiv>
 8007ea4:	e7df      	b.n	8007e66 <__ieee754_pow+0xbe>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e7c7      	b.n	8007e3a <__ieee754_pow+0x92>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e7c5      	b.n	8007e3a <__ieee754_pow+0x92>
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	dad7      	bge.n	8007e62 <__ieee754_pow+0xba>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	9802      	ldr	r0, [sp, #8]
 8007eb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007eba:	e7d4      	b.n	8007e66 <__ieee754_pow+0xbe>
 8007ebc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007ec0:	d106      	bne.n	8007ed0 <__ieee754_pow+0x128>
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4643      	mov	r3, r8
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	4641      	mov	r1, r8
 8007eca:	f7f8 faf9 	bl	80004c0 <__aeabi_dmul>
 8007ece:	e7ca      	b.n	8007e66 <__ieee754_pow+0xbe>
 8007ed0:	4b3a      	ldr	r3, [pc, #232]	; (8007fbc <__ieee754_pow+0x214>)
 8007ed2:	429e      	cmp	r6, r3
 8007ed4:	d10b      	bne.n	8007eee <__ieee754_pow+0x146>
 8007ed6:	f1b9 0f00 	cmp.w	r9, #0
 8007eda:	db08      	blt.n	8007eee <__ieee754_pow+0x146>
 8007edc:	4638      	mov	r0, r7
 8007ede:	4641      	mov	r1, r8
 8007ee0:	b013      	add	sp, #76	; 0x4c
 8007ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee6:	f000 bc51 	b.w	800878c <__ieee754_sqrt>
 8007eea:	2300      	movs	r3, #0
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4638      	mov	r0, r7
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	f000 fcf7 	bl	80088e4 <fabs>
 8007ef6:	f1ba 0f00 	cmp.w	sl, #0
 8007efa:	d125      	bne.n	8007f48 <__ieee754_pow+0x1a0>
 8007efc:	b124      	cbz	r4, 8007f08 <__ieee754_pow+0x160>
 8007efe:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <__ieee754_pow+0x210>)
 8007f00:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d11f      	bne.n	8007f48 <__ieee754_pow+0x1a0>
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	da05      	bge.n	8007f18 <__ieee754_pow+0x170>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	2000      	movs	r0, #0
 8007f12:	4929      	ldr	r1, [pc, #164]	; (8007fb8 <__ieee754_pow+0x210>)
 8007f14:	f7f8 fbfe 	bl	8000714 <__aeabi_ddiv>
 8007f18:	f1b9 0f00 	cmp.w	r9, #0
 8007f1c:	daa3      	bge.n	8007e66 <__ieee754_pow+0xbe>
 8007f1e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f22:	9b00      	ldr	r3, [sp, #0]
 8007f24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f28:	4323      	orrs	r3, r4
 8007f2a:	d106      	bne.n	8007f3a <__ieee754_pow+0x192>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f7f8 f912 	bl	8000158 <__aeabi_dsub>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	e7b2      	b.n	8007ea0 <__ieee754_pow+0xf8>
 8007f3a:	9b00      	ldr	r3, [sp, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d192      	bne.n	8007e66 <__ieee754_pow+0xbe>
 8007f40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f44:	4619      	mov	r1, r3
 8007f46:	e78e      	b.n	8007e66 <__ieee754_pow+0xbe>
 8007f48:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007f4c:	f109 33ff 	add.w	r3, r9, #4294967295
 8007f50:	930c      	str	r3, [sp, #48]	; 0x30
 8007f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	d104      	bne.n	8007f64 <__ieee754_pow+0x1bc>
 8007f5a:	463a      	mov	r2, r7
 8007f5c:	4643      	mov	r3, r8
 8007f5e:	4638      	mov	r0, r7
 8007f60:	4641      	mov	r1, r8
 8007f62:	e7e5      	b.n	8007f30 <__ieee754_pow+0x188>
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <__ieee754_pow+0x218>)
 8007f66:	429d      	cmp	r5, r3
 8007f68:	f340 80fc 	ble.w	8008164 <__ieee754_pow+0x3bc>
 8007f6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f70:	429d      	cmp	r5, r3
 8007f72:	dd0b      	ble.n	8007f8c <__ieee754_pow+0x1e4>
 8007f74:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <__ieee754_pow+0x20c>)
 8007f76:	429c      	cmp	r4, r3
 8007f78:	dc0e      	bgt.n	8007f98 <__ieee754_pow+0x1f0>
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	f6bf af71 	bge.w	8007e62 <__ieee754_pow+0xba>
 8007f80:	a307      	add	r3, pc, #28	; (adr r3, 8007fa0 <__ieee754_pow+0x1f8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	e79e      	b.n	8007eca <__ieee754_pow+0x122>
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <__ieee754_pow+0x21c>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	ddf3      	ble.n	8007f7a <__ieee754_pow+0x1d2>
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <__ieee754_pow+0x210>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	dd17      	ble.n	8007fc8 <__ieee754_pow+0x220>
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	dcf1      	bgt.n	8007f80 <__ieee754_pow+0x1d8>
 8007f9c:	e761      	b.n	8007e62 <__ieee754_pow+0xba>
 8007f9e:	bf00      	nop
 8007fa0:	8800759c 	.word	0x8800759c
 8007fa4:	7e37e43c 	.word	0x7e37e43c
 8007fa8:	7ff00000 	.word	0x7ff00000
 8007fac:	080095e5 	.word	0x080095e5
 8007fb0:	433fffff 	.word	0x433fffff
 8007fb4:	3fefffff 	.word	0x3fefffff
 8007fb8:	3ff00000 	.word	0x3ff00000
 8007fbc:	3fe00000 	.word	0x3fe00000
 8007fc0:	41e00000 	.word	0x41e00000
 8007fc4:	3feffffe 	.word	0x3feffffe
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4b61      	ldr	r3, [pc, #388]	; (8008150 <__ieee754_pow+0x3a8>)
 8007fcc:	f7f8 f8c4 	bl	8000158 <__aeabi_dsub>
 8007fd0:	a355      	add	r3, pc, #340	; (adr r3, 8008128 <__ieee754_pow+0x380>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	f7f8 fa71 	bl	80004c0 <__aeabi_dmul>
 8007fde:	a354      	add	r3, pc, #336	; (adr r3, 8008130 <__ieee754_pow+0x388>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	460f      	mov	r7, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 fa68 	bl	80004c0 <__aeabi_dmul>
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4682      	mov	sl, r0
 8007ff4:	468b      	mov	fp, r1
 8007ff6:	4b57      	ldr	r3, [pc, #348]	; (8008154 <__ieee754_pow+0x3ac>)
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7f8 fa60 	bl	80004c0 <__aeabi_dmul>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	a14c      	add	r1, pc, #304	; (adr r1, 8008138 <__ieee754_pow+0x390>)
 8008006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800800a:	f7f8 f8a5 	bl	8000158 <__aeabi_dsub>
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	f7f8 fa55 	bl	80004c0 <__aeabi_dmul>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	2000      	movs	r0, #0
 800801c:	494e      	ldr	r1, [pc, #312]	; (8008158 <__ieee754_pow+0x3b0>)
 800801e:	f7f8 f89b 	bl	8000158 <__aeabi_dsub>
 8008022:	4622      	mov	r2, r4
 8008024:	462b      	mov	r3, r5
 8008026:	4680      	mov	r8, r0
 8008028:	4689      	mov	r9, r1
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	f7f8 fa47 	bl	80004c0 <__aeabi_dmul>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4640      	mov	r0, r8
 8008038:	4649      	mov	r1, r9
 800803a:	f7f8 fa41 	bl	80004c0 <__aeabi_dmul>
 800803e:	a340      	add	r3, pc, #256	; (adr r3, 8008140 <__ieee754_pow+0x398>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f7f8 fa3c 	bl	80004c0 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4650      	mov	r0, sl
 800804e:	4659      	mov	r1, fp
 8008050:	f7f8 f882 	bl	8000158 <__aeabi_dsub>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	4630      	mov	r0, r6
 800805e:	4639      	mov	r1, r7
 8008060:	f7f8 f87c 	bl	800015c <__adddf3>
 8008064:	2000      	movs	r0, #0
 8008066:	468b      	mov	fp, r1
 8008068:	4682      	mov	sl, r0
 800806a:	4632      	mov	r2, r6
 800806c:	463b      	mov	r3, r7
 800806e:	f7f8 f873 	bl	8000158 <__aeabi_dsub>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4620      	mov	r0, r4
 8008078:	4629      	mov	r1, r5
 800807a:	f7f8 f86d 	bl	8000158 <__aeabi_dsub>
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008082:	3b01      	subs	r3, #1
 8008084:	4313      	orrs	r3, r2
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	bf0c      	ite	eq
 800808c:	4c33      	ldreq	r4, [pc, #204]	; (800815c <__ieee754_pow+0x3b4>)
 800808e:	4c30      	ldrne	r4, [pc, #192]	; (8008150 <__ieee754_pow+0x3a8>)
 8008090:	4606      	mov	r6, r0
 8008092:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008096:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800809a:	2400      	movs	r4, #0
 800809c:	460f      	mov	r7, r1
 800809e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a2:	4622      	mov	r2, r4
 80080a4:	462b      	mov	r3, r5
 80080a6:	f7f8 f857 	bl	8000158 <__aeabi_dsub>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	f7f8 fa07 	bl	80004c0 <__aeabi_dmul>
 80080b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080b6:	4680      	mov	r8, r0
 80080b8:	4689      	mov	r9, r1
 80080ba:	4630      	mov	r0, r6
 80080bc:	4639      	mov	r1, r7
 80080be:	f7f8 f9ff 	bl	80004c0 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 f847 	bl	800015c <__adddf3>
 80080ce:	4622      	mov	r2, r4
 80080d0:	462b      	mov	r3, r5
 80080d2:	4680      	mov	r8, r0
 80080d4:	4689      	mov	r9, r1
 80080d6:	4650      	mov	r0, sl
 80080d8:	4659      	mov	r1, fp
 80080da:	f7f8 f9f1 	bl	80004c0 <__aeabi_dmul>
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	460b      	mov	r3, r1
 80080e4:	4602      	mov	r2, r0
 80080e6:	4649      	mov	r1, r9
 80080e8:	4640      	mov	r0, r8
 80080ea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80080ee:	f7f8 f835 	bl	800015c <__adddf3>
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <__ieee754_pow+0x3b8>)
 80080f4:	4682      	mov	sl, r0
 80080f6:	4299      	cmp	r1, r3
 80080f8:	460f      	mov	r7, r1
 80080fa:	460e      	mov	r6, r1
 80080fc:	f340 82da 	ble.w	80086b4 <__ieee754_pow+0x90c>
 8008100:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008104:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008108:	4303      	orrs	r3, r0
 800810a:	f000 81d5 	beq.w	80084b8 <__ieee754_pow+0x710>
 800810e:	a30e      	add	r3, pc, #56	; (adr r3, 8008148 <__ieee754_pow+0x3a0>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008118:	f7f8 f9d2 	bl	80004c0 <__aeabi_dmul>
 800811c:	a30a      	add	r3, pc, #40	; (adr r3, 8008148 <__ieee754_pow+0x3a0>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	e6d2      	b.n	8007eca <__ieee754_pow+0x122>
 8008124:	f3af 8000 	nop.w
 8008128:	60000000 	.word	0x60000000
 800812c:	3ff71547 	.word	0x3ff71547
 8008130:	f85ddf44 	.word	0xf85ddf44
 8008134:	3e54ae0b 	.word	0x3e54ae0b
 8008138:	55555555 	.word	0x55555555
 800813c:	3fd55555 	.word	0x3fd55555
 8008140:	652b82fe 	.word	0x652b82fe
 8008144:	3ff71547 	.word	0x3ff71547
 8008148:	8800759c 	.word	0x8800759c
 800814c:	7e37e43c 	.word	0x7e37e43c
 8008150:	3ff00000 	.word	0x3ff00000
 8008154:	3fd00000 	.word	0x3fd00000
 8008158:	3fe00000 	.word	0x3fe00000
 800815c:	bff00000 	.word	0xbff00000
 8008160:	408fffff 	.word	0x408fffff
 8008164:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	da05      	bge.n	800817a <__ieee754_pow+0x3d2>
 800816e:	4bca      	ldr	r3, [pc, #808]	; (8008498 <__ieee754_pow+0x6f0>)
 8008170:	f7f8 f9a6 	bl	80004c0 <__aeabi_dmul>
 8008174:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008178:	460c      	mov	r4, r1
 800817a:	1523      	asrs	r3, r4, #20
 800817c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008180:	4413      	add	r3, r2
 8008182:	9307      	str	r3, [sp, #28]
 8008184:	4bc5      	ldr	r3, [pc, #788]	; (800849c <__ieee754_pow+0x6f4>)
 8008186:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800818a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800818e:	429c      	cmp	r4, r3
 8008190:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008194:	dd08      	ble.n	80081a8 <__ieee754_pow+0x400>
 8008196:	4bc2      	ldr	r3, [pc, #776]	; (80084a0 <__ieee754_pow+0x6f8>)
 8008198:	429c      	cmp	r4, r3
 800819a:	f340 8154 	ble.w	8008446 <__ieee754_pow+0x69e>
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081a4:	3301      	adds	r3, #1
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	2600      	movs	r6, #0
 80081aa:	4629      	mov	r1, r5
 80081ac:	00f3      	lsls	r3, r6, #3
 80081ae:	930d      	str	r3, [sp, #52]	; 0x34
 80081b0:	4bbc      	ldr	r3, [pc, #752]	; (80084a4 <__ieee754_pow+0x6fc>)
 80081b2:	00f2      	lsls	r2, r6, #3
 80081b4:	4413      	add	r3, r2
 80081b6:	cb18      	ldmia	r3, {r3, r4}
 80081b8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80081bc:	461a      	mov	r2, r3
 80081be:	4623      	mov	r3, r4
 80081c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081c4:	f7f7 ffc8 	bl	8000158 <__aeabi_dsub>
 80081c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80081d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081d4:	f7f7 ffc2 	bl	800015c <__adddf3>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	2000      	movs	r0, #0
 80081de:	49b2      	ldr	r1, [pc, #712]	; (80084a8 <__ieee754_pow+0x700>)
 80081e0:	f7f8 fa98 	bl	8000714 <__aeabi_ddiv>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80081f0:	f7f8 f966 	bl	80004c0 <__aeabi_dmul>
 80081f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081fc:	f04f 0a00 	mov.w	sl, #0
 8008200:	2200      	movs	r2, #0
 8008202:	106d      	asrs	r5, r5, #1
 8008204:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008208:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800820c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008210:	4659      	mov	r1, fp
 8008212:	4650      	mov	r0, sl
 8008214:	4614      	mov	r4, r2
 8008216:	461d      	mov	r5, r3
 8008218:	f7f8 f952 	bl	80004c0 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008224:	f7f7 ff98 	bl	8000158 <__aeabi_dsub>
 8008228:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800822c:	4606      	mov	r6, r0
 800822e:	460f      	mov	r7, r1
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f7f7 ff90 	bl	8000158 <__aeabi_dsub>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008240:	f7f7 ff8a 	bl	8000158 <__aeabi_dsub>
 8008244:	465b      	mov	r3, fp
 8008246:	4652      	mov	r2, sl
 8008248:	f7f8 f93a 	bl	80004c0 <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f7 ff80 	bl	8000158 <__aeabi_dsub>
 8008258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800825c:	f7f8 f930 	bl	80004c0 <__aeabi_dmul>
 8008260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008264:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	f7f8 f928 	bl	80004c0 <__aeabi_dmul>
 8008270:	a377      	add	r3, pc, #476	; (adr r3, 8008450 <__ieee754_pow+0x6a8>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	4604      	mov	r4, r0
 8008278:	460d      	mov	r5, r1
 800827a:	f7f8 f921 	bl	80004c0 <__aeabi_dmul>
 800827e:	a376      	add	r3, pc, #472	; (adr r3, 8008458 <__ieee754_pow+0x6b0>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f7 ff6a 	bl	800015c <__adddf3>
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f8 f918 	bl	80004c0 <__aeabi_dmul>
 8008290:	a373      	add	r3, pc, #460	; (adr r3, 8008460 <__ieee754_pow+0x6b8>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f7 ff61 	bl	800015c <__adddf3>
 800829a:	4622      	mov	r2, r4
 800829c:	462b      	mov	r3, r5
 800829e:	f7f8 f90f 	bl	80004c0 <__aeabi_dmul>
 80082a2:	a371      	add	r3, pc, #452	; (adr r3, 8008468 <__ieee754_pow+0x6c0>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 ff58 	bl	800015c <__adddf3>
 80082ac:	4622      	mov	r2, r4
 80082ae:	462b      	mov	r3, r5
 80082b0:	f7f8 f906 	bl	80004c0 <__aeabi_dmul>
 80082b4:	a36e      	add	r3, pc, #440	; (adr r3, 8008470 <__ieee754_pow+0x6c8>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f7 ff4f 	bl	800015c <__adddf3>
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	f7f8 f8fd 	bl	80004c0 <__aeabi_dmul>
 80082c6:	a36c      	add	r3, pc, #432	; (adr r3, 8008478 <__ieee754_pow+0x6d0>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f7 ff46 	bl	800015c <__adddf3>
 80082d0:	4622      	mov	r2, r4
 80082d2:	4606      	mov	r6, r0
 80082d4:	460f      	mov	r7, r1
 80082d6:	462b      	mov	r3, r5
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	f7f8 f8f0 	bl	80004c0 <__aeabi_dmul>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f8 f8ea 	bl	80004c0 <__aeabi_dmul>
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082f4:	465b      	mov	r3, fp
 80082f6:	4652      	mov	r2, sl
 80082f8:	f7f7 ff30 	bl	800015c <__adddf3>
 80082fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008300:	f7f8 f8de 	bl	80004c0 <__aeabi_dmul>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f7 ff28 	bl	800015c <__adddf3>
 800830c:	465b      	mov	r3, fp
 800830e:	4606      	mov	r6, r0
 8008310:	460f      	mov	r7, r1
 8008312:	4652      	mov	r2, sl
 8008314:	4659      	mov	r1, fp
 8008316:	4650      	mov	r0, sl
 8008318:	f7f8 f8d2 	bl	80004c0 <__aeabi_dmul>
 800831c:	2200      	movs	r2, #0
 800831e:	4b63      	ldr	r3, [pc, #396]	; (80084ac <__ieee754_pow+0x704>)
 8008320:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008324:	f7f7 ff1a 	bl	800015c <__adddf3>
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	f7f7 ff16 	bl	800015c <__adddf3>
 8008330:	4650      	mov	r0, sl
 8008332:	460d      	mov	r5, r1
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4650      	mov	r0, sl
 800833a:	4659      	mov	r1, fp
 800833c:	f7f8 f8c0 	bl	80004c0 <__aeabi_dmul>
 8008340:	2200      	movs	r2, #0
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	4b59      	ldr	r3, [pc, #356]	; (80084ac <__ieee754_pow+0x704>)
 8008348:	4629      	mov	r1, r5
 800834a:	4650      	mov	r0, sl
 800834c:	f7f7 ff04 	bl	8000158 <__aeabi_dsub>
 8008350:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008354:	f7f7 ff00 	bl	8000158 <__aeabi_dsub>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4630      	mov	r0, r6
 800835e:	4639      	mov	r1, r7
 8008360:	f7f7 fefa 	bl	8000158 <__aeabi_dsub>
 8008364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008368:	f7f8 f8aa 	bl	80004c0 <__aeabi_dmul>
 800836c:	462b      	mov	r3, r5
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008376:	4652      	mov	r2, sl
 8008378:	f7f8 f8a2 	bl	80004c0 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4630      	mov	r0, r6
 8008382:	4639      	mov	r1, r7
 8008384:	f7f7 feea 	bl	800015c <__adddf3>
 8008388:	4606      	mov	r6, r0
 800838a:	460f      	mov	r7, r1
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4640      	mov	r0, r8
 8008392:	4649      	mov	r1, r9
 8008394:	f7f7 fee2 	bl	800015c <__adddf3>
 8008398:	a339      	add	r3, pc, #228	; (adr r3, 8008480 <__ieee754_pow+0x6d8>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	4650      	mov	r0, sl
 80083a0:	460d      	mov	r5, r1
 80083a2:	f7f8 f88d 	bl	80004c0 <__aeabi_dmul>
 80083a6:	4642      	mov	r2, r8
 80083a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ac:	464b      	mov	r3, r9
 80083ae:	4629      	mov	r1, r5
 80083b0:	4650      	mov	r0, sl
 80083b2:	f7f7 fed1 	bl	8000158 <__aeabi_dsub>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4630      	mov	r0, r6
 80083bc:	4639      	mov	r1, r7
 80083be:	f7f7 fecb 	bl	8000158 <__aeabi_dsub>
 80083c2:	a331      	add	r3, pc, #196	; (adr r3, 8008488 <__ieee754_pow+0x6e0>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f8 f87a 	bl	80004c0 <__aeabi_dmul>
 80083cc:	a330      	add	r3, pc, #192	; (adr r3, 8008490 <__ieee754_pow+0x6e8>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	4606      	mov	r6, r0
 80083d4:	460f      	mov	r7, r1
 80083d6:	4650      	mov	r0, sl
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f8 f871 	bl	80004c0 <__aeabi_dmul>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f7 feb9 	bl	800015c <__adddf3>
 80083ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ec:	4b30      	ldr	r3, [pc, #192]	; (80084b0 <__ieee754_pow+0x708>)
 80083ee:	4413      	add	r3, r2
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	f7f7 feb2 	bl	800015c <__adddf3>
 80083f8:	4604      	mov	r4, r0
 80083fa:	9807      	ldr	r0, [sp, #28]
 80083fc:	460d      	mov	r5, r1
 80083fe:	f7f7 fff9 	bl	80003f4 <__aeabi_i2d>
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008408:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <__ieee754_pow+0x70c>)
 800840a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800840e:	4413      	add	r3, r2
 8008410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	f7f7 fea0 	bl	800015c <__adddf3>
 800841c:	4642      	mov	r2, r8
 800841e:	464b      	mov	r3, r9
 8008420:	f7f7 fe9c 	bl	800015c <__adddf3>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	f7f7 fe98 	bl	800015c <__adddf3>
 800842c:	4632      	mov	r2, r6
 800842e:	463b      	mov	r3, r7
 8008430:	4650      	mov	r0, sl
 8008432:	468b      	mov	fp, r1
 8008434:	f7f7 fe90 	bl	8000158 <__aeabi_dsub>
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	f7f7 fe8c 	bl	8000158 <__aeabi_dsub>
 8008440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008444:	e613      	b.n	800806e <__ieee754_pow+0x2c6>
 8008446:	2601      	movs	r6, #1
 8008448:	e6af      	b.n	80081aa <__ieee754_pow+0x402>
 800844a:	bf00      	nop
 800844c:	f3af 8000 	nop.w
 8008450:	4a454eef 	.word	0x4a454eef
 8008454:	3fca7e28 	.word	0x3fca7e28
 8008458:	93c9db65 	.word	0x93c9db65
 800845c:	3fcd864a 	.word	0x3fcd864a
 8008460:	a91d4101 	.word	0xa91d4101
 8008464:	3fd17460 	.word	0x3fd17460
 8008468:	518f264d 	.word	0x518f264d
 800846c:	3fd55555 	.word	0x3fd55555
 8008470:	db6fabff 	.word	0xdb6fabff
 8008474:	3fdb6db6 	.word	0x3fdb6db6
 8008478:	33333303 	.word	0x33333303
 800847c:	3fe33333 	.word	0x3fe33333
 8008480:	e0000000 	.word	0xe0000000
 8008484:	3feec709 	.word	0x3feec709
 8008488:	dc3a03fd 	.word	0xdc3a03fd
 800848c:	3feec709 	.word	0x3feec709
 8008490:	145b01f5 	.word	0x145b01f5
 8008494:	be3e2fe0 	.word	0xbe3e2fe0
 8008498:	43400000 	.word	0x43400000
 800849c:	0003988e 	.word	0x0003988e
 80084a0:	000bb679 	.word	0x000bb679
 80084a4:	08009658 	.word	0x08009658
 80084a8:	3ff00000 	.word	0x3ff00000
 80084ac:	40080000 	.word	0x40080000
 80084b0:	08009678 	.word	0x08009678
 80084b4:	08009668 	.word	0x08009668
 80084b8:	a39b      	add	r3, pc, #620	; (adr r3, 8008728 <__ieee754_pow+0x980>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	4640      	mov	r0, r8
 80084c0:	4649      	mov	r1, r9
 80084c2:	f7f7 fe4b 	bl	800015c <__adddf3>
 80084c6:	4622      	mov	r2, r4
 80084c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084cc:	462b      	mov	r3, r5
 80084ce:	4650      	mov	r0, sl
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 fe41 	bl	8000158 <__aeabi_dsub>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084de:	f7f8 fa7f 	bl	80009e0 <__aeabi_dcmpgt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f47f ae13 	bne.w	800810e <__ieee754_pow+0x366>
 80084e8:	4aa3      	ldr	r2, [pc, #652]	; (8008778 <__ieee754_pow+0x9d0>)
 80084ea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80084ee:	4293      	cmp	r3, r2
 80084f0:	f340 8104 	ble.w	80086fc <__ieee754_pow+0x954>
 80084f4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80084f8:	2000      	movs	r0, #0
 80084fa:	151b      	asrs	r3, r3, #20
 80084fc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008500:	fa4a f303 	asr.w	r3, sl, r3
 8008504:	4433      	add	r3, r6
 8008506:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800850a:	4f9c      	ldr	r7, [pc, #624]	; (800877c <__ieee754_pow+0x9d4>)
 800850c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008510:	4117      	asrs	r7, r2
 8008512:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008516:	ea23 0107 	bic.w	r1, r3, r7
 800851a:	f1c2 0214 	rsb	r2, r2, #20
 800851e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008522:	fa4a fa02 	asr.w	sl, sl, r2
 8008526:	2e00      	cmp	r6, #0
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	bfb8      	it	lt
 8008532:	f1ca 0a00 	rsblt	sl, sl, #0
 8008536:	f7f7 fe0f 	bl	8000158 <__aeabi_dsub>
 800853a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800853e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008542:	4642      	mov	r2, r8
 8008544:	464b      	mov	r3, r9
 8008546:	f7f7 fe09 	bl	800015c <__adddf3>
 800854a:	a379      	add	r3, pc, #484	; (adr r3, 8008730 <__ieee754_pow+0x988>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	2000      	movs	r0, #0
 8008552:	460d      	mov	r5, r1
 8008554:	4604      	mov	r4, r0
 8008556:	f7f7 ffb3 	bl	80004c0 <__aeabi_dmul>
 800855a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800855e:	4606      	mov	r6, r0
 8008560:	460f      	mov	r7, r1
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	f7f7 fdf7 	bl	8000158 <__aeabi_dsub>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f7 fdf1 	bl	8000158 <__aeabi_dsub>
 8008576:	a370      	add	r3, pc, #448	; (adr r3, 8008738 <__ieee754_pow+0x990>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f7 ffa0 	bl	80004c0 <__aeabi_dmul>
 8008580:	a36f      	add	r3, pc, #444	; (adr r3, 8008740 <__ieee754_pow+0x998>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	4680      	mov	r8, r0
 8008588:	4689      	mov	r9, r1
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7f7 ff97 	bl	80004c0 <__aeabi_dmul>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	f7f7 fddf 	bl	800015c <__adddf3>
 800859e:	4604      	mov	r4, r0
 80085a0:	460d      	mov	r5, r1
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	f7f7 fdd7 	bl	800015c <__adddf3>
 80085ae:	4632      	mov	r2, r6
 80085b0:	463b      	mov	r3, r7
 80085b2:	4680      	mov	r8, r0
 80085b4:	4689      	mov	r9, r1
 80085b6:	f7f7 fdcf 	bl	8000158 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4620      	mov	r0, r4
 80085c0:	4629      	mov	r1, r5
 80085c2:	f7f7 fdc9 	bl	8000158 <__aeabi_dsub>
 80085c6:	4642      	mov	r2, r8
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	464b      	mov	r3, r9
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 ff75 	bl	80004c0 <__aeabi_dmul>
 80085d6:	a35c      	add	r3, pc, #368	; (adr r3, 8008748 <__ieee754_pow+0x9a0>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4604      	mov	r4, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	f7f7 ff6e 	bl	80004c0 <__aeabi_dmul>
 80085e4:	a35a      	add	r3, pc, #360	; (adr r3, 8008750 <__ieee754_pow+0x9a8>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fdb5 	bl	8000158 <__aeabi_dsub>
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	f7f7 ff65 	bl	80004c0 <__aeabi_dmul>
 80085f6:	a358      	add	r3, pc, #352	; (adr r3, 8008758 <__ieee754_pow+0x9b0>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f7 fdae 	bl	800015c <__adddf3>
 8008600:	4622      	mov	r2, r4
 8008602:	462b      	mov	r3, r5
 8008604:	f7f7 ff5c 	bl	80004c0 <__aeabi_dmul>
 8008608:	a355      	add	r3, pc, #340	; (adr r3, 8008760 <__ieee754_pow+0x9b8>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f7 fda3 	bl	8000158 <__aeabi_dsub>
 8008612:	4622      	mov	r2, r4
 8008614:	462b      	mov	r3, r5
 8008616:	f7f7 ff53 	bl	80004c0 <__aeabi_dmul>
 800861a:	a353      	add	r3, pc, #332	; (adr r3, 8008768 <__ieee754_pow+0x9c0>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f7f7 fd9c 	bl	800015c <__adddf3>
 8008624:	4622      	mov	r2, r4
 8008626:	462b      	mov	r3, r5
 8008628:	f7f7 ff4a 	bl	80004c0 <__aeabi_dmul>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f7 fd90 	bl	8000158 <__aeabi_dsub>
 8008638:	4604      	mov	r4, r0
 800863a:	460d      	mov	r5, r1
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4640      	mov	r0, r8
 8008642:	4649      	mov	r1, r9
 8008644:	f7f7 ff3c 	bl	80004c0 <__aeabi_dmul>
 8008648:	2200      	movs	r2, #0
 800864a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008652:	4620      	mov	r0, r4
 8008654:	4629      	mov	r1, r5
 8008656:	f7f7 fd7f 	bl	8000158 <__aeabi_dsub>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008662:	f7f8 f857 	bl	8000714 <__aeabi_ddiv>
 8008666:	4632      	mov	r2, r6
 8008668:	4604      	mov	r4, r0
 800866a:	460d      	mov	r5, r1
 800866c:	463b      	mov	r3, r7
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f7 ff25 	bl	80004c0 <__aeabi_dmul>
 8008676:	4632      	mov	r2, r6
 8008678:	463b      	mov	r3, r7
 800867a:	f7f7 fd6f 	bl	800015c <__adddf3>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f7 fd67 	bl	8000158 <__aeabi_dsub>
 800868a:	4642      	mov	r2, r8
 800868c:	464b      	mov	r3, r9
 800868e:	f7f7 fd63 	bl	8000158 <__aeabi_dsub>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	2000      	movs	r0, #0
 8008698:	4939      	ldr	r1, [pc, #228]	; (8008780 <__ieee754_pow+0x9d8>)
 800869a:	f7f7 fd5d 	bl	8000158 <__aeabi_dsub>
 800869e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80086a2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80086a6:	da2c      	bge.n	8008702 <__ieee754_pow+0x95a>
 80086a8:	4652      	mov	r2, sl
 80086aa:	f000 f9b5 	bl	8008a18 <scalbn>
 80086ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b2:	e40a      	b.n	8007eca <__ieee754_pow+0x122>
 80086b4:	4b33      	ldr	r3, [pc, #204]	; (8008784 <__ieee754_pow+0x9dc>)
 80086b6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80086ba:	429f      	cmp	r7, r3
 80086bc:	f77f af14 	ble.w	80084e8 <__ieee754_pow+0x740>
 80086c0:	4b31      	ldr	r3, [pc, #196]	; (8008788 <__ieee754_pow+0x9e0>)
 80086c2:	440b      	add	r3, r1
 80086c4:	4303      	orrs	r3, r0
 80086c6:	d00b      	beq.n	80086e0 <__ieee754_pow+0x938>
 80086c8:	a329      	add	r3, pc, #164	; (adr r3, 8008770 <__ieee754_pow+0x9c8>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086d2:	f7f7 fef5 	bl	80004c0 <__aeabi_dmul>
 80086d6:	a326      	add	r3, pc, #152	; (adr r3, 8008770 <__ieee754_pow+0x9c8>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7ff bbf5 	b.w	8007eca <__ieee754_pow+0x122>
 80086e0:	4622      	mov	r2, r4
 80086e2:	462b      	mov	r3, r5
 80086e4:	f7f7 fd38 	bl	8000158 <__aeabi_dsub>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 f962 	bl	80009b8 <__aeabi_dcmple>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f43f aef7 	beq.w	80084e8 <__ieee754_pow+0x740>
 80086fa:	e7e5      	b.n	80086c8 <__ieee754_pow+0x920>
 80086fc:	f04f 0a00 	mov.w	sl, #0
 8008700:	e71d      	b.n	800853e <__ieee754_pow+0x796>
 8008702:	4621      	mov	r1, r4
 8008704:	e7d3      	b.n	80086ae <__ieee754_pow+0x906>
 8008706:	2000      	movs	r0, #0
 8008708:	491d      	ldr	r1, [pc, #116]	; (8008780 <__ieee754_pow+0x9d8>)
 800870a:	f7ff bbac 	b.w	8007e66 <__ieee754_pow+0xbe>
 800870e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008712:	f7ff bba8 	b.w	8007e66 <__ieee754_pow+0xbe>
 8008716:	4638      	mov	r0, r7
 8008718:	4641      	mov	r1, r8
 800871a:	f7ff bba4 	b.w	8007e66 <__ieee754_pow+0xbe>
 800871e:	9200      	str	r2, [sp, #0]
 8008720:	f7ff bbb4 	b.w	8007e8c <__ieee754_pow+0xe4>
 8008724:	f3af 8000 	nop.w
 8008728:	652b82fe 	.word	0x652b82fe
 800872c:	3c971547 	.word	0x3c971547
 8008730:	00000000 	.word	0x00000000
 8008734:	3fe62e43 	.word	0x3fe62e43
 8008738:	fefa39ef 	.word	0xfefa39ef
 800873c:	3fe62e42 	.word	0x3fe62e42
 8008740:	0ca86c39 	.word	0x0ca86c39
 8008744:	be205c61 	.word	0xbe205c61
 8008748:	72bea4d0 	.word	0x72bea4d0
 800874c:	3e663769 	.word	0x3e663769
 8008750:	c5d26bf1 	.word	0xc5d26bf1
 8008754:	3ebbbd41 	.word	0x3ebbbd41
 8008758:	af25de2c 	.word	0xaf25de2c
 800875c:	3f11566a 	.word	0x3f11566a
 8008760:	16bebd93 	.word	0x16bebd93
 8008764:	3f66c16c 	.word	0x3f66c16c
 8008768:	5555553e 	.word	0x5555553e
 800876c:	3fc55555 	.word	0x3fc55555
 8008770:	c2f8f359 	.word	0xc2f8f359
 8008774:	01a56e1f 	.word	0x01a56e1f
 8008778:	3fe00000 	.word	0x3fe00000
 800877c:	000fffff 	.word	0x000fffff
 8008780:	3ff00000 	.word	0x3ff00000
 8008784:	4090cbff 	.word	0x4090cbff
 8008788:	3f6f3400 	.word	0x3f6f3400

0800878c <__ieee754_sqrt>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80088e0 <__ieee754_sqrt+0x154>
 8008794:	4606      	mov	r6, r0
 8008796:	ea3e 0e01 	bics.w	lr, lr, r1
 800879a:	460d      	mov	r5, r1
 800879c:	4607      	mov	r7, r0
 800879e:	460a      	mov	r2, r1
 80087a0:	460c      	mov	r4, r1
 80087a2:	4603      	mov	r3, r0
 80087a4:	d10f      	bne.n	80087c6 <__ieee754_sqrt+0x3a>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	f7f7 fe89 	bl	80004c0 <__aeabi_dmul>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4630      	mov	r0, r6
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f7 fcd1 	bl	800015c <__adddf3>
 80087ba:	4606      	mov	r6, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	4630      	mov	r0, r6
 80087c0:	4629      	mov	r1, r5
 80087c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c6:	2900      	cmp	r1, #0
 80087c8:	dc0e      	bgt.n	80087e8 <__ieee754_sqrt+0x5c>
 80087ca:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 80087ce:	ea5e 0707 	orrs.w	r7, lr, r7
 80087d2:	d0f4      	beq.n	80087be <__ieee754_sqrt+0x32>
 80087d4:	b141      	cbz	r1, 80087e8 <__ieee754_sqrt+0x5c>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	f7f7 fcbd 	bl	8000158 <__aeabi_dsub>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	f7f7 ff97 	bl	8000714 <__aeabi_ddiv>
 80087e6:	e7e8      	b.n	80087ba <__ieee754_sqrt+0x2e>
 80087e8:	1512      	asrs	r2, r2, #20
 80087ea:	d10c      	bne.n	8008806 <__ieee754_sqrt+0x7a>
 80087ec:	2c00      	cmp	r4, #0
 80087ee:	d06e      	beq.n	80088ce <__ieee754_sqrt+0x142>
 80087f0:	2100      	movs	r1, #0
 80087f2:	02e6      	lsls	r6, r4, #11
 80087f4:	d56f      	bpl.n	80088d6 <__ieee754_sqrt+0x14a>
 80087f6:	1e48      	subs	r0, r1, #1
 80087f8:	1a12      	subs	r2, r2, r0
 80087fa:	f1c1 0020 	rsb	r0, r1, #32
 80087fe:	fa23 f000 	lsr.w	r0, r3, r0
 8008802:	4304      	orrs	r4, r0
 8008804:	408b      	lsls	r3, r1
 8008806:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800880a:	07d5      	lsls	r5, r2, #31
 800880c:	f04f 0500 	mov.w	r5, #0
 8008810:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008814:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008818:	bf42      	ittt	mi
 800881a:	0064      	lslmi	r4, r4, #1
 800881c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8008820:	005b      	lslmi	r3, r3, #1
 8008822:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8008826:	1050      	asrs	r0, r2, #1
 8008828:	4421      	add	r1, r4
 800882a:	2216      	movs	r2, #22
 800882c:	462c      	mov	r4, r5
 800882e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	19a7      	adds	r7, r4, r6
 8008836:	428f      	cmp	r7, r1
 8008838:	bfde      	ittt	le
 800883a:	1bc9      	suble	r1, r1, r7
 800883c:	19bc      	addle	r4, r7, r6
 800883e:	19ad      	addle	r5, r5, r6
 8008840:	0049      	lsls	r1, r1, #1
 8008842:	3a01      	subs	r2, #1
 8008844:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008848:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800884c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008850:	d1f0      	bne.n	8008834 <__ieee754_sqrt+0xa8>
 8008852:	f04f 0e20 	mov.w	lr, #32
 8008856:	4694      	mov	ip, r2
 8008858:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800885c:	42a1      	cmp	r1, r4
 800885e:	eb06 070c 	add.w	r7, r6, ip
 8008862:	dc02      	bgt.n	800886a <__ieee754_sqrt+0xde>
 8008864:	d112      	bne.n	800888c <__ieee754_sqrt+0x100>
 8008866:	429f      	cmp	r7, r3
 8008868:	d810      	bhi.n	800888c <__ieee754_sqrt+0x100>
 800886a:	2f00      	cmp	r7, #0
 800886c:	eb07 0c06 	add.w	ip, r7, r6
 8008870:	da34      	bge.n	80088dc <__ieee754_sqrt+0x150>
 8008872:	f1bc 0f00 	cmp.w	ip, #0
 8008876:	db31      	blt.n	80088dc <__ieee754_sqrt+0x150>
 8008878:	f104 0801 	add.w	r8, r4, #1
 800887c:	1b09      	subs	r1, r1, r4
 800887e:	4644      	mov	r4, r8
 8008880:	429f      	cmp	r7, r3
 8008882:	bf88      	it	hi
 8008884:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008888:	1bdb      	subs	r3, r3, r7
 800888a:	4432      	add	r2, r6
 800888c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8008890:	f1be 0e01 	subs.w	lr, lr, #1
 8008894:	4439      	add	r1, r7
 8008896:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800889a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800889e:	d1dd      	bne.n	800885c <__ieee754_sqrt+0xd0>
 80088a0:	430b      	orrs	r3, r1
 80088a2:	d006      	beq.n	80088b2 <__ieee754_sqrt+0x126>
 80088a4:	1c54      	adds	r4, r2, #1
 80088a6:	bf0b      	itete	eq
 80088a8:	4672      	moveq	r2, lr
 80088aa:	3201      	addne	r2, #1
 80088ac:	3501      	addeq	r5, #1
 80088ae:	f022 0201 	bicne.w	r2, r2, #1
 80088b2:	106b      	asrs	r3, r5, #1
 80088b4:	0852      	lsrs	r2, r2, #1
 80088b6:	07e9      	lsls	r1, r5, #31
 80088b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80088c0:	bf48      	it	mi
 80088c2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80088c6:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 80088ca:	4616      	mov	r6, r2
 80088cc:	e777      	b.n	80087be <__ieee754_sqrt+0x32>
 80088ce:	0adc      	lsrs	r4, r3, #11
 80088d0:	3a15      	subs	r2, #21
 80088d2:	055b      	lsls	r3, r3, #21
 80088d4:	e78a      	b.n	80087ec <__ieee754_sqrt+0x60>
 80088d6:	0064      	lsls	r4, r4, #1
 80088d8:	3101      	adds	r1, #1
 80088da:	e78a      	b.n	80087f2 <__ieee754_sqrt+0x66>
 80088dc:	46a0      	mov	r8, r4
 80088de:	e7cd      	b.n	800887c <__ieee754_sqrt+0xf0>
 80088e0:	7ff00000 	.word	0x7ff00000

080088e4 <fabs>:
 80088e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088e8:	4770      	bx	lr

080088ea <finite>:
 80088ea:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80088ee:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80088f2:	0fc0      	lsrs	r0, r0, #31
 80088f4:	4770      	bx	lr

080088f6 <matherr>:
 80088f6:	2000      	movs	r0, #0
 80088f8:	4770      	bx	lr
	...

080088fc <nan>:
 80088fc:	2000      	movs	r0, #0
 80088fe:	4901      	ldr	r1, [pc, #4]	; (8008904 <nan+0x8>)
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	7ff80000 	.word	0x7ff80000

08008908 <rint>:
 8008908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800890a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800890e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8008912:	2f13      	cmp	r7, #19
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4684      	mov	ip, r0
 800891a:	460c      	mov	r4, r1
 800891c:	4605      	mov	r5, r0
 800891e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8008922:	dc56      	bgt.n	80089d2 <rint+0xca>
 8008924:	2f00      	cmp	r7, #0
 8008926:	da29      	bge.n	800897c <rint+0x74>
 8008928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800892c:	4301      	orrs	r1, r0
 800892e:	d021      	beq.n	8008974 <rint+0x6c>
 8008930:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8008934:	4305      	orrs	r5, r0
 8008936:	426b      	negs	r3, r5
 8008938:	432b      	orrs	r3, r5
 800893a:	0b1b      	lsrs	r3, r3, #12
 800893c:	0c64      	lsrs	r4, r4, #17
 800893e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008942:	0464      	lsls	r4, r4, #17
 8008944:	ea43 0104 	orr.w	r1, r3, r4
 8008948:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <rint+0x108>)
 800894a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800894e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008952:	4622      	mov	r2, r4
 8008954:	462b      	mov	r3, r5
 8008956:	f7f7 fc01 	bl	800015c <__adddf3>
 800895a:	e9cd 0100 	strd	r0, r1, [sp]
 800895e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fbf7 	bl	8000158 <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008970:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	b003      	add	sp, #12
 800897a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897c:	4925      	ldr	r1, [pc, #148]	; (8008a14 <rint+0x10c>)
 800897e:	4139      	asrs	r1, r7
 8008980:	ea03 0001 	and.w	r0, r3, r1
 8008984:	4310      	orrs	r0, r2
 8008986:	d0f5      	beq.n	8008974 <rint+0x6c>
 8008988:	084b      	lsrs	r3, r1, #1
 800898a:	ea04 0203 	and.w	r2, r4, r3
 800898e:	ea52 050c 	orrs.w	r5, r2, ip
 8008992:	d00a      	beq.n	80089aa <rint+0xa2>
 8008994:	ea24 0303 	bic.w	r3, r4, r3
 8008998:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800899c:	2f13      	cmp	r7, #19
 800899e:	bf0c      	ite	eq
 80089a0:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80089a4:	2500      	movne	r5, #0
 80089a6:	413c      	asrs	r4, r7
 80089a8:	431c      	orrs	r4, r3
 80089aa:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <rint+0x108>)
 80089ac:	4621      	mov	r1, r4
 80089ae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80089b2:	4628      	mov	r0, r5
 80089b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80089b8:	4622      	mov	r2, r4
 80089ba:	462b      	mov	r3, r5
 80089bc:	f7f7 fbce 	bl	800015c <__adddf3>
 80089c0:	e9cd 0100 	strd	r0, r1, [sp]
 80089c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089c8:	4622      	mov	r2, r4
 80089ca:	462b      	mov	r3, r5
 80089cc:	f7f7 fbc4 	bl	8000158 <__aeabi_dsub>
 80089d0:	e006      	b.n	80089e0 <rint+0xd8>
 80089d2:	2f33      	cmp	r7, #51	; 0x33
 80089d4:	dd07      	ble.n	80089e6 <rint+0xde>
 80089d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80089da:	d1cb      	bne.n	8008974 <rint+0x6c>
 80089dc:	f7f7 fbbe 	bl	800015c <__adddf3>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	e7c6      	b.n	8008974 <rint+0x6c>
 80089e6:	f04f 31ff 	mov.w	r1, #4294967295
 80089ea:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80089ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80089f2:	4208      	tst	r0, r1
 80089f4:	d0be      	beq.n	8008974 <rint+0x6c>
 80089f6:	084b      	lsrs	r3, r1, #1
 80089f8:	4218      	tst	r0, r3
 80089fa:	bf1f      	itttt	ne
 80089fc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8008a00:	ea20 0303 	bicne.w	r3, r0, r3
 8008a04:	fa45 fe0e 	asrne.w	lr, r5, lr
 8008a08:	ea4e 0503 	orrne.w	r5, lr, r3
 8008a0c:	e7cd      	b.n	80089aa <rint+0xa2>
 8008a0e:	bf00      	nop
 8008a10:	08009688 	.word	0x08009688
 8008a14:	000fffff 	.word	0x000fffff

08008a18 <scalbn>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	4616      	mov	r6, r2
 8008a1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a20:	4604      	mov	r4, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	460b      	mov	r3, r1
 8008a26:	b98a      	cbnz	r2, 8008a4c <scalbn+0x34>
 8008a28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a2c:	4303      	orrs	r3, r0
 8008a2e:	d035      	beq.n	8008a9c <scalbn+0x84>
 8008a30:	2200      	movs	r2, #0
 8008a32:	4b2d      	ldr	r3, [pc, #180]	; (8008ae8 <scalbn+0xd0>)
 8008a34:	f7f7 fd44 	bl	80004c0 <__aeabi_dmul>
 8008a38:	4a2c      	ldr	r2, [pc, #176]	; (8008aec <scalbn+0xd4>)
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4296      	cmp	r6, r2
 8008a3e:	460d      	mov	r5, r1
 8008a40:	460b      	mov	r3, r1
 8008a42:	da0e      	bge.n	8008a62 <scalbn+0x4a>
 8008a44:	a324      	add	r3, pc, #144	; (adr r3, 8008ad8 <scalbn+0xc0>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	e01c      	b.n	8008a86 <scalbn+0x6e>
 8008a4c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008a50:	42ba      	cmp	r2, r7
 8008a52:	d109      	bne.n	8008a68 <scalbn+0x50>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	f7f7 fb80 	bl	800015c <__adddf3>
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	e01c      	b.n	8008a9c <scalbn+0x84>
 8008a62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a66:	3a36      	subs	r2, #54	; 0x36
 8008a68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008a6c:	4432      	add	r2, r6
 8008a6e:	428a      	cmp	r2, r1
 8008a70:	dd0c      	ble.n	8008a8c <scalbn+0x74>
 8008a72:	4622      	mov	r2, r4
 8008a74:	462b      	mov	r3, r5
 8008a76:	a11a      	add	r1, pc, #104	; (adr r1, 8008ae0 <scalbn+0xc8>)
 8008a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a7c:	f000 f83a 	bl	8008af4 <copysign>
 8008a80:	a317      	add	r3, pc, #92	; (adr r3, 8008ae0 <scalbn+0xc8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fd1b 	bl	80004c0 <__aeabi_dmul>
 8008a8a:	e7e7      	b.n	8008a5c <scalbn+0x44>
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	dd08      	ble.n	8008aa2 <scalbn+0x8a>
 8008a90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008aa6:	da0b      	bge.n	8008ac0 <scalbn+0xa8>
 8008aa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008aac:	429e      	cmp	r6, r3
 8008aae:	4622      	mov	r2, r4
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	dce0      	bgt.n	8008a76 <scalbn+0x5e>
 8008ab4:	a108      	add	r1, pc, #32	; (adr r1, 8008ad8 <scalbn+0xc0>)
 8008ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aba:	f000 f81b 	bl	8008af4 <copysign>
 8008abe:	e7c1      	b.n	8008a44 <scalbn+0x2c>
 8008ac0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ac4:	3236      	adds	r2, #54	; 0x36
 8008ac6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008aca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <scalbn+0xd8>)
 8008ad6:	e7d6      	b.n	8008a86 <scalbn+0x6e>
 8008ad8:	c2f8f359 	.word	0xc2f8f359
 8008adc:	01a56e1f 	.word	0x01a56e1f
 8008ae0:	8800759c 	.word	0x8800759c
 8008ae4:	7e37e43c 	.word	0x7e37e43c
 8008ae8:	43500000 	.word	0x43500000
 8008aec:	ffff3cb0 	.word	0xffff3cb0
 8008af0:	3c900000 	.word	0x3c900000

08008af4 <copysign>:
 8008af4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	ea42 0103 	orr.w	r1, r2, r3
 8008b00:	4770      	bx	lr
	...

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000018 	.word	0x20000018

08008b10 <_sbrk>:
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <_sbrk+0x14>)
 8008b12:	4602      	mov	r2, r0
 8008b14:	6819      	ldr	r1, [r3, #0]
 8008b16:	b909      	cbnz	r1, 8008b1c <_sbrk+0xc>
 8008b18:	4903      	ldr	r1, [pc, #12]	; (8008b28 <_sbrk+0x18>)
 8008b1a:	6019      	str	r1, [r3, #0]
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	4402      	add	r2, r0
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	4770      	bx	lr
 8008b24:	200004b0 	.word	0x200004b0
 8008b28:	20000678 	.word	0x20000678

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr
